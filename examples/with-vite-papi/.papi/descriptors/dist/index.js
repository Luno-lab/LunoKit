var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Dot: () => Dot,
  Ksm: () => Ksm,
  Paseo: () => Paseo,
  Wnd: () => Wnd
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Dot, Ksm, Paseo, Wnd;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    [minified, commonTrees, tokens] = JSON.parse(`[{"dot":{"345":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":0,"27":1,"45":2,"48":3,"50":4,"57":5,"60":6,"62":7,"106":8,"109":9,"112":10,"118":11,"125":12,"127":13,"134":14,"137":15,"143":16,"144":17,"146":18,"147":19,"148":20,"150":21,"153":17,"156":22,"158":23,"160":24,"165":25,"178":26,"182":27,"204":28,"209":29,"210":17,"214":30,"219":31,"221":32,"224":33,"229":34,"251":35,"254":36,"258":37,"271":38,"277":39,"282":40,"284":41,"290":42,"293":43,"296":44,"298":45,"303":46,"308":47,"309":17,"313":48,"328":49,"332":50,"334":51,"337":52,"341":53,"344":54},"644":{"18":57,"23":{"357":35,"358":36,"359":37,"360":38,"361":39,"362":40,"363":41,"364":42,"365":43,"366":38},"27":58,"45":59,"48":60,"50":61,"57":62,"60":17,"62":17,"106":63,"109":17,"112":17,"118":64,"125":65,"127":17,"134":66,"137":67,"143":68,"144":17,"146":{"442":210,"443":210,"444":211,"445":212},"147":69,"148":70,"150":71,"153":{"457":237,"458":238,"459":237,"460":239,"461":237,"462":240},"156":{"463":246,"464":247,"465":247,"466":128,"467":248,"468":249,"469":250,"470":250,"471":251,"472":252},"158":{"473":257,"474":258,"475":259,"476":260},"160":72,"165":73,"178":74,"182":75,"204":76,"209":77,"210":17,"214":78,"219":17,"221":17,"224":79,"229":17,"251":80,"254":81,"258":17,"271":82,"277":17,"282":83,"284":84,"290":85,"293":17,"296":86,"298":87,"303":88,"308":89,"309":90,"313":91,"328":92,"332":93,"334":94,"337":95,"341":17,"344":17},"876":{"18":{"645":24,"646":25,"647":26,"648":27,"649":27,"650":28,"651":29},"23":{"652":44,"653":44,"654":45,"655":46,"656":47,"657":47,"658":47,"659":47,"660":47},"27":97,"45":17,"48":17,"50":98,"57":99,"60":100,"62":17,"106":101,"109":102,"112":17,"118":103,"125":104,"127":17,"134":105,"137":106,"143":107,"144":17,"146":{"738":213,"739":213,"740":214},"147":108,"148":109,"150":110,"153":{"745":241,"746":26,"747":26,"748":26,"749":242,"750":243},"156":{"751":243,"752":253,"753":254,"754":255,"755":255},"158":{"756":261,"757":262,"758":263,"759":264},"160":111,"165":112,"178":113,"182":114,"204":115,"209":{"676":150,"793":358,"794":359,"795":155,"796":26},"210":17,"214":17,"219":17,"221":116,"224":17,"229":17,"251":117,"254":17,"258":17,"271":118,"277":17,"282":119,"284":17,"290":120,"293":17,"296":121,"298":122,"303":123,"308":{"778":448,"831":472,"832":472,"833":448,"834":448,"835":448,"836":473,"837":448,"838":474,"839":448},"309":124,"313":125,"328":126,"332":127,"334":128,"337":17,"341":17,"344":17},"974":{"18":129,"23":130,"27":17,"45":131,"48":132,"50":133,"57":134,"60":135,"62":17,"106":136,"109":17,"112":17,"118":17,"125":137,"127":17,"134":138,"137":139,"143":140,"144":17,"146":17,"147":17,"148":141,"150":142,"153":143,"156":144,"158":145,"160":146,"165":147,"178":148,"182":149,"204":150,"209":133,"210":17,"214":17,"219":17,"221":17,"224":17,"229":17,"251":151,"254":17,"258":17,"271":17,"277":17,"282":17,"284":17,"290":152,"293":17,"296":153,"298":154,"303":155,"308":156,"309":157,"313":158,"328":17,"332":159,"334":17,"337":137,"341":17,"344":17},"1087":{"198":161,"976":162,"980":163,"988":{"984":556,"985":557,"986":558,"987":559},"996":164,"999":165,"1001":166,"1003":167,"1035":168,"1040":169,"1046":170,"1049":171,"1052":172,"1057":173,"1059":174,"1062":175,"1064":176,"1069":177,"1072":{"1067":622,"1068":623,"1070":624,"1071":625},"1077":178,"1080":{"1078":630,"1079":631},"1082":179,"1086":180}},"ksm":{"345":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":636,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"19":1,"20":707,"21":32,"22":33},"27":1,"45":2,"48":3,"50":4,"57":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":638,"56":77},"60":6,"62":7,"106":8,"109":9,"112":10,"118":11,"125":12,"127":13,"134":14,"137":15,"143":{"138":1,"139":639,"140":199,"141":106,"142":4},"144":17,"146":18,"147":19,"148":20,"150":21,"153":17,"156":{"154":713,"155":245},"158":23,"160":24,"165":25,"178":{"168":1,"169":285,"170":286,"171":287,"172":1,"173":288,"174":1,"175":289,"176":724,"177":291},"182":27,"204":28,"209":29,"210":17,"214":30,"219":31,"221":32,"224":33,"229":34,"251":35,"254":36,"258":37,"271":38,"277":39,"282":40,"284":41,"293":43,"296":44,"298":45,"303":46,"308":47,"309":17,"328":49,"332":50,"334":51,"337":52,"341":53,"344":54,"1090":{"1088":106,"1089":314,"IdToIndex":641,"IndexToId":642,"Voting":643,"VotingCleanup":5},"1091":{"138":1,"139":652,"140":653,"141":106,"142":4},"1092":{"147":665,"205":97,"1088":1,"1089":666,"Pot":55,"Founder":97,"Rules":6,"Payouts":667,"MemberByIndex":668,"SuspendedMembers":666,"RoundCount":1,"Bids":669,"Candidates":670,"Skeptic":97,"Votes":671,"VoteClearCursor":672,"NextHead":673,"ChallengeRoundCount":1,"Defending":674,"DefenderVotes":675},"1095":55,"1096":{"QueueTotals":727,"Queues":728,"Summary":729,"Receipts":730},"1097":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":638,"56":739},"1098":42},"644":{"18":57,"23":{"357":708,"358":36,"359":709,"360":38,"361":710,"362":711,"363":41,"364":42,"365":43,"366":38},"27":58,"45":59,"48":60,"50":61,"57":62,"60":17,"62":17,"106":63,"109":17,"112":17,"118":64,"125":65,"127":17,"134":66,"137":67,"143":96,"144":17,"146":{"442":210,"443":210,"444":211,"445":656},"147":69,"148":70,"150":71,"153":{"457":658,"458":659,"459":658,"460":660,"461":658,"462":661},"156":{"463":714,"464":715,"465":715,"466":128,"467":716,"468":717,"469":250,"470":250,"471":251,"472":718},"158":{"473":721,"474":722,"475":259,"476":260},"160":72,"165":73,"178":{"434":726,"490":725,"491":293,"492":294,"493":296},"182":75,"204":76,"209":77,"210":17,"214":78,"219":17,"221":17,"224":79,"229":17,"251":80,"254":81,"258":17,"271":82,"277":17,"282":83,"284":84,"293":17,"296":86,"298":87,"303":88,"308":89,"309":90,"328":92,"332":93,"334":94,"337":95,"341":17,"344":17,"1090":{"428":646,"add_member":644,"promote_member":644,"demote_member":644,"remove_member":645,"cleanup_poll":647,"exchange_member":648},"1091":96,"1092":{"425":128,"428":677,"606":124,"611":128,"unbid":128,"vouch":676,"unvouch":128,"defender_vote":678,"waive_repay":679,"found_society":680,"judge_suspended_member":681,"set_parameters":682,"punish_skeptic":128,"claim_membership":128,"bestow_membership":683,"kick_candidate":683,"resign_candidacy":128,"drop_candidate":683,"cleanup_candidacy":684,"cleanup_challenge":685},"1095":{"1099":699,"1100":700,"1101":701,"1102":702,"1103":700,"1104":702,"1105":703,"1106":128,"1107":702},"1096":{"place_bid":732,"retract_bid":732,"fund_deficit":128,"thaw_private":733,"thaw_communal":68,"communify":68,"privatize":68},"1097":62,"1098":85},"876":{"18":{"645":24,"646":637,"647":26,"648":27,"649":27,"650":28,"651":29},"23":{"652":44,"653":44,"654":712,"655":46,"656":47,"657":47,"658":47,"659":47,"660":47},"27":97,"45":17,"48":17,"50":98,"57":99,"60":100,"62":17,"106":101,"109":102,"112":17,"118":103,"125":104,"127":17,"134":105,"137":106,"143":107,"144":17,"146":{"738":213,"739":213,"740":657},"147":108,"148":109,"150":110,"153":{"745":662,"746":26,"747":26,"748":26,"749":663,"750":664},"156":{"751":664,"752":719,"753":254,"754":720,"755":720},"158":{"756":261,"757":262,"758":723,"759":264},"160":111,"165":112,"178":113,"182":114,"204":115,"209":{"676":150,"793":740,"794":359,"795":155,"796":26},"210":17,"214":17,"219":17,"221":116,"224":17,"229":17,"251":117,"254":17,"258":17,"271":118,"277":17,"282":119,"284":17,"293":17,"296":121,"298":122,"303":123,"308":{"778":448,"831":472,"832":472,"833":448,"834":448,"835":448,"836":741,"837":448,"838":474,"839":448},"309":124,"328":126,"332":127,"334":128,"337":17,"341":17,"344":17,"1090":{"782":649,"1108":650,"MemberAdded":92,"RankChanged":649,"MemberExchanged":651},"1091":{"722":204,"723":205,"724":205,"725":90,"726":654,"727":72,"728":72,"729":655,"730":72,"731":655,"732":655,"733":655,"734":655,"735":205,"736":208,"737":208},"1092":{"674":183,"Founded":686,"Bid":687,"Vouch":688,"AutoUnbid":689,"Unbid":689,"Unvouch":689,"Inducted":690,"SuspendedMemberJudgement":691,"CandidateSuspended":689,"MemberSuspended":692,"Challenged":692,"Vote":693,"DefenderVote":694,"NewParams":695,"Unfounded":686,"Elevated":696},"1095":{"1109":27,"1110":704,"1111":705,"1112":704,"1113":704,"1114":706},"1096":{"682":735,"686":736,"BidPlaced":734,"BidRetracted":734,"BidDropped":734,"Funded":737,"Transferred":738},"1097":99,"1098":120},"974":{"18":129,"23":130,"27":17,"45":131,"48":132,"50":133,"57":134,"60":135,"62":17,"106":136,"109":17,"112":17,"118":17,"125":137,"127":17,"134":138,"137":139,"143":140,"144":17,"146":17,"147":17,"148":141,"150":142,"153":143,"156":144,"158":145,"160":146,"165":147,"178":148,"182":149,"204":150,"209":133,"210":17,"214":17,"219":17,"221":17,"224":17,"229":17,"251":151,"254":17,"258":17,"271":17,"277":17,"282":17,"284":17,"293":17,"296":153,"298":154,"303":155,"308":156,"309":157,"328":17,"332":159,"334":17,"337":137,"341":17,"344":17,"1090":17,"1091":140,"1092":{"904":175,"GraceStrikes":1,"PeriodSpend":55,"VotingPeriod":1,"ClaimPeriod":1,"MaxLockDuration":1,"ChallengePeriod":1,"MaxPayouts":1,"MaxBids":1},"1095":160,"1096":{"904":175,"QueueCount":1,"MaxQueueLen":1,"FifoQueueLen":1,"BasePeriod":1,"MinBid":55,"MinReceipt":55,"IntakePeriod":1,"MaxIntakeWeight":34,"ThawThrottle":731},"1097":134,"1098":152},"1087":{"198":161,"976":162,"980":163,"988":{"984":742,"985":557,"986":558,"987":559},"996":164,"999":165,"1001":166,"1003":167,"1035":168,"1040":169,"1046":170,"1049":171,"1052":172,"1057":173,"1059":174,"1062":175,"1064":176,"1069":177,"1072":{"1067":622,"1068":623,"1070":743,"1071":744},"1077":178,"1080":{"1078":745,"1079":746},"1082":179,"1086":180}},"paseo":{"345":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":747,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":0,"27":1,"45":2,"48":3,"50":4,"57":5,"60":6,"62":7,"106":8,"109":9,"112":10,"118":11,"125":12,"127":13,"134":14,"137":15,"143":16,"144":17,"146":18,"147":19,"148":20,"150":21,"153":17,"156":22,"158":23,"160":24,"165":25,"178":26,"182":27,"204":28,"209":29,"210":17,"214":30,"219":31,"221":32,"224":33,"229":34,"251":35,"254":36,"258":37,"271":38,"277":39,"282":40,"284":41,"290":42,"293":43,"296":44,"298":45,"303":46,"308":47,"309":17,"313":48,"328":49,"332":50,"334":51,"337":52,"341":53,"344":54,"1119":17,"1121":56},"644":{"18":57,"23":{"357":749,"358":36,"359":750,"360":38,"361":751,"362":752,"363":41,"364":42,"365":43,"366":38},"27":58,"45":59,"48":60,"50":61,"57":62,"60":17,"62":17,"106":63,"109":17,"112":17,"118":64,"125":65,"127":17,"134":66,"137":67,"143":68,"144":17,"146":{"442":210,"443":210,"444":211,"445":754},"147":69,"148":70,"150":71,"153":{"457":756,"458":757,"459":756,"460":758,"461":756,"462":759},"156":{"463":763,"464":247,"465":247,"466":128,"467":248,"468":249,"469":250,"470":250,"471":251,"472":764},"158":{"473":765,"474":766,"475":259,"476":260},"160":72,"165":73,"178":74,"182":75,"204":76,"209":77,"210":17,"214":78,"219":17,"221":17,"224":79,"229":17,"251":80,"254":81,"258":17,"271":82,"277":17,"282":83,"284":84,"290":85,"293":17,"296":86,"298":87,"303":88,"308":89,"309":90,"313":91,"328":92,"332":93,"334":94,"337":95,"341":17,"344":17,"1119":{"1122":770,"1123":445,"1124":445,"1125":445,"1126":771,"1127":416},"1121":{"1128":754,"1129":759,"1130":772,"1131":773,"1132":128}},"876":{"18":{"645":24,"646":748,"647":26,"648":27,"649":27,"650":28,"651":29},"23":{"652":44,"653":44,"654":753,"655":46,"656":47,"657":47,"658":47,"659":47,"660":47},"27":97,"45":17,"48":17,"50":98,"57":99,"60":100,"62":17,"106":101,"109":102,"112":17,"118":103,"125":104,"127":17,"134":105,"137":106,"143":107,"144":17,"146":{"738":213,"739":213,"740":755},"147":108,"148":109,"150":110,"153":{"745":760,"746":26,"747":26,"748":26,"749":761,"750":762},"156":{"751":762,"752":253,"753":254,"754":255,"755":255},"158":{"756":261,"757":262,"758":767,"759":264},"160":111,"165":112,"178":113,"182":114,"204":115,"209":{"676":150,"793":768,"794":359,"795":155,"796":26},"210":17,"214":17,"219":17,"221":116,"224":17,"229":17,"251":117,"254":17,"258":17,"271":118,"277":17,"282":119,"284":17,"290":120,"293":17,"296":121,"298":122,"303":123,"308":{"778":448,"831":472,"832":472,"833":448,"834":448,"835":448,"836":769,"837":448,"838":474,"839":448},"309":124,"313":125,"328":126,"332":127,"334":128,"337":17,"341":17,"344":17,"1119":17,"1121":{"1133":774,"1134":775,"1135":26,"1136":774}},"974":{"18":129,"23":130,"27":17,"45":131,"48":132,"50":133,"57":134,"60":135,"62":17,"106":136,"109":17,"112":17,"118":17,"125":137,"127":17,"134":138,"137":139,"143":140,"144":17,"146":17,"147":17,"148":141,"150":142,"153":143,"156":144,"158":145,"160":146,"165":147,"178":148,"182":149,"204":150,"209":133,"210":17,"214":17,"219":17,"221":17,"224":17,"229":17,"251":151,"254":17,"258":17,"271":17,"277":17,"282":17,"284":17,"290":152,"293":17,"296":153,"298":154,"303":155,"308":156,"309":157,"313":158,"328":17,"332":159,"334":17,"337":137,"341":17,"344":17,"1119":17,"1121":17},"1087":{"198":161,"976":162,"980":163,"988":{"984":776,"985":557,"986":558,"987":559},"996":164,"999":165,"1001":166,"1003":167,"1035":168,"1040":169,"1046":170,"1049":171,"1052":172,"1057":173,"1059":174,"1062":175,"1064":176,"1069":177,"1072":{"1067":622,"1068":623,"1070":777,"1071":778},"1077":178,"1080":{"1078":779,"1079":780},"1082":179,"1086":180}},"wnd":{"345":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":781,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12,"ExtrinsicWeightReclaimed":34},"23":{"19":1,"20":838,"21":32,"22":33},"27":1,"45":2,"48":3,"50":4,"57":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":786,"56":77},"60":6,"62":7,"106":{"63":1,"64":1,"65":98,"66":99,"67":55,"68":55,"69":55,"70":1,"71":100,"72":101,"73":102,"74":1,"75":1,"76":103,"77":1,"78":104,"79":1,"80":1,"81":1,"82":105,"83":106,"84":107,"85":108,"86":107,"87":109,"88":110,"89":111,"90":112,"91":113,"92":112,"93":114,"94":1,"95":1,"96":55,"97":115,"98":116,"99":117,"100":118,"101":119,"102":120,"103":1,"105":1},"109":9,"112":10,"118":{"73":98,"104":116,"113":1,"114":2,"115":162,"116":163,"117":164},"125":12,"127":13,"134":{"128":1,"129":173,"130":55,"131":121,"132":1,"133":873,"LastSpendPeriod":1},"137":15,"143":{"138":1,"139":870,"140":199,"141":106,"142":4},"144":17,"146":18,"147":19,"150":21,"153":17,"156":{"154":847,"155":245},"158":23,"178":26,"182":{"179":301,"180":1,"181":302,"NextNodeAutoRebagged":97,"Lock":374},"204":28,"209":29,"210":17,"214":30,"219":{"215":1,"216":121,"217":172,"218":879},"221":{"220":880},"224":{"222":374,"223":883},"229":{"225":377,"227":1,"228":885},"251":{"230":380,"231":172,"232":121,"233":381,"234":5,"235":106,"236":4,"237":382,"238":383,"239":116,"240":106,"241":116,"242":4,"243":384,"244":385,"245":116,"246":116,"247":386,"248":387,"249":388,"250":389,"AuthorizedCodeHash":886},"254":36,"258":37,"271":38,"277":39,"282":40,"284":{"97":889,"283":106},"293":43,"296":44,"298":45,"303":46,"308":47,"309":17,"328":{"314":55,"315":916,"316":388,"317":1,"318":917,"319":918,"320":919,"321":920,"322":497,"323":921,"324":922,"325":2,"326":2,"327":923,"AuthorizedAliases":924},"332":50,"334":{"333":954},"337":52,"341":53,"344":54,"1095":55,"1098":{"285":433,"286":434,"287":435,"288":436,"289":303,"Credits":356},"1121":56,"1137":{"IdentityOf":801,"UsernameOf":672,"SuperOf":802,"SubsOf":803,"Registrars":804,"AuthorityOf":805,"UsernameInfoOf":806,"PendingUsernames":807,"UnbindingUsernames":808},"1138":{"Delegators":876,"CounterForDelegators":1,"Agents":877,"CounterForAgents":1},"1139":17,"1140":{"PermanentSlots":893,"PermanentSlotCount":1,"TemporarySlots":894,"TemporarySlotCount":1,"ActiveTemporarySlotCount":1,"MaxTemporarySlots":1,"MaxPermanentSlots":1},"1141":{"ValidatorSet":900,"IncompleteValidatorSetReport":901,"ValidatorPoints":314,"Mode":902,"NextSessionChangesValidators":1,"ValidatorSetAppliedAt":1,"BufferedOffences":903},"1142":{"Cursor":908,"Historic":909},"1143":17,"1144":17,"1145":17,"1146":17},"644":{"18":57,"23":{"357":839,"358":36,"359":840,"360":38,"361":841,"362":842,"363":41,"364":42,"365":43,"366":38},"27":58,"45":59,"48":60,"50":{"376":68,"377":69,"378":68,"379":70,"380":68,"1147":68},"57":62,"60":17,"62":17,"106":{"389":122,"390":123,"391":124,"392":125,"393":126,"394":127,"395":128,"396":129,"397":128,"398":130,"399":131,"400":132,"401":128,"402":128,"403":133,"404":134,"405":128,"406":135,"407":136,"408":124,"409":134,"410":137,"411":138,"412":139,"413":140,"414":130,"415":141,"416":142,"417":143,"418":144,"migrate_currency":139,"manual_slash":787},"109":17,"112":17,"118":64,"125":65,"127":17,"134":{"422":176,"423":177,"424":874,"425":68,"426":68,"427":68},"137":67,"143":{"358":68,"434":871,"435":68,"436":68,"437":68,"438":68,"439":202,"440":68,"441":203},"144":17,"146":{"442":210,"443":210,"444":211,"445":844},"147":69,"150":71,"153":{"457":792,"458":793,"459":792,"460":794,"461":792,"462":795,"if_else":796,"dispatch_as_fallible":794},"156":{"463":848,"464":849,"465":849,"466":128,"467":850,"468":851,"469":250,"470":250,"471":251,"472":852,"1147":128},"158":{"473":857,"474":858,"475":259,"476":260,"1147":859},"178":{"434":295,"490":292,"491":293,"492":294,"493":128},"182":75,"204":76,"209":77,"210":17,"214":{"520":130,"521":130,"522":130,"523":130,"524":130,"525":130,"526":130,"528":130,"529":130,"530":130,"531":362,"532":362,"533":130,"534":130,"535":130,"536":130,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":363,"547":363,"548":130,"549":130,"550":130,"551":130,"552":130,"553":130,"554":130,"555":130,"556":364,"557":365,"558":366,"559":363,"560":130,"561":130,"562":130,"564":130,"565":367,"566":130,"567":368},"219":17,"221":17,"224":{"568":884},"229":17,"251":{"569":390,"570":391,"571":392,"572":391,"573":393,"574":394,"575":395,"576":396,"577":397,"remove_upgrade_cooldown":393,"authorize_force_set_current_code_hash":887,"apply_authorized_force_set_current_code":390},"254":81,"258":17,"271":82,"277":17,"282":83,"284":{"591":890},"293":17,"296":86,"298":87,"303":88,"308":89,"309":{"616":476,"617":477,"618":478,"credit_account":899},"328":{"625":925,"626":926,"627":926,"628":927,"629":928,"630":505,"631":929,"632":929,"633":930,"634":930,"635":508,"636":930,"637":931,"638":932,"add_authorized_alias":933,"remove_authorized_alias":934,"remove_all_authorized_aliases":128},"332":93,"334":{"500":955,"641":955,"642":956},"337":{"643":546,"report_double_voting":545,"report_double_voting_unsigned":545,"report_fork_voting":963,"report_fork_voting_unsigned":963,"report_future_block_voting":964,"report_future_block_voting_unsigned":964},"341":17,"344":17,"1095":{"1099":834,"1100":700,"1101":701,"1102":702,"1103":700,"1104":702,"1105":703,"1106":128,"1107":702,"1147":835},"1098":{"592":437,"593":437,"place_order_with_credits":437},"1121":{"1128":844,"1129":795,"1130":772,"1131":845,"1132":128},"1137":{"add_registrar":702,"set_identity":809,"set_subs":810,"clear_identity":128,"request_judgement":811,"cancel_request":812,"set_fee":813,"set_account_id":69,"set_fields":814,"provide_judgement":815,"kill_identity":231,"add_sub":816,"rename_sub":816,"remove_sub":817,"quit_sub":128,"add_username_authority":818,"remove_username_authority":819,"set_username_for":820,"accept_username":821,"remove_expired_approval":821,"set_primary_username":821,"unbind_username":821,"remove_username":821,"kill_username":821},"1138":17,"1139":{"1122":770,"1123":445,"1124":445,"1125":445,"1126":891,"1127":416},"1140":{"assign_perm_parachain_slot":445,"assign_temp_parachain_slot":895,"unassign_parachain_slot":445,"set_max_permanent_slots":896,"set_max_temporary_slots":896},"1141":{"1037":904,"set_mode":905,"force_on_migration_end":128},"1142":{"force_set_cursor":910,"force_set_active_cursor":911,"force_onboard_mbms":128,"clear_historic":912},"1143":{"fill_block":960,"trigger_defensive":128},"1144":{"dispatch":961},"1145":17,"1146":{"1147":965,"reap_identity":965}},"876":{"18":{"645":24,"646":783,"647":26,"648":27,"649":27,"650":28,"651":29,"RejectedInvalidAuthorizedUpgrade":784},"23":{"652":44,"653":44,"654":843,"655":46,"656":47,"657":47,"658":47,"659":47,"660":47,"AgendaIncomplete":479},"27":97,"45":17,"48":17,"50":{"664":71,"665":72,"666":71,"1148":785},"57":99,"60":100,"62":17,"106":{"66":150,"93":156,"676":147,"689":145,"690":146,"691":148,"692":149,"693":26,"694":150,"695":150,"696":151,"697":26,"698":152,"699":788,"700":154,"701":155,"702":155,"703":157,"CurrencyMigrated":789},"109":102,"112":{"RootStored":72,"RootsPruned":790},"118":{"705":149,"NewQueued":26,"ValidatorDisabled":791,"ValidatorReenabled":791},"125":104,"127":17,"134":{"674":183,"709":179,"710":180,"711":181,"712":182,"713":184,"714":185,"715":875,"716":72,"717":187,"718":187,"719":72},"137":{"720":196,"721":197,"1108":868,"VoteRemoved":868,"VoteUnlocked":869},"143":107,"144":17,"146":{"738":213,"739":213,"740":872},"147":108,"150":{"743":236,"744":27,"VestingCreated":837},"153":{"745":797,"746":26,"747":26,"748":26,"749":798,"750":799,"IfElseMainSuccess":26,"IfElseFallbackCalled":800},"156":{"751":799,"752":853,"753":254,"754":855,"755":855,"1148":856,"PureKilled":854},"158":{"756":261,"757":262,"758":860,"759":264,"1148":861},"178":113,"182":114,"204":{"66":338,"694":340,"695":341,"778":337,"779":339,"780":342,"781":343,"782":863,"783":345,"784":346,"785":347,"786":348,"787":349,"788":350,"789":351,"790":352,"791":353,"792":353,"MemberClaimPermissionUpdated":864,"MetadataUpdated":865,"PoolNominationMade":865,"PoolNominatorChilled":865,"GlobalParamsUpdated":866},"209":{"676":150,"793":867,"794":359,"795":155,"796":26},"210":17,"214":17,"219":17,"221":{"797":881,"798":881,"799":882,"800":373},"224":17,"229":17,"251":{"801":398,"802":398,"803":398,"804":398,"805":399,"806":400,"807":400,"808":400,"UpgradeCooldownRemoved":448,"CodeAuthorized":888},"254":17,"258":17,"271":118,"277":17,"282":119,"284":17,"293":17,"296":121,"298":122,"303":123,"308":{"778":448,"831":472,"832":472,"833":448,"834":448,"835":448,"836":892,"837":448,"838":474,"839":448},"309":124,"328":{"845":935,"846":936,"847":939,"848":940,"849":515,"850":516,"851":515,"852":515,"853":941,"854":939,"855":518,"856":942,"857":943,"858":944,"859":945,"860":946,"861":939,"862":947,"863":948,"864":948,"865":948,"866":949,"867":942,"868":527,"SendFailed":937,"ProcessXcmError":938,"AliasAuthorized":950,"AliasAuthorizationRemoved":951,"AliasesAuthorizationsRemoved":952},"332":127,"334":{"873":957,"874":958,"875":959},"337":17,"341":17,"344":17,"1095":{"1109":27,"1110":704,"1111":705,"1112":704,"1113":704,"1114":706,"1148":836},"1098":{"819":438,"820":439,"AccountCredited":90},"1121":{"1133":846,"1134":775,"1135":26,"1136":846},"1137":{"IdentitySet":92,"IdentityCleared":822,"IdentityKilled":822,"JudgementRequested":823,"JudgementUnrequested":823,"JudgementGiven":824,"RegistrarAdded":825,"SubIdentityAdded":826,"SubIdentitiesSet":827,"SubIdentityRenamed":828,"SubIdentityRemoved":826,"SubIdentityRevoked":826,"AuthorityAdded":829,"AuthorityRemoved":829,"UsernameSet":830,"UsernameQueued":831,"PreapprovalExpired":832,"PrimaryUsernameSet":830,"DanglingUsernameRemoved":830,"UsernameUnbound":833,"UsernameRemoved":833,"UsernameKilled":833},"1138":{"676":878,"720":878,"Released":878,"MigratedDelegation":878},"1139":17,"1140":{"PermanentSlotAssigned":398,"TemporarySlotAssigned":398,"MaxPermanentSlotsChanged":897,"MaxTemporarySlotsChanged":897},"1141":{"ValidatorSetReceived":906,"CouldNotMergeAndDropped":26,"SetTooSmallAndDropped":26,"Unexpected":907},"1142":{"UpgradeStarted":913,"UpgradeCompleted":26,"UpgradeFailed":26,"MigrationSkipped":72,"MigrationAdvanced":914,"MigrationCompleted":914,"MigrationFailed":914,"HistoricCleared":915},"1143":{"DefensiveTestCall":26},"1144":{"654":962},"1145":17,"1146":{"IdentityReaped":92,"DepositUpdated":966}},"974":{"18":{"877":13,"878":14,"879":1,"880":15,"881":782,"882":1},"23":130,"27":17,"45":131,"48":132,"50":133,"57":134,"60":135,"62":17,"106":{"895":1,"896":1,"897":1,"898":1,"899":1,"900":1,"MaxValidatorSet":1},"109":17,"112":17,"118":{"KeyDeposit":55},"125":137,"127":17,"134":{"902":1,"903":1,"904":175,"905":1,"906":1,"pot_account":97},"137":139,"143":140,"144":17,"146":17,"147":17,"150":142,"153":143,"156":144,"158":145,"178":{"938":1,"939":1,"940":55,"941":1,"942":34,"943":1,"944":55,"945":55,"946":55,"947":1,"948":1,"949":34,"950":1,"951":1,"MaxBackersPerWinner":1},"182":{"952":303,"MaxAutoRebagPerBlock":1},"204":150,"209":133,"210":17,"214":17,"219":17,"221":17,"224":17,"229":17,"251":151,"254":17,"258":17,"271":17,"277":17,"282":17,"284":17,"293":17,"296":153,"298":154,"303":155,"308":156,"309":{"967":1,"968":898},"328":{"UniversalLocation":898,"AdvertisedXcmVersion":1,"MaxLockers":1,"MaxRemoteLockConsumers":1},"332":159,"334":17,"337":137,"341":17,"344":17,"1095":160,"1098":152,"1121":17,"1137":{"BasicDeposit":55,"ByteDeposit":55,"UsernameDeposit":55,"SubAccountDeposit":55,"MaxSubAccounts":1,"MaxRegistrars":1,"PendingUsernameExpiration":1,"UsernameGracePeriod":1,"MaxSuffixLength":1,"MaxUsernameLength":1},"1138":{"95":1,"904":175},"1139":17,"1140":{"PermanentSlotLeasePeriodLength":1,"TemporarySlotLeasePeriodLength":1,"MaxTemporarySlotPerLeasePeriod":1},"1141":17,"1142":{"CursorMaxLen":1,"IdentifierMaxLen":1},"1143":17,"1144":17,"1145":17,"1146":17},"1087":{"198":161,"980":{"977":967,"978":551,"979":552},"988":{"984":969,"985":557,"986":558,"987":559},"996":{"989":560,"990":561,"991":562,"992":563,"993":564,"994":565,"995":566,"member_total_balance":560,"pool_balance":563,"pool_accounts":990},"999":165,"1001":{"1000":970},"1003":167,"1035":{"1004":572,"1005":573,"1006":971,"1007":575,"1008":576,"1009":577,"1010":578,"1011":579,"1012":972,"1013":973,"1014":582,"1015":583,"1016":584,"1017":974,"1018":586,"1019":587,"1020":572,"1021":588,"1022":589,"1023":590,"1024":591,"1025":592,"1026":593,"1027":578,"1028":975,"1029":595,"1030":555,"1031":596,"1032":578,"1033":597,"1034":976,"validation_code_bomb_limit":578,"backing_constraints":977,"scheduling_lookahead":578,"para_ids":555},"1040":{"1036":599,"1037":600,"1039":602,"submit_report_double_voting_unsigned_extrinsic":601,"submit_report_fork_voting_unsigned_extrinsic":978,"submit_report_future_block_voting_unsigned_extrinsic":979,"generate_ancestry_proof":980},"1046":170,"1049":171,"1052":172,"1057":173,"1059":174,"1062":175,"1064":176,"1069":177,"1072":{"1067":622,"1068":623,"1070":981,"1071":982},"1077":{"1073":983,"1074":984,"1075":985,"1076":986},"1080":{"1078":987,"1079":988},"1082":{"1081":989},"1086":180,"RuntimeViewFunction":{"execute_view_function":968},"TrustedQueryApi":{"is_trusted_reserve":991,"is_trusted_teleporter":991}}}},[{"19":1,"20":31,"21":32,"22":33},{"24":48,"25":49,"26":50},{"28":55,"29":56,"30":55,"31":55,"32":6,"33":57,"34":6,"35":56,"36":1,"37":58,"38":59,"39":60,"40":61,"41":1,"42":62,"43":62,"44":63},{"46":55,"47":2},{"49":67},{"0":73,"51":55,"52":55,"53":74,"54":75,"55":76,"56":77},{"58":55,"59":95},{"61":97},{"63":1,"64":1,"65":98,"66":99,"67":55,"68":55,"69":55,"70":1,"71":100,"72":101,"73":102,"74":1,"75":1,"76":103,"77":1,"78":104,"79":1,"80":1,"81":1,"82":105,"83":106,"84":107,"85":108,"86":107,"87":109,"88":110,"89":111,"90":112,"91":113,"92":112,"93":114,"94":1,"95":1,"96":55,"97":115,"98":116,"99":117,"100":118,"101":119,"102":120,"103":1,"104":121,"105":1},{"107":158,"108":159},{"110":161,"111":61},{"73":98,"104":121,"113":1,"114":2,"115":162,"116":163,"117":164},{"29":56,"119":166,"120":167,"121":1,"122":61,"123":55,"124":168},{"116":172,"126":172},{"128":1,"129":173,"130":55,"131":121,"132":1,"133":174},{"135":188,"136":189},{"138":1,"139":198,"140":199,"141":106,"142":4},{},{"145":209},{"147":215},{"148":218,"149":55,"150":219,"151":220,"152":221},{"59":230,"150":229},{"154":244,"155":245},{"157":256},{"159":1,"160":265,"161":5,"162":121},{"163":1,"164":106,"165":277,"166":5,"167":112},{"168":1,"169":285,"170":286,"171":287,"172":1,"173":288,"174":1,"175":289,"176":290,"177":291},{"179":301,"180":1,"181":302},{"183":55,"184":55,"185":55,"186":1,"187":1,"188":1,"189":1,"190":310,"191":1,"192":311,"193":1,"194":312,"195":1,"196":313,"197":1,"198":5,"199":1,"200":1,"201":314,"202":1,"203":315},{"205":355,"206":356,"207":1,"208":1},{"211":360,"212":361,"213":2},{"215":1,"216":121,"217":172,"218":369},{"220":370},{"222":374,"223":375},{"225":377,"226":378,"227":1,"228":379},{"230":380,"231":172,"232":121,"233":381,"234":5,"235":106,"236":4,"237":382,"238":383,"239":116,"240":106,"241":116,"242":4,"243":384,"244":385,"245":116,"246":116,"247":386,"248":387,"249":388,"250":389},{"252":374,"253":401},{"255":403,"256":4,"257":112},{"259":404,"260":405,"261":106,"262":106,"263":406,"264":405,"265":106,"266":407,"267":386,"268":386,"269":408,"270":409},{"272":172,"273":1,"274":422,"275":423,"276":424},{"222":427,"278":1,"279":425,"280":426,"281":428},{"97":431,"283":106},{"285":433,"286":434,"287":435,"288":436,"289":303},{"291":440,"292":441},{"251":442,"294":106,"295":1},{"297":451},{"299":1,"300":61,"301":455,"302":456},{"304":466,"305":121,"306":1,"307":1},{"310":481,"311":482,"312":483},{"314":55,"315":492,"316":388,"317":1,"318":493,"319":494,"320":495,"321":496,"322":497,"323":498,"324":499,"325":2,"326":2,"327":500},{"329":528,"330":529,"331":530},{"333":538},{"29":544,"35":544,"124":168,"335":55,"336":428},{"338":6,"339":55,"340":547},{"342":548,"343":548},{"156":99,"1093":697,"1094":698},{"1120":97},{"346":17,"347":18,"348":19,"349":19,"350":20,"351":21,"352":22,"353":17,"354":23,"355":23,"356":19},{"367":51,"368":52,"369":52,"370":52,"371":53},{"372":64,"373":64,"374":65},{"375":66},{"376":68,"377":69,"378":68,"379":70,"380":68},{"379":79,"381":78,"382":78,"383":80,"384":81,"385":82,"386":83,"387":84,"388":85},{"389":122,"390":123,"391":124,"392":125,"393":126,"394":127,"395":128,"396":129,"397":128,"398":130,"399":131,"400":132,"401":128,"402":128,"403":133,"404":134,"405":128,"406":135,"407":136,"408":124,"409":134,"410":137,"411":138,"412":139,"413":140,"414":130,"415":141,"416":142,"417":143,"418":144},{"419":165,"420":128},{"372":169,"373":169,"421":170},{"422":176,"423":177,"424":178,"425":68,"426":68,"427":68},{"428":190,"429":191,"430":192,"431":193,"432":194,"433":195},{"358":68,"434":201,"435":68,"436":68,"437":68,"438":68,"439":202,"440":68,"441":203},{"446":216},{"376":223,"447":224,"448":225,"449":226,"450":227},{"451":128,"452":231,"453":232,"454":233,"455":234,"456":235},{"477":267,"478":268,"479":269,"480":268,"481":268,"482":270,"483":268,"484":268,"485":271},{"479":279,"480":280,"481":280,"486":278,"487":281,"488":280,"489":280},{"434":295,"490":292,"491":293,"492":294,"493":296},{"494":304,"495":305,"496":306},{"390":317,"391":318,"392":320,"394":323,"395":328,"441":325,"497":316,"498":128,"499":319,"500":321,"501":322,"502":324,"503":326,"504":327,"505":329,"506":330,"507":331,"508":332,"509":333,"510":334,"511":328,"512":328,"513":335,"514":336,"515":336,"516":328},{"517":128,"518":128,"519":357},{"520":130,"521":130,"522":130,"523":130,"524":130,"525":130,"526":130,"527":130,"528":130,"529":130,"530":130,"531":362,"532":362,"533":130,"534":130,"535":130,"536":130,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":363,"547":363,"548":130,"549":130,"550":130,"551":130,"552":130,"553":130,"554":130,"555":130,"556":364,"557":365,"558":366,"559":363,"560":130,"561":130,"562":130,"563":130,"564":130,"565":367,"566":130,"567":368},{"568":376},{"569":390,"570":391,"571":392,"572":391,"573":393,"574":394,"575":395,"576":396,"577":397},{"578":402},{"579":410,"580":411,"581":412,"582":413,"583":414,"584":414,"585":415,"586":416,"587":417,"588":417,"589":418},{"590":128},{"591":432},{"592":437,"593":437},{"518":445,"594":443,"595":444,"596":446,"597":393,"598":128,"599":393,"600":390,"601":391},{"602":452,"603":393,"604":393},{"605":457,"606":458,"607":128},{"500":467,"608":468,"609":469,"610":68,"611":68,"612":467,"613":470,"614":68,"615":471},{"616":476,"617":477,"618":478},{"619":484,"620":485,"621":486,"622":487,"623":488,"624":489},{"625":501,"626":502,"627":502,"628":503,"629":504,"630":505,"631":506,"632":506,"633":507,"634":507,"635":508,"636":507,"637":509,"638":510},{"639":532,"640":533},{"500":539,"641":539,"642":540},{"372":545,"373":545,"643":546},{"358":68,"434":640,"435":68,"436":68,"437":68,"438":68,"439":202,"440":68,"441":203},{"661":54,"662":54,"663":54},{"664":71,"665":72,"666":71},{"281":90,"667":86,"668":87,"669":88,"670":89,"671":90,"672":90,"673":91,"674":90,"675":90,"676":90,"677":90,"678":90,"679":90,"680":90,"681":92,"682":93,"683":93,"684":90,"685":90,"686":90,"687":94},{"688":96},{"66":150,"93":156,"676":147,"689":145,"690":146,"691":148,"692":149,"693":26,"694":150,"695":150,"696":151,"697":26,"698":152,"699":153,"700":154,"701":155,"702":155,"703":157},{"704":160},{"705":149},{"706":171,"707":26,"708":26},{"674":183,"709":179,"710":180,"711":181,"712":182,"713":184,"714":185,"715":186,"716":72,"717":187,"718":187,"719":72},{"720":196,"721":197},{"722":204,"723":205,"724":205,"725":90,"726":206,"727":72,"728":72,"729":207,"730":72,"731":207,"732":207,"733":207,"734":207,"735":205,"736":208,"737":208},{"741":217},{"742":228},{"743":236,"744":27},{"760":72,"761":272,"762":72,"763":273,"764":274,"765":72,"766":72,"767":72,"768":275,"769":276,"770":275},{"653":282,"710":283,"742":284,"771":282},{"676":299,"690":299,"772":297,"773":298,"774":26,"775":300},{"776":307,"777":308},{"66":338,"694":340,"695":341,"778":337,"779":339,"780":342,"781":343,"782":344,"783":345,"784":346,"785":347,"786":348,"787":349,"788":350,"789":351,"790":352,"791":353,"792":353},{"797":371,"798":371,"799":372,"800":373},{"801":398,"802":398,"803":398,"804":398,"805":399,"806":400,"807":400,"808":400},{"809":419,"810":420,"811":421,"812":420,"813":419,"814":419,"815":421},{"816":429,"817":430,"818":398},{"819":438,"820":439},{"671":449,"821":447,"822":448,"823":450},{"824":453,"825":454},{"671":461,"672":462,"826":459,"827":460,"828":463,"829":464,"830":465},{"840":479,"841":480},{"676":90,"842":490,"843":26,"844":491},{"845":511,"846":512,"847":513,"848":514,"849":515,"850":516,"851":515,"852":515,"853":517,"854":513,"855":518,"856":519,"857":520,"858":521,"859":522,"860":523,"861":513,"862":524,"863":525,"864":525,"865":525,"866":526,"867":519,"868":527},{"869":534,"870":535,"871":536,"872":537},{"873":541,"874":542,"875":543},{"877":13,"878":14,"879":1,"880":15,"881":16,"882":1},{"883":34,"884":1},{"885":55,"886":55,"887":1,"888":1},{"889":55},{"674":55},{"890":55,"891":1,"892":1,"893":1},{"894":1},{"895":1,"896":1,"897":1,"898":1,"899":1,"900":1},{"887":1,"888":1,"901":55},{"902":1,"903":1,"904":175,"905":1,"906":1},{"907":1,"908":1},{"909":55,"910":1,"911":1,"912":1,"913":200},{"914":222},{"915":55,"916":1},{"917":1},{"918":55,"919":55,"920":1,"921":1,"922":55,"923":55},{"924":55,"925":55,"926":1},{"927":55,"928":1,"929":1,"930":1,"931":266,"932":266,"933":55,"934":55,"935":1},{"936":1,"937":55},{"938":1,"939":1,"940":55,"941":1,"942":34,"943":1,"944":55,"945":55,"946":55,"947":1,"948":1,"949":34,"950":1,"951":1},{"952":303},{"904":175,"953":1,"954":1},{"955":55},{"904":175,"956":55,"957":1},{"934":55,"958":55},{"959":1,"960":1},{"961":1,"962":1,"963":1,"964":1},{"904":175,"965":55,"966":1},{"967":1,"968":475},{"969":1},{"970":1,"971":1,"972":531,"973":531},{"1115":55,"1116":55,"1117":1,"1118":55},{"981":553,"982":554,"983":555},{"975":549},{"977":550,"978":551,"979":552},{"989":560,"990":561,"991":562,"992":563,"993":564,"994":565,"995":566},{"989":569,"997":567,"998":568},{"1000":570},{"1002":571},{"1004":572,"1005":573,"1006":574,"1007":575,"1008":576,"1009":577,"1010":578,"1011":579,"1012":580,"1013":581,"1014":582,"1015":583,"1016":584,"1017":585,"1018":586,"1019":587,"1020":572,"1021":588,"1022":589,"1023":590,"1024":591,"1025":592,"1026":593,"1027":578,"1028":594,"1029":595,"1030":555,"1031":596,"1032":578,"1033":597,"1034":598},{"1036":599,"1037":600,"1038":601,"1039":602},{"1041":603,"1042":604,"1043":605,"1044":606,"1045":607},{"1047":608,"1048":608},{"1038":610,"1039":611,"1050":609,"1051":612},{"1038":616,"1039":615,"1053":613,"1054":612,"1055":614,"1056":614},{"1058":572},{"1060":617,"1061":618},{"1063":619},{"1065":620,"1066":621,"1067":622,"1068":623},{"1073":626,"1074":627,"1075":628,"1076":629},{"1081":632},{"1083":633,"1084":634,"1085":635}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","System","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","DisabledValidators","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","CurrentIndex","QueuedChanged","QueuedKeys","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","Treasury","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","Parameters","Claims","Total","Vesting","Signing","Preclaims","Utility","Proxies","Announcements","Proxy","Multisigs","Multisig","BountyCount","Bounties","BountyDescriptions","BountyApprovals","ChildBountyCount","ParentChildBounties","ChildBounties","ChildBountyDescriptions","ChildrenCuratorFees","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","AvailabilityCores","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","OnDemand","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","Coretime","MigrationProcess","AutoLimits","SignedMigrationMaxLimits","StateTrieMigration","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","set_keys","purge_keys","note_stalled","spend_local","remove_approval","spend","payout","check_status","void_spend","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","submit","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","set_metadata","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","set_parameter","mint_claim","claim_attest","attest","move_claim","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","propose_bounty","approve_bounty","propose_curator","unassign_curator","accept_curator","award_bounty","claim_bounty","close_bounty","extend_bounty_expiry","add_child_bounty","award_child_bounty","claim_child_bounty","close_child_bounty","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_max_availability_timeouts","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_on_demand_ttl","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","assign_core","control_auto_migration","continue_migrate","migrate_custom_top","migrate_custom_child","set_signed_max_limits","force_set_progress","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","reap_page","execute_overweight","update","remove","set_new_genesis","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","Noted","Requested","Cleared","IndexAssigned","IndexFreed","IndexFrozen","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","Offence","NewSession","NewAuthorities","Paused","Resumed","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","Delegated","Undelegated","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Updated","Claimed","VestingUpdated","VestingCompleted","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","BountyProposed","BountyRejected","BountyBecameActive","BountyAwarded","BountyClaimed","BountyCanceled","BountyExtended","BountyApproved","CuratorProposed","CuratorUnassigned","CuratorAccepted","Added","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","Unstaked","BatchChecked","BatchFinished","InternalError","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","Migrated","AutoMigrationFinished","Halted","Attempted","Sent","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","MaximumWeight","MaxScheduledPerBlock","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","SpendPeriod","Burn","PalletId","MaxApprovals","PayoutPeriod","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","Prefix","MinVestedTransfer","MaxVestingSchedules","batched_calls_limit","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BountyDepositBase","BountyDepositPayoutDelay","BountyUpdatePeriod","CuratorDepositMultiplier","CuratorDepositMax","CuratorDepositMin","BountyValueMinimum","DataDepositPerByte","MaximumReasonLength","MaxActiveChildBountyCount","ChildBountyValueMinimum","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","MaxPointsToBalance","MaxUnbonding","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","MaxKeyLen","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","experimental_inflation_prediction_info","Inflation","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","ParachainHost","beefy_genesis","validator_set","submit_report_equivocation_unsigned_extrinsic","generate_key_ownership_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","build_state","get_preset","preset_names","GenesisBuilder","apis","MemberCount","Members","FellowshipCollective","FellowshipReferenda","Society","Recoverable","ActiveRecoveries","Recovery","Nis","NisCounterpartBalances","OnDemandAssignmentProvider","as_recovered","set_recovered","create_recovery","initiate_recovery","vouch_recovery","claim_recovery","close_recovery","remove_recovery","cancel_recovered","Voted","RecoveryCreated","RecoveryInitiated","RecoveryVouched","RecoveryClosed","AccountRecovered","RecoveryRemoved","ConfigDepositBase","FriendDepositFactor","MaxFriends","RecoveryDeposit","ParaSudoWrapper","Key","Sudo","sudo_schedule_para_initialize","sudo_schedule_para_cleanup","sudo_schedule_parathread_upgrade","sudo_schedule_parachain_downgrade","sudo_queue_downward_xcm","sudo_establish_hrmp_channel","sudo","sudo_unchecked_weight","set_key","sudo_as","remove_key","Sudid","KeyChanged","KeyRemoved","SudoAsDone","Identity","DelegatedStaking","ParasSudoWrapper","AssignedSlots","StakingAhClient","MultiBlockMigrations","RootTesting","MetaTx","VerifySignature","IdentityMigrator","poke_deposit","DepositPoked"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Dot = getChainDescriptors("dot");
    Ksm = getChainDescriptors("ksm");
    Paseo = getChainDescriptors("paseo");
    Wnd = getChainDescriptors("wnd");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/dot_metadata.ts
var dot_metadata_exports = {};
__export(dot_metadata_exports, {
  default: () => dot_metadata_default
});
var binMeta, dot_metadata_default;
var init_dot_metadata = __esm({
  ".papi/descriptors/src/dot_metadata.ts"() {
    binMeta = "bWV0YQ8hDwAMHHNwX2NvcmUYY3J5cHRvLEFjY291bnRJZDMyAAAEAAQBIFt1ODsgMzJdAAAEAAADIAAAAAgACAAABQMADAgwZnJhbWVfc3lzdGVtLEFjY291bnRJbmZvCBROb25jZQEQLEFjY291bnREYXRhARQAFAEUbm9uY2UQARROb25jZQABJGNvbnN1bWVycxABIFJlZkNvdW50AAEkcHJvdmlkZXJzEAEgUmVmQ291bnQAASxzdWZmaWNpZW50cxABIFJlZkNvdW50AAEQZGF0YRQBLEFjY291bnREYXRhAAAQAAAFBQAUDDxwYWxsZXRfYmFsYW5jZXMUdHlwZXMsQWNjb3VudERhdGEEHEJhbGFuY2UBGAAQARBmcmVlGAEcQmFsYW5jZQABIHJlc2VydmVkGAEcQmFsYW5jZQABGGZyb3plbhgBHEJhbGFuY2UAARRmbGFncxwBKEV4dHJhRmxhZ3MAABgAAAUHABwMPHBhbGxldF9iYWxhbmNlcxR0eXBlcyhFeHRyYUZsYWdzAAAEABgBEHUxMjgAACAAAAUAACQMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2hAUGVyRGlzcGF0Y2hDbGFzcwQEVAEoAAwBGG5vcm1hbCgBBFQAASxvcGVyYXRpb25hbCgBBFQAASRtYW5kYXRvcnkoAQRUAAAoDChzcF93ZWlnaHRzJHdlaWdodF92MhhXZWlnaHQAAAgBIHJlZl90aW1lLAEMdTY0AAEocHJvb2Zfc2l6ZSwBDHU2NAAALAAABjAAMAAABQYANAg8cHJpbWl0aXZlX3R5cGVzEEgyNTYAAAQABAEgW3U4OyAzMl0AADgAAAIIADwQKHNwX3J1bnRpbWUcZ2VuZXJpYxhkaWdlc3QYRGlnZXN0AAAEARBsb2dzQAE8VmVjPERpZ2VzdEl0ZW0+AABAAAACRABEEChzcF9ydW50aW1lHGdlbmVyaWMYZGlnZXN0KERpZ2VzdEl0ZW0AARQoUHJlUnVudGltZQgASAFEQ29uc2Vuc3VzRW5naW5lSWQAADgBHFZlYzx1OD4ABgAkQ29uc2Vuc3VzCABIAURDb25zZW5zdXNFbmdpbmVJZAAAOAEcVmVjPHU4PgAEABBTZWFsCABIAURDb25zZW5zdXNFbmdpbmVJZAAAOAEcVmVjPHU4PgAFABRPdGhlcgQAOAEcVmVjPHU4PgAAAGRSdW50aW1lRW52aXJvbm1lbnRVcGRhdGVkAAgAAEgAAAMEAAAACABMAAACUABQCDBmcmFtZV9zeXN0ZW0sRXZlbnRSZWNvcmQIBEUBVARUATQADAEUcGhhc2XFBwEUUGhhc2UAARRldmVudFQBBEUAARh0b3BpY3OVAQEYVmVjPFQ+AABUCEBwb2xrYWRvdF9ydW50aW1lMFJ1bnRpbWVFdmVudAABoBhTeXN0ZW0EAFgBcGZyYW1lX3N5c3RlbTo6RXZlbnQ8UnVudGltZT4AAAAkU2NoZWR1bGVyBAB8AYBwYWxsZXRfc2NoZWR1bGVyOjpFdmVudDxSdW50aW1lPgABACBQcmVpbWFnZQQAkAF8cGFsbGV0X3ByZWltYWdlOjpFdmVudDxSdW50aW1lPgAKABxJbmRpY2VzBACUAXhwYWxsZXRfaW5kaWNlczo6RXZlbnQ8UnVudGltZT4ABAAgQmFsYW5jZXMEAJgBfHBhbGxldF9iYWxhbmNlczo6RXZlbnQ8UnVudGltZT4ABQBIVHJhbnNhY3Rpb25QYXltZW50BACgAahwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudDo6RXZlbnQ8UnVudGltZT4AIAAcU3Rha2luZwQApAF4cGFsbGV0X3N0YWtpbmc6OkV2ZW50PFJ1bnRpbWU+AAcAIE9mZmVuY2VzBAC8AVhwYWxsZXRfb2ZmZW5jZXM6OkV2ZW50AAgAHFNlc3Npb24EAMQBVHBhbGxldF9zZXNzaW9uOjpFdmVudAAJABxHcmFuZHBhBADIAVRwYWxsZXRfZ3JhbmRwYTo6RXZlbnQACwAgVHJlYXN1cnkEANgBfHBhbGxldF90cmVhc3VyeTo6RXZlbnQ8UnVudGltZT4AEwBAQ29udmljdGlvblZvdGluZwQAZQEBoHBhbGxldF9jb252aWN0aW9uX3ZvdGluZzo6RXZlbnQ8UnVudGltZT4AFAAkUmVmZXJlbmRhBABpAQGAcGFsbGV0X3JlZmVyZW5kYTo6RXZlbnQ8UnVudGltZT4AFQAkV2hpdGVsaXN0BAAFBwGAcGFsbGV0X3doaXRlbGlzdDo6RXZlbnQ8UnVudGltZT4AFwAoUGFyYW1ldGVycwQAGQcBhHBhbGxldF9wYXJhbWV0ZXJzOjpFdmVudDxSdW50aW1lPgAbABhDbGFpbXMEADEHAVhjbGFpbXM6OkV2ZW50PFJ1bnRpbWU+ABgAHFZlc3RpbmcEADUHAXhwYWxsZXRfdmVzdGluZzo6RXZlbnQ8UnVudGltZT4AGQAcVXRpbGl0eQQAOQcBVHBhbGxldF91dGlsaXR5OjpFdmVudAAaABRQcm94eQQAPQcBcHBhbGxldF9wcm94eTo6RXZlbnQ8UnVudGltZT4AHQAgTXVsdGlzaWcEAEEHAXxwYWxsZXRfbXVsdGlzaWc6OkV2ZW50PFJ1bnRpbWU+AB4AIEJvdW50aWVzBABFBwF8cGFsbGV0X2JvdW50aWVzOjpFdmVudDxSdW50aW1lPgAiADRDaGlsZEJvdW50aWVzBABJBwGUcGFsbGV0X2NoaWxkX2JvdW50aWVzOjpFdmVudDxSdW50aW1lPgAmAGhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZQQATQcB0HBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZTo6RXZlbnQ8UnVudGltZT4AJAAkVm90ZXJMaXN0BABdBwH0cGFsbGV0X2JhZ3NfbGlzdDo6RXZlbnQ8UnVudGltZSwgcGFsbGV0X2JhZ3NfbGlzdDo6SW5zdGFuY2UxPgAlADxOb21pbmF0aW9uUG9vbHMEAGEHAZxwYWxsZXRfbm9taW5hdGlvbl9wb29sczo6RXZlbnQ8UnVudGltZT4AJwAsRmFzdFVuc3Rha2UEAGUHAYxwYWxsZXRfZmFzdF91bnN0YWtlOjpFdmVudDxSdW50aW1lPgAoADRQYXJhSW5jbHVzaW9uBABpBwGQcGFyYWNoYWluc19pbmNsdXNpb246OkV2ZW50PFJ1bnRpbWU+ADUAFFBhcmFzBAB5BwFccGFyYWNoYWluc19wYXJhczo6RXZlbnQAOAAQSHJtcAQAfQcBfHBhcmFjaGFpbnNfaHJtcDo6RXZlbnQ8UnVudGltZT4APAA0UGFyYXNEaXNwdXRlcwQAgQcBjHBhcmFjaGFpbnNfZGlzcHV0ZXM6OkV2ZW50PFJ1bnRpbWU+AD4AIE9uRGVtYW5kBACNBwG0cGFyYWNoYWluc19hc3NpZ25lcl9vbl9kZW1hbmQ6OkV2ZW50PFJ1bnRpbWU+AEAAJFJlZ2lzdHJhcgQAkQcBfHBhcmFzX3JlZ2lzdHJhcjo6RXZlbnQ8UnVudGltZT4ARgAUU2xvdHMEAJUHAVRzbG90czo6RXZlbnQ8UnVudGltZT4ARwAgQXVjdGlvbnMEAJkHAWBhdWN0aW9uczo6RXZlbnQ8UnVudGltZT4ASAAkQ3Jvd2Rsb2FuBACdBwFkY3Jvd2Rsb2FuOjpFdmVudDxSdW50aW1lPgBJACBDb3JldGltZQQAoQcBYGNvcmV0aW1lOjpFdmVudDxSdW50aW1lPgBKAEhTdGF0ZVRyaWVNaWdyYXRpb24EAKUHAaxwYWxsZXRfc3RhdGVfdHJpZV9taWdyYXRpb246OkV2ZW50PFJ1bnRpbWU+AGIAJFhjbVBhbGxldAQAsQcBaHBhbGxldF94Y206OkV2ZW50PFJ1bnRpbWU+AGMAME1lc3NhZ2VRdWV1ZQQAuQcBkHBhbGxldF9tZXNzYWdlX3F1ZXVlOjpFdmVudDxSdW50aW1lPgBkACRBc3NldFJhdGUEAMEHAYRwYWxsZXRfYXNzZXRfcmF0ZTo6RXZlbnQ8UnVudGltZT4AZQAAWAwwZnJhbWVfc3lzdGVtGHBhbGxldBRFdmVudAQEVAABHEBFeHRyaW5zaWNTdWNjZXNzBAE0ZGlzcGF0Y2hfaW5mb1wBMERpc3BhdGNoSW5mbwAABJBBbiBleHRyaW5zaWMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS48RXh0cmluc2ljRmFpbGVkCAE4ZGlzcGF0Y2hfZXJyb3JoATREaXNwYXRjaEVycm9yAAE0ZGlzcGF0Y2hfaW5mb1wBMERpc3BhdGNoSW5mbwABBFBBbiBleHRyaW5zaWMgZmFpbGVkLixDb2RlVXBkYXRlZAACBFBgOmNvZGVgIHdhcyB1cGRhdGVkLihOZXdBY2NvdW50BAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAADBGhBIG5ldyBhY2NvdW50IHdhcyBjcmVhdGVkLjRLaWxsZWRBY2NvdW50BAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAAEBFhBbiBhY2NvdW50IHdhcyByZWFwZWQuIFJlbWFya2VkCAEYc2VuZGVyAAEwVDo6QWNjb3VudElkAAEQaGFzaDQBHFQ6Okhhc2gABQRwT24gb24tY2hhaW4gcmVtYXJrIGhhcHBlbmVkLkRVcGdyYWRlQXV0aG9yaXplZAgBJGNvZGVfaGFzaDQBHFQ6Okhhc2gAATRjaGVja192ZXJzaW9uIAEQYm9vbAAGBGhBbiB1cGdyYWRlIHdhcyBhdXRob3JpemVkLgRwRXZlbnQgZm9yIHRoZSBTeXN0ZW0gcGFsbGV0LlwMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2gwRGlzcGF0Y2hJbmZvAAAMARh3ZWlnaHQoARhXZWlnaHQAARRjbGFzc2ABNERpc3BhdGNoQ2xhc3MAASBwYXlzX2ZlZWQBEFBheXMAAGAMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2g0RGlzcGF0Y2hDbGFzcwABDBhOb3JtYWwAAAAsT3BlcmF0aW9uYWwAAQAkTWFuZGF0b3J5AAIAAGQMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2gQUGF5cwABCAxZZXMAAAAITm8AAQAAaAgoc3BfcnVudGltZTREaXNwYXRjaEVycm9yAAE4FE90aGVyAAAAMENhbm5vdExvb2t1cAABACRCYWRPcmlnaW4AAgAYTW9kdWxlBABsASxNb2R1bGVFcnJvcgADAERDb25zdW1lclJlbWFpbmluZwAEACxOb1Byb3ZpZGVycwAFAEBUb29NYW55Q29uc3VtZXJzAAYAFFRva2VuBABwAShUb2tlbkVycm9yAAcAKEFyaXRobWV0aWMEAHQBPEFyaXRobWV0aWNFcnJvcgAIADRUcmFuc2FjdGlvbmFsBAB4AUhUcmFuc2FjdGlvbmFsRXJyb3IACQAkRXhoYXVzdGVkAAoAKENvcnJ1cHRpb24ACwAsVW5hdmFpbGFibGUADAA4Um9vdE5vdEFsbG93ZWQADQAAbAgoc3BfcnVudGltZSxNb2R1bGVFcnJvcgAACAEUaW5kZXgIAQh1OAABFGVycm9ySAGMW3U4OyBNQVhfTU9EVUxFX0VSUk9SX0VOQ09ERURfU0laRV0AAHAIKHNwX3J1bnRpbWUoVG9rZW5FcnJvcgABKEBGdW5kc1VuYXZhaWxhYmxlAAAAME9ubHlQcm92aWRlcgABADBCZWxvd01pbmltdW0AAgAwQ2Fubm90Q3JlYXRlAAMAMFVua25vd25Bc3NldAAEABhGcm96ZW4ABQAsVW5zdXBwb3J0ZWQABgBAQ2Fubm90Q3JlYXRlSG9sZAAHADROb3RFeHBlbmRhYmxlAAgAHEJsb2NrZWQACQAAdAg0c3BfYXJpdGhtZXRpYzxBcml0aG1ldGljRXJyb3IAAQwkVW5kZXJmbG93AAAAIE92ZXJmbG93AAEAOERpdmlzaW9uQnlaZXJvAAIAAHgIKHNwX3J1bnRpbWVIVHJhbnNhY3Rpb25hbEVycm9yAAEIMExpbWl0UmVhY2hlZAAAABxOb0xheWVyAAEAAHwMQHBhbGxldF9zY2hlZHVsZXIYcGFsbGV0FEV2ZW50BARUAAEkJFNjaGVkdWxlZAgBEHdoZW4QAURCbG9ja051bWJlckZvcjxUPgABFGluZGV4EAEMdTMyAAAEUFNjaGVkdWxlZCBzb21lIHRhc2suIENhbmNlbGVkCAEQd2hlbhABREJsb2NrTnVtYmVyRm9yPFQ+AAEUaW5kZXgQAQx1MzIAAQRMQ2FuY2VsZWQgc29tZSB0YXNrLihEaXNwYXRjaGVkDAEQdGFza4ABeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlkhAFAT3B0aW9uPFRhc2tOYW1lPgABGHJlc3VsdIgBOERpc3BhdGNoUmVzdWx0AAIEVERpc3BhdGNoZWQgc29tZSB0YXNrLiBSZXRyeVNldBABEHRhc2uAAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZIQBQE9wdGlvbjxUYXNrTmFtZT4AARhwZXJpb2QQAURCbG9ja051bWJlckZvcjxUPgABHHJldHJpZXMIAQh1OAADBKBTZXQgYSByZXRyeSBjb25maWd1cmF0aW9uIGZvciBzb21lIHRhc2suOFJldHJ5Q2FuY2VsbGVkCAEQdGFza4ABeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlkhAFAT3B0aW9uPFRhc2tOYW1lPgAEBKxDYW5jZWwgYSByZXRyeSBjb25maWd1cmF0aW9uIGZvciBzb21lIHRhc2suPENhbGxVbmF2YWlsYWJsZQgBEHRhc2uAAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZIQBQE9wdGlvbjxUYXNrTmFtZT4ABQQpAVRoZSBjYWxsIGZvciB0aGUgcHJvdmlkZWQgaGFzaCB3YXMgbm90IGZvdW5kIHNvIHRoZSB0YXNrIGhhcyBiZWVuIGFib3J0ZWQuOFBlcmlvZGljRmFpbGVkCAEQdGFza4ABeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlkhAFAT3B0aW9uPFRhc2tOYW1lPgAGBD0BVGhlIGdpdmVuIHRhc2sgd2FzIHVuYWJsZSB0byBiZSByZW5ld2VkIHNpbmNlIHRoZSBhZ2VuZGEgaXMgZnVsbCBhdCB0aGF0IGJsb2NrLixSZXRyeUZhaWxlZAgBEHRhc2uAAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZIQBQE9wdGlvbjxUYXNrTmFtZT4ABwhdAVRoZSBnaXZlbiB0YXNrIHdhcyB1bmFibGUgdG8gYmUgcmV0cmllZCBzaW5jZSB0aGUgYWdlbmRhIGlzIGZ1bGwgYXQgdGhhdCBibG9jayBvciB0aGVyZZx3YXMgbm90IGVub3VnaCB3ZWlnaHQgdG8gcmVzY2hlZHVsZSBpdC5UUGVybWFuZW50bHlPdmVyd2VpZ2h0CAEQdGFza4ABeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlkhAFAT3B0aW9uPFRhc2tOYW1lPgAIBPBUaGUgZ2l2ZW4gdGFzayBjYW4gbmV2ZXIgYmUgZXhlY3V0ZWQgc2luY2UgaXQgaXMgb3ZlcndlaWdodC4EMEV2ZW50cyB0eXBlLoAAAAQIEBAAhAQYT3B0aW9uBARUAQQBCBBOb25lAAAAEFNvbWUEAAQAAAEAAIgEGFJlc3VsdAgEVAGMBEUBaAEICE9rBACMAAAAAAxFcnIEAGgAAAEAAIwAAAQAAJAMPHBhbGxldF9wcmVpbWFnZRhwYWxsZXQURXZlbnQEBFQAAQwUTm90ZWQEARBoYXNoNAEcVDo6SGFzaAAABGhBIHByZWltYWdlIGhhcyBiZWVuIG5vdGVkLiRSZXF1ZXN0ZWQEARBoYXNoNAEcVDo6SGFzaAABBHhBIHByZWltYWdlIGhhcyBiZWVuIHJlcXVlc3RlZC4cQ2xlYXJlZAQBEGhhc2g0ARxUOjpIYXNoAAIEbEEgcHJlaW1hZ2UgaGFzIGJlbiBjbGVhcmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldJQMOHBhbGxldF9pbmRpY2VzGHBhbGxldBRFdmVudAQEVAABDDRJbmRleEFzc2lnbmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgAAAR0QSBhY2NvdW50IGluZGV4IHdhcyBhc3NpZ25lZC4oSW5kZXhGcmVlZAQBFGluZGV4EAE8VDo6QWNjb3VudEluZGV4AAEEvEEgYWNjb3VudCBpbmRleCBoYXMgYmVlbiBmcmVlZCB1cCAodW5hc3NpZ25lZCkuLEluZGV4RnJvemVuCAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgAAQx3aG8AATBUOjpBY2NvdW50SWQAAgToQSBhY2NvdW50IGluZGV4IGhhcyBiZWVuIGZyb3plbiB0byBpdHMgY3VycmVudCBhY2NvdW50IElELgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldJgMPHBhbGxldF9iYWxhbmNlcxhwYWxsZXQURXZlbnQIBFQABEkAAVgcRW5kb3dlZAgBHGFjY291bnQAATBUOjpBY2NvdW50SWQAATBmcmVlX2JhbGFuY2UYAShUOjpCYWxhbmNlAAAEuEFuIGFjY291bnQgd2FzIGNyZWF0ZWQgd2l0aCBzb21lIGZyZWUgYmFsYW5jZS4gRHVzdExvc3QIARxhY2NvdW50AAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQABCD0BQW4gYWNjb3VudCB3YXMgcmVtb3ZlZCB3aG9zZSBiYWxhbmNlIHdhcyBub24temVybyBidXQgYmVsb3cgRXhpc3RlbnRpYWxEZXBvc2l0LHhyZXN1bHRpbmcgaW4gYW4gb3V0cmlnaHQgbG9zcy4gVHJhbnNmZXIMARBmcm9tAAEwVDo6QWNjb3VudElkAAEIdG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAIETFRyYW5zZmVyIHN1Y2NlZWRlZC4oQmFsYW5jZVNldAgBDHdobwABMFQ6OkFjY291bnRJZAABEGZyZWUYAShUOjpCYWxhbmNlAAMEaEEgYmFsYW5jZSB3YXMgc2V0IGJ5IHJvb3QuIFJlc2VydmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAEBOBTb21lIGJhbGFuY2Ugd2FzIHJlc2VydmVkIChtb3ZlZCBmcm9tIGZyZWUgdG8gcmVzZXJ2ZWQpLihVbnJlc2VydmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAFBOhTb21lIGJhbGFuY2Ugd2FzIHVucmVzZXJ2ZWQgKG1vdmVkIGZyb20gcmVzZXJ2ZWQgdG8gZnJlZSkuSFJlc2VydmVSZXBhdHJpYXRlZBABEGZyb20AATBUOjpBY2NvdW50SWQAAQh0bwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAAUhkZXN0aW5hdGlvbl9zdGF0dXOcARhTdGF0dXMABghNAVNvbWUgYmFsYW5jZSB3YXMgbW92ZWQgZnJvbSB0aGUgcmVzZXJ2ZSBvZiB0aGUgZmlyc3QgYWNjb3VudCB0byB0aGUgc2Vjb25kIGFjY291bnQu2EZpbmFsIGFyZ3VtZW50IGluZGljYXRlcyB0aGUgZGVzdGluYXRpb24gYmFsYW5jZSB0eXBlLhxEZXBvc2l0CAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAHBNhTb21lIGFtb3VudCB3YXMgZGVwb3NpdGVkIChlLmcuIGZvciB0cmFuc2FjdGlvbiBmZWVzKS4gV2l0aGRyYXcIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAgEHQFTb21lIGFtb3VudCB3YXMgd2l0aGRyYXduIGZyb20gdGhlIGFjY291bnQgKGUuZy4gZm9yIHRyYW5zYWN0aW9uIGZlZXMpLhxTbGFzaGVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAJBAEBU29tZSBhbW91bnQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgYWNjb3VudCAoZS5nLiBmb3IgbWlzYmVoYXZpb3IpLhhNaW50ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAoEnFNvbWUgYW1vdW50IHdhcyBtaW50ZWQgaW50byBhbiBhY2NvdW50LhhCdXJuZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAsEnFNvbWUgYW1vdW50IHdhcyBidXJuZWQgZnJvbSBhbiBhY2NvdW50LiRTdXNwZW5kZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAwEFQFTb21lIGFtb3VudCB3YXMgc3VzcGVuZGVkIGZyb20gYW4gYWNjb3VudCAoaXQgY2FuIGJlIHJlc3RvcmVkIGxhdGVyKS4gUmVzdG9yZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAA0EpFNvbWUgYW1vdW50IHdhcyByZXN0b3JlZCBpbnRvIGFuIGFjY291bnQuIFVwZ3JhZGVkBAEMd2hvAAEwVDo6QWNjb3VudElkAA4EYEFuIGFjY291bnQgd2FzIHVwZ3JhZGVkLhhJc3N1ZWQEARhhbW91bnQYAShUOjpCYWxhbmNlAA8ELQFUb3RhbCBpc3N1YW5jZSB3YXMgaW5jcmVhc2VkIGJ5IGBhbW91bnRgLCBjcmVhdGluZyBhIGNyZWRpdCB0byBiZSBiYWxhbmNlZC4kUmVzY2luZGVkBAEYYW1vdW50GAEoVDo6QmFsYW5jZQAQBCUBVG90YWwgaXNzdWFuY2Ugd2FzIGRlY3JlYXNlZCBieSBgYW1vdW50YCwgY3JlYXRpbmcgYSBkZWJ0IHRvIGJlIGJhbGFuY2VkLhhMb2NrZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlABEEYFNvbWUgYmFsYW5jZSB3YXMgbG9ja2VkLiBVbmxvY2tlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAEgRoU29tZSBiYWxhbmNlIHdhcyB1bmxvY2tlZC4YRnJvemVuCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQATBGBTb21lIGJhbGFuY2Ugd2FzIGZyb3plbi4YVGhhd2VkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAUBGBTb21lIGJhbGFuY2Ugd2FzIHRoYXdlZC5MVG90YWxJc3N1YW5jZUZvcmNlZAgBDG9sZBgBKFQ6OkJhbGFuY2UAAQxuZXcYAShUOjpCYWxhbmNlABUErFRoZSBgVG90YWxJc3N1YW5jZWAgd2FzIGZvcmNlZnVsbHkgY2hhbmdlZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXScFDRmcmFtZV9zdXBwb3J0GHRyYWl0cxh0b2tlbnMQbWlzYzRCYWxhbmNlU3RhdHVzAAEIEEZyZWUAAAAgUmVzZXJ2ZWQAAQAAoAxocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQYcGFsbGV0FEV2ZW50BARUAAEESFRyYW5zYWN0aW9uRmVlUGFpZAwBDHdobwABMFQ6OkFjY291bnRJZAABKGFjdHVhbF9mZWUYATBCYWxhbmNlT2Y8VD4AAQx0aXAYATBCYWxhbmNlT2Y8VD4AAAhZAUEgdHJhbnNhY3Rpb24gZmVlIGBhY3R1YWxfZmVlYCwgb2Ygd2hpY2ggYHRpcGAgd2FzIGFkZGVkIHRvIHRoZSBtaW5pbXVtIGluY2x1c2lvbiBmZWUsXGhhcyBiZWVuIHBhaWQgYnkgYHdob2AuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0pBA4cGFsbGV0X3N0YWtpbmcYcGFsbGV0GHBhbGxldBRFdmVudAQEVAABSBxFcmFQYWlkDAEkZXJhX2luZGV4EAEgRXJhSW5kZXgAAUB2YWxpZGF0b3JfcGF5b3V0GAEwQmFsYW5jZU9mPFQ+AAEkcmVtYWluZGVyGAEwQmFsYW5jZU9mPFQ+AAAIVQFUaGUgZXJhIHBheW91dCBoYXMgYmVlbiBzZXQ7IHRoZSBmaXJzdCBiYWxhbmNlIGlzIHRoZSB2YWxpZGF0b3ItcGF5b3V0OyB0aGUgc2Vjb25kIGlzwHRoZSByZW1haW5kZXIgZnJvbSB0aGUgbWF4aW11bSBhbW91bnQgb2YgcmV3YXJkLiBSZXdhcmRlZAwBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEQZGVzdKgBfFJld2FyZERlc3RpbmF0aW9uPFQ6OkFjY291bnRJZD4AARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAQQNAVRoZSBub21pbmF0b3IgaGFzIGJlZW4gcmV3YXJkZWQgYnkgdGhpcyBhbW91bnQgdG8gdGhpcyBkZXN0aW5hdGlvbi4cU2xhc2hlZAgBGHN0YWtlcgABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgACBB0BQSBzdGFrZXIgKHZhbGlkYXRvciBvciBub21pbmF0b3IpIGhhcyBiZWVuIHNsYXNoZWQgYnkgdGhlIGdpdmVuIGFtb3VudC40U2xhc2hSZXBvcnRlZAwBJHZhbGlkYXRvcgABMFQ6OkFjY291bnRJZAABIGZyYWN0aW9urAEcUGVyYmlsbAABJHNsYXNoX2VyYRABIEVyYUluZGV4AAMIWQFBIHNsYXNoIGZvciB0aGUgZ2l2ZW4gdmFsaWRhdG9yLCBmb3IgdGhlIGdpdmVuIHBlcmNlbnRhZ2Ugb2YgdGhlaXIgc3Rha2UsIGF0IHRoZSBnaXZlblRlcmEgYXMgYmVlbiByZXBvcnRlZC5oT2xkU2xhc2hpbmdSZXBvcnREaXNjYXJkZWQEATRzZXNzaW9uX2luZGV4EAEwU2Vzc2lvbkluZGV4AAQIGQFBbiBvbGQgc2xhc2hpbmcgcmVwb3J0IGZyb20gYSBwcmlvciBlcmEgd2FzIGRpc2NhcmRlZCBiZWNhdXNlIGl0IGNvdWxkRG5vdCBiZSBwcm9jZXNzZWQuOFN0YWtlcnNFbGVjdGVkAAUEhEEgbmV3IHNldCBvZiBzdGFrZXJzIHdhcyBlbGVjdGVkLhhCb25kZWQIARRzdGFzaAABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgAGENBBbiBhY2NvdW50IGhhcyBib25kZWQgdGhpcyBhbW91bnQuIFxbc3Rhc2gsIGFtb3VudFxdAE0BTk9URTogVGhpcyBldmVudCBpcyBvbmx5IGVtaXR0ZWQgd2hlbiBmdW5kcyBhcmUgYm9uZGVkIHZpYSBhIGRpc3BhdGNoYWJsZS4gTm90YWJseSwhAWl0IHdpbGwgbm90IGJlIGVtaXR0ZWQgZm9yIHN0YWtpbmcgcmV3YXJkcyB3aGVuIHRoZXkgYXJlIGFkZGVkIHRvIHN0YWtlLiBVbmJvbmRlZAgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAcEkEFuIGFjY291bnQgaGFzIHVuYm9uZGVkIHRoaXMgYW1vdW50LiRXaXRoZHJhd24IARRzdGFzaAABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgAICFkBQW4gYWNjb3VudCBoYXMgY2FsbGVkIGB3aXRoZHJhd191bmJvbmRlZGAgYW5kIHJlbW92ZWQgdW5ib25kaW5nIGNodW5rcyB3b3J0aCBgQmFsYW5jZWBkZnJvbSB0aGUgdW5sb2NraW5nIHF1ZXVlLhhLaWNrZWQIASRub21pbmF0b3IAATBUOjpBY2NvdW50SWQAARRzdGFzaAABMFQ6OkFjY291bnRJZAAJBLRBIG5vbWluYXRvciBoYXMgYmVlbiBraWNrZWQgZnJvbSBhIHZhbGlkYXRvci5UU3Rha2luZ0VsZWN0aW9uRmFpbGVkAAoErFRoZSBlbGVjdGlvbiBmYWlsZWQuIE5vIG5ldyBlcmEgaXMgcGxhbm5lZC4cQ2hpbGxlZAQBFHN0YXNoAAEwVDo6QWNjb3VudElkAAsEIQFBbiBhY2NvdW50IGhhcyBzdG9wcGVkIHBhcnRpY2lwYXRpbmcgYXMgZWl0aGVyIGEgdmFsaWRhdG9yIG9yIG5vbWluYXRvci40UGF5b3V0U3RhcnRlZAgBJGVyYV9pbmRleBABIEVyYUluZGV4AAE8dmFsaWRhdG9yX3N0YXNoAAEwVDo6QWNjb3VudElkAAwEmFRoZSBzdGFrZXJzJyByZXdhcmRzIGFyZSBnZXR0aW5nIHBhaWQuRFZhbGlkYXRvclByZWZzU2V0CAEUc3Rhc2gAATBUOjpBY2NvdW50SWQAARRwcmVmc7ABOFZhbGlkYXRvclByZWZzAA0EmEEgdmFsaWRhdG9yIGhhcyBzZXQgdGhlaXIgcHJlZmVyZW5jZXMuaFNuYXBzaG90Vm90ZXJzU2l6ZUV4Y2VlZGVkBAEQc2l6ZRABDHUzMgAOBGhWb3RlcnMgc2l6ZSBsaW1pdCByZWFjaGVkLmxTbmFwc2hvdFRhcmdldHNTaXplRXhjZWVkZWQEARBzaXplEAEMdTMyAA8EbFRhcmdldHMgc2l6ZSBsaW1pdCByZWFjaGVkLiBGb3JjZUVyYQQBEG1vZGW4ARxGb3JjaW5nABAEdEEgbmV3IGZvcmNlIGVyYSBtb2RlIHdhcyBzZXQuZENvbnRyb2xsZXJCYXRjaERlcHJlY2F0ZWQEASBmYWlsdXJlcxABDHUzMgARBKRSZXBvcnQgb2YgYSBjb250cm9sbGVyIGJhdGNoIGRlcHJlY2F0aW9uLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldKgIOHBhbGxldF9zdGFraW5nRFJld2FyZERlc3RpbmF0aW9uBCRBY2NvdW50SWQBAAEUGFN0YWtlZAAAABRTdGFzaAABAChDb250cm9sbGVyAAIAHEFjY291bnQEAAABJEFjY291bnRJZAADABBOb25lAAQAAKwMNHNwX2FyaXRobWV0aWMocGVyX3RoaW5ncxxQZXJiaWxsAAAEABABDHUzMgAAsAg4cGFsbGV0X3N0YWtpbmc4VmFsaWRhdG9yUHJlZnMAAAgBKGNvbW1pc3Npb260ARxQZXJiaWxsAAEcYmxvY2tlZCABEGJvb2wAALQAAAasALgIOHBhbGxldF9zdGFraW5nHEZvcmNpbmcAARAoTm90Rm9yY2luZwAAACBGb3JjZU5ldwABACRGb3JjZU5vbmUAAgAsRm9yY2VBbHdheXMAAwAAvAw8cGFsbGV0X29mZmVuY2VzGHBhbGxldBRFdmVudAABBBxPZmZlbmNlCAEQa2luZMABEEtpbmQAASB0aW1lc2xvdDgBOE9wYXF1ZVRpbWVTbG90AAAMUQFUaGVyZSBpcyBhbiBvZmZlbmNlIHJlcG9ydGVkIG9mIHRoZSBnaXZlbiBga2luZGAgaGFwcGVuZWQgYXQgdGhlIGBzZXNzaW9uX2luZGV4YCBhbmQ1AShraW5kLXNwZWNpZmljKSB0aW1lIHNsb3QuIFRoaXMgZXZlbnQgaXMgbm90IGRlcG9zaXRlZCBmb3IgZHVwbGljYXRlIHNsYXNoZXMuTFxba2luZCwgdGltZXNsb3RcXS4EMEV2ZW50cyB0eXBlLsAAAAMQAAAACADEDDhwYWxsZXRfc2Vzc2lvbhhwYWxsZXQURXZlbnQAAQQoTmV3U2Vzc2lvbgQBNHNlc3Npb25faW5kZXgQATBTZXNzaW9uSW5kZXgAAAg5AU5ldyBzZXNzaW9uIGhhcyBoYXBwZW5lZC4gTm90ZSB0aGF0IHRoZSBhcmd1bWVudCBpcyB0aGUgc2Vzc2lvbiBpbmRleCwgbm90IHRoZZxibG9jayBudW1iZXIgYXMgdGhlIHR5cGUgbWlnaHQgc3VnZ2VzdC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXTIDDhwYWxsZXRfZ3JhbmRwYRhwYWxsZXQURXZlbnQAAQw4TmV3QXV0aG9yaXRpZXMEATRhdXRob3JpdHlfc2V0zAE0QXV0aG9yaXR5TGlzdAAABIxOZXcgYXV0aG9yaXR5IHNldCBoYXMgYmVlbiBhcHBsaWVkLhhQYXVzZWQAAQSYQ3VycmVudCBhdXRob3JpdHkgc2V0IGhhcyBiZWVuIHBhdXNlZC4cUmVzdW1lZAACBJxDdXJyZW50IGF1dGhvcml0eSBzZXQgaGFzIGJlZW4gcmVzdW1lZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXTMAAAC0ADQAAAECNQwANQMUHNwX2NvbnNlbnN1c19ncmFuZHBhDGFwcBhQdWJsaWMAAAQABAE8ZWQyNTUxOTo6UHVibGljAADYDDxwYWxsZXRfdHJlYXN1cnkYcGFsbGV0FEV2ZW50CARUAARJAAEwIFNwZW5kaW5nBAFAYnVkZ2V0X3JlbWFpbmluZxgBPEJhbGFuY2VPZjxULCBJPgAABORXZSBoYXZlIGVuZGVkIGEgc3BlbmQgcGVyaW9kIGFuZCB3aWxsIG5vdyBhbGxvY2F0ZSBmdW5kcy4cQXdhcmRlZAwBOHByb3Bvc2FsX2luZGV4EAE0UHJvcG9zYWxJbmRleAABFGF3YXJkGAE8QmFsYW5jZU9mPFQsIEk+AAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAABBHxTb21lIGZ1bmRzIGhhdmUgYmVlbiBhbGxvY2F0ZWQuFEJ1cm50BAEsYnVybnRfZnVuZHMYATxCYWxhbmNlT2Y8VCwgST4AAgSIU29tZSBvZiBvdXIgZnVuZHMgaGF2ZSBiZWVuIGJ1cm50LiBSb2xsb3ZlcgQBQHJvbGxvdmVyX2JhbGFuY2UYATxCYWxhbmNlT2Y8VCwgST4AAwQtAVNwZW5kaW5nIGhhcyBmaW5pc2hlZDsgdGhpcyBpcyB0aGUgYW1vdW50IHRoYXQgcm9sbHMgb3ZlciB1bnRpbCBuZXh0IHNwZW5kLhxEZXBvc2l0BAEUdmFsdWUYATxCYWxhbmNlT2Y8VCwgST4ABAR8U29tZSBmdW5kcyBoYXZlIGJlZW4gZGVwb3NpdGVkLjRTcGVuZEFwcHJvdmVkDAE4cHJvcG9zYWxfaW5kZXgQATRQcm9wb3NhbEluZGV4AAEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+AAEsYmVuZWZpY2lhcnkAATBUOjpBY2NvdW50SWQABQScQSBuZXcgc3BlbmQgcHJvcG9zYWwgaGFzIGJlZW4gYXBwcm92ZWQuPFVwZGF0ZWRJbmFjdGl2ZQgBLHJlYWN0aXZhdGVkGAE8QmFsYW5jZU9mPFQsIEk+AAEsZGVhY3RpdmF0ZWQYATxCYWxhbmNlT2Y8VCwgST4ABgTMVGhlIGluYWN0aXZlIGZ1bmRzIG9mIHRoZSBwYWxsZXQgaGF2ZSBiZWVuIHVwZGF0ZWQuSEFzc2V0U3BlbmRBcHByb3ZlZBgBFGluZGV4EAEoU3BlbmRJbmRleAABKGFzc2V0X2tpbmTcATBUOjpBc3NldEtpbmQAARhhbW91bnQYAVBBc3NldEJhbGFuY2VPZjxULCBJPgABLGJlbmVmaWNpYXJ5RQEBOFQ6OkJlbmVmaWNpYXJ5AAEodmFsaWRfZnJvbRABREJsb2NrTnVtYmVyRm9yPFQ+AAEkZXhwaXJlX2F0EAFEQmxvY2tOdW1iZXJGb3I8VD4ABwS0QSBuZXcgYXNzZXQgc3BlbmQgcHJvcG9zYWwgaGFzIGJlZW4gYXBwcm92ZWQuQEFzc2V0U3BlbmRWb2lkZWQEARRpbmRleBABKFNwZW5kSW5kZXgACAR0QW4gYXBwcm92ZWQgc3BlbmQgd2FzIHZvaWRlZC4QUGFpZAgBFGluZGV4EAEoU3BlbmRJbmRleAABKHBheW1lbnRfaWQwAWQ8VDo6UGF5bWFzdGVyIGFzIFBheT46OklkAAkETEEgcGF5bWVudCBoYXBwZW5lZC40UGF5bWVudEZhaWxlZAgBFGluZGV4EAEoU3BlbmRJbmRleAABKHBheW1lbnRfaWQwAWQ8VDo6UGF5bWFzdGVyIGFzIFBheT46OklkAAoEkEEgcGF5bWVudCBmYWlsZWQgYW5kIGNhbiBiZSByZXRyaWVkLjhTcGVuZFByb2Nlc3NlZAQBFGluZGV4EAEoU3BlbmRJbmRleAALCE0BQSBzcGVuZCB3YXMgcHJvY2Vzc2VkIGFuZCByZW1vdmVkIGZyb20gdGhlIHN0b3JhZ2UuIEl0IG1pZ2h0IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHlwcGFpZCBvciBpdCBtYXkgaGF2ZSBleHBpcmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldNwMXHBvbGthZG90X3J1bnRpbWVfY29tbW9uFGltcGxzXFZlcnNpb25lZExvY2F0YWJsZUFzc2V0AAEICFYzCAEgbG9jYXRpb27gAUR4Y206OnYzOjpMb2NhdGlvbgABIGFzc2V0X2lkCQEBQHhjbTo6djM6OkFzc2V0SWQAAwAIVjQIASBsb2NhdGlvbg0BAUR4Y206OnY0OjpMb2NhdGlvbgABIGFzc2V0X2lkQQEBQHhjbTo6djQ6OkFzc2V0SWQABAAA4BAsc3RhZ2luZ194Y20IdjM0bXVsdGlsb2NhdGlvbjRNdWx0aUxvY2F0aW9uAAAIARxwYXJlbnRzCAEIdTgAASBpbnRlcmlvcuQBJEp1bmN0aW9ucwAA5BAMeGNtCHYzJGp1bmN0aW9ucyRKdW5jdGlvbnMAASQQSGVyZQAAAAhYMQQA6AEgSnVuY3Rpb24AAQAIWDIIAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgACAAhYMwwA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgADAAhYNBAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24ABAAIWDUUAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAFAAhYNhgA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAGAAhYNxwA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24ABwAIWDggAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAA6AEgSnVuY3Rpb24AAOgBIEp1bmN0aW9uAADoASBKdW5jdGlvbgAIAADoEAx4Y20IdjMganVuY3Rpb24gSnVuY3Rpb24AASgkUGFyYWNoYWluBADsAQx1MzIAAAAsQWNjb3VudElkMzIIARxuZXR3b3Jr8AFET3B0aW9uPE5ldHdvcmtJZD4AAQhpZAQBIFt1ODsgMzJdAAEAOEFjY291bnRJbmRleDY0CAEcbmV0d29ya/ABRE9wdGlvbjxOZXR3b3JrSWQ+AAEUaW5kZXgsAQx1NjQAAgAwQWNjb3VudEtleTIwCAEcbmV0d29ya/ABRE9wdGlvbjxOZXR3b3JrSWQ+AAEMa2V5+AEgW3U4OyAyMF0AAwA4UGFsbGV0SW5zdGFuY2UEAAgBCHU4AAQAMEdlbmVyYWxJbmRleAQA/AEQdTEyOAAFAChHZW5lcmFsS2V5CAEYbGVuZ3RoCAEIdTgAARBkYXRhBAEgW3U4OyAzMl0ABgAkT25seUNoaWxkAAcAJFBsdXJhbGl0eQgBCGlkAQEBGEJvZHlJZAABEHBhcnQFAQEgQm9keVBhcnQACAA8R2xvYmFsQ29uc2Vuc3VzBAD0ASROZXR3b3JrSWQACQAA7AAABhAA8AQYT3B0aW9uBARUAfQBCBBOb25lAAAAEFNvbWUEAPQAAAEAAPQQDHhjbQh2MyBqdW5jdGlvbiROZXR3b3JrSWQAASwkQnlHZW5lc2lzBAAEASBbdTg7IDMyXQAAABhCeUZvcmsIATBibG9ja19udW1iZXIwAQx1NjQAAShibG9ja19oYXNoBAEgW3U4OyAzMl0AAQAgUG9sa2Fkb3QAAgAYS3VzYW1hAAMAHFdlc3RlbmQABAAYUm9jb2NvAAUAGFdvY29jbwAGACBFdGhlcmV1bQQBIGNoYWluX2lkLAEMdTY0AAcALEJpdGNvaW5Db3JlAAgALEJpdGNvaW5DYXNoAAkAQFBvbGthZG90QnVsbGV0aW4ACgAA+AAAAxQAAAAIAPwAAAYYAAEBEAx4Y20IdjMganVuY3Rpb24YQm9keUlkAAEoEFVuaXQAAAAcTW9uaWtlcgQASAEcW3U4OyA0XQABABRJbmRleAQA7AEMdTMyAAIAJEV4ZWN1dGl2ZQADACRUZWNobmljYWwABAAsTGVnaXNsYXRpdmUABQAgSnVkaWNpYWwABgAcRGVmZW5zZQAHADhBZG1pbmlzdHJhdGlvbgAIACBUcmVhc3VyeQAJAAAFARAMeGNtCHYzIGp1bmN0aW9uIEJvZHlQYXJ0AAEUFFZvaWNlAAAAHE1lbWJlcnMEARRjb3VudOwBDHUzMgABACBGcmFjdGlvbggBDG5vbewBDHUzMgABFGRlbm9t7AEMdTMyAAIAREF0TGVhc3RQcm9wb3J0aW9uCAEMbm9t7AEMdTMyAAEUZGVub23sAQx1MzIAAwBITW9yZVRoYW5Qcm9wb3J0aW9uCAEMbm9t7AEMdTMyAAEUZGVub23sAQx1MzIABAAACQEQDHhjbQh2MyhtdWx0aWFzc2V0HEFzc2V0SWQAAQggQ29uY3JldGUEAOABNE11bHRpTG9jYXRpb24AAAAgQWJzdHJhY3QEAAQBIFt1ODsgMzJdAAEAAA0BECxzdGFnaW5nX3hjbQh2NCBsb2NhdGlvbiBMb2NhdGlvbgAACAEccGFyZW50cwgBCHU4AAEgaW50ZXJpb3IRAQEkSnVuY3Rpb25zAAARARAsc3RhZ2luZ194Y20IdjQkanVuY3Rpb25zJEp1bmN0aW9ucwABJBBIZXJlAAAACFgxBAAVAQFIQXJjPFtKdW5jdGlvbjsgMV0+AAEACFgyBAAlAQFIQXJjPFtKdW5jdGlvbjsgMl0+AAIACFgzBAApAQFIQXJjPFtKdW5jdGlvbjsgM10+AAMACFg0BAAtAQFIQXJjPFtKdW5jdGlvbjsgNF0+AAQACFg1BAAxAQFIQXJjPFtKdW5jdGlvbjsgNV0+AAUACFg2BAA1AQFIQXJjPFtKdW5jdGlvbjsgNl0+AAYACFg3BAA5AQFIQXJjPFtKdW5jdGlvbjsgN10+AAcACFg4BAA9AQFIQXJjPFtKdW5jdGlvbjsgOF0+AAgAABUBAAADAQAAABkBABkBECxzdGFnaW5nX3hjbQh2NCBqdW5jdGlvbiBKdW5jdGlvbgABKCRQYXJhY2hhaW4EAOwBDHUzMgAAACxBY2NvdW50SWQzMggBHG5ldHdvcmsdAQFET3B0aW9uPE5ldHdvcmtJZD4AAQhpZAQBIFt1ODsgMzJdAAEAOEFjY291bnRJbmRleDY0CAEcbmV0d29yax0BAURPcHRpb248TmV0d29ya0lkPgABFGluZGV4LAEMdTY0AAIAMEFjY291bnRLZXkyMAgBHG5ldHdvcmsdAQFET3B0aW9uPE5ldHdvcmtJZD4AAQxrZXn4ASBbdTg7IDIwXQADADhQYWxsZXRJbnN0YW5jZQQACAEIdTgABAAwR2VuZXJhbEluZGV4BAD8ARB1MTI4AAUAKEdlbmVyYWxLZXkIARhsZW5ndGgIAQh1OAABEGRhdGEEASBbdTg7IDMyXQAGACRPbmx5Q2hpbGQABwAkUGx1cmFsaXR5CAEIaWQBAQEYQm9keUlkAAEQcGFydAUBASBCb2R5UGFydAAIADxHbG9iYWxDb25zZW5zdXMEACEBASROZXR3b3JrSWQACQAAHQEEGE9wdGlvbgQEVAEhAQEIEE5vbmUAAAAQU29tZQQAIQEAAAEAACEBECxzdGFnaW5nX3hjbQh2NCBqdW5jdGlvbiROZXR3b3JrSWQAASwkQnlHZW5lc2lzBAAEASBbdTg7IDMyXQAAABhCeUZvcmsIATBibG9ja19udW1iZXIwAQx1NjQAAShibG9ja19oYXNoBAEgW3U4OyAzMl0AAQAgUG9sa2Fkb3QAAgAYS3VzYW1hAAMAHFdlc3RlbmQABAAYUm9jb2NvAAUAGFdvY29jbwAGACBFdGhlcmV1bQQBIGNoYWluX2lkLAEMdTY0AAcALEJpdGNvaW5Db3JlAAgALEJpdGNvaW5DYXNoAAkAQFBvbGthZG90QnVsbGV0aW4ACgAAJQEAAAMCAAAAGQEAKQEAAAMDAAAAGQEALQEAAAMEAAAAGQEAMQEAAAMFAAAAGQEANQEAAAMGAAAAGQEAOQEAAAMHAAAAGQEAPQEAAAMIAAAAGQEAQQEQLHN0YWdpbmdfeGNtCHY0FGFzc2V0HEFzc2V0SWQAAAQADQEBIExvY2F0aW9uAABFAQgMeGNtRFZlcnNpb25lZExvY2F0aW9uAAEMCFYyBABJAQFEdjI6Ok11bHRpTG9jYXRpb24AAQAIVjMEAOABRHYzOjpNdWx0aUxvY2F0aW9uAAMACFY0BAANAQEwdjQ6OkxvY2F0aW9uAAQAAEkBEAx4Y20IdjI0bXVsdGlsb2NhdGlvbjRNdWx0aUxvY2F0aW9uAAAIARxwYXJlbnRzCAEIdTgAASBpbnRlcmlvck0BASRKdW5jdGlvbnMAAE0BEAx4Y20IdjI0bXVsdGlsb2NhdGlvbiRKdW5jdGlvbnMAASQQSGVyZQAAAAhYMQQAUQEBIEp1bmN0aW9uAAEACFgyCABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgACAAhYMwwAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgADAAhYNBAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAAQACFg1FABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAFAAhYNhgAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAGAAhYNxwAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAAcACFg4IABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAAUQEBIEp1bmN0aW9uAABRAQEgSnVuY3Rpb24AAFEBASBKdW5jdGlvbgAIAABRARAMeGNtCHYyIGp1bmN0aW9uIEp1bmN0aW9uAAEkJFBhcmFjaGFpbgQA7AEMdTMyAAAALEFjY291bnRJZDMyCAEcbmV0d29ya1UBASROZXR3b3JrSWQAAQhpZAQBIFt1ODsgMzJdAAEAOEFjY291bnRJbmRleDY0CAEcbmV0d29ya1UBASROZXR3b3JrSWQAARRpbmRleCwBDHU2NAACADBBY2NvdW50S2V5MjAIARxuZXR3b3JrVQEBJE5ldHdvcmtJZAABDGtlefgBIFt1ODsgMjBdAAMAOFBhbGxldEluc3RhbmNlBAAIAQh1OAAEADBHZW5lcmFsSW5kZXgEAPwBEHUxMjgABQAoR2VuZXJhbEtleQQAWQEBgFdlYWtCb3VuZGVkVmVjPHU4LCBDb25zdFUzMjwzMj4+AAYAJE9ubHlDaGlsZAAHACRQbHVyYWxpdHkIAQhpZF0BARhCb2R5SWQAARBwYXJ0YQEBIEJvZHlQYXJ0AAgAAFUBDAx4Y20IdjIkTmV0d29ya0lkAAEQDEFueQAAABROYW1lZAQAWQEBgFdlYWtCb3VuZGVkVmVjPHU4LCBDb25zdFUzMjwzMj4+AAEAIFBvbGthZG90AAIAGEt1c2FtYQADAABZAQxMYm91bmRlZF9jb2xsZWN0aW9uc0B3ZWFrX2JvdW5kZWRfdmVjOFdlYWtCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AAF0BDAx4Y20IdjIYQm9keUlkAAEoEFVuaXQAAAAUTmFtZWQEAFkBAYBXZWFrQm91bmRlZFZlYzx1OCwgQ29uc3RVMzI8MzI+PgABABRJbmRleAQA7AEMdTMyAAIAJEV4ZWN1dGl2ZQADACRUZWNobmljYWwABAAsTGVnaXNsYXRpdmUABQAgSnVkaWNpYWwABgAcRGVmZW5zZQAHADhBZG1pbmlzdHJhdGlvbgAIACBUcmVhc3VyeQAJAABhAQwMeGNtCHYyIEJvZHlQYXJ0AAEUFFZvaWNlAAAAHE1lbWJlcnMEARRjb3VudOwBDHUzMgABACBGcmFjdGlvbggBDG5vbewBDHUzMgABFGRlbm9t7AEMdTMyAAIAREF0TGVhc3RQcm9wb3J0aW9uCAEMbm9t7AEMdTMyAAEUZGVub23sAQx1MzIAAwBITW9yZVRoYW5Qcm9wb3J0aW9uCAEMbm9t7AEMdTMyAAEUZGVub23sAQx1MzIABAAAZQEMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxhwYWxsZXQURXZlbnQIBFQABEkAAQgkRGVsZWdhdGVkCAAAATBUOjpBY2NvdW50SWQAAAABMFQ6OkFjY291bnRJZAAABB0BQW4gYWNjb3VudCBoYXMgZGVsZWdhdGVkIHRoZWlyIHZvdGUgdG8gYW5vdGhlciBhY2NvdW50LiBcW3dobywgdGFyZ2V0XF0sVW5kZWxlZ2F0ZWQEAAABMFQ6OkFjY291bnRJZAABBPRBbiBcW2FjY291bnRcXSBoYXMgY2FuY2VsbGVkIGEgcHJldmlvdXMgZGVsZWdhdGlvbiBvcGVyYXRpb24uBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0aQEMQHBhbGxldF9yZWZlcmVuZGEYcGFsbGV0FEV2ZW50CARUAARJAAFAJFN1Ym1pdHRlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BFHRyYWNrbQEBPFRyYWNrSWRPZjxULCBJPgQlAVRoZSB0cmFjayAoYW5kIGJ5IGV4dGVuc2lvbiBwcm9wb3NhbCBkaXNwYXRjaCBvcmlnaW4pIG9mIHRoaXMgcmVmZXJlbmR1bS4BIHByb3Bvc2FscQEBTEJvdW5kZWRDYWxsT2Y8VCwgST4EgFRoZSBwcm9wb3NhbCBmb3IgdGhlIHJlZmVyZW5kdW0uAASAQSByZWZlcmVuZHVtIGhhcyBiZWVuIHN1Ym1pdHRlZC5URGVjaXNpb25EZXBvc2l0UGxhY2VkDAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEMd2hvAAEwVDo6QWNjb3VudElkBIxUaGUgYWNjb3VudCB3aG8gcGxhY2VkIHRoZSBkZXBvc2l0LgEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+BIRUaGUgYW1vdW50IHBsYWNlZCBieSB0aGUgYWNjb3VudC4BBJRUaGUgZGVjaXNpb24gZGVwb3NpdCBoYXMgYmVlbiBwbGFjZWQuXERlY2lzaW9uRGVwb3NpdFJlZnVuZGVkDAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEMd2hvAAEwVDo6QWNjb3VudElkBIxUaGUgYWNjb3VudCB3aG8gcGxhY2VkIHRoZSBkZXBvc2l0LgEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+BIRUaGUgYW1vdW50IHBsYWNlZCBieSB0aGUgYWNjb3VudC4CBJxUaGUgZGVjaXNpb24gZGVwb3NpdCBoYXMgYmVlbiByZWZ1bmRlZC44RGVwb3NpdFNsYXNoZWQIAQx3aG8AATBUOjpBY2NvdW50SWQEjFRoZSBhY2NvdW50IHdobyBwbGFjZWQgdGhlIGRlcG9zaXQuARhhbW91bnQYATxCYWxhbmNlT2Y8VCwgST4EhFRoZSBhbW91bnQgcGxhY2VkIGJ5IHRoZSBhY2NvdW50LgMEbEEgZGVwb3NpdCBoYXMgYmVlbiBzbGFzaGVkLjxEZWNpc2lvblN0YXJ0ZWQQARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0cmFja20BATxUcmFja0lkT2Y8VCwgST4EJQFUaGUgdHJhY2sgKGFuZCBieSBleHRlbnNpb24gcHJvcG9zYWwgZGlzcGF0Y2ggb3JpZ2luKSBvZiB0aGlzIHJlZmVyZW5kdW0uASBwcm9wb3NhbHEBAUxCb3VuZGVkQ2FsbE9mPFQsIEk+BIBUaGUgcHJvcG9zYWwgZm9yIHRoZSByZWZlcmVuZHVtLgEUdGFsbHkBBwEgVDo6VGFsbHkEuFRoZSBjdXJyZW50IHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4EBLxBIHJlZmVyZW5kdW0gaGFzIG1vdmVkIGludG8gdGhlIGRlY2lkaW5nIHBoYXNlLjhDb25maXJtU3RhcnRlZAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4FADhDb25maXJtQWJvcnRlZAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4GACRDb25maXJtZWQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0YWxseQEHASBUOjpUYWxseQSwVGhlIGZpbmFsIHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4HBCEBQSByZWZlcmVuZHVtIGhhcyBlbmRlZCBpdHMgY29uZmlybWF0aW9uIHBoYXNlIGFuZCBpcyByZWFkeSBmb3IgYXBwcm92YWwuIEFwcHJvdmVkBAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLggEDQFBIHJlZmVyZW5kdW0gaGFzIGJlZW4gYXBwcm92ZWQgYW5kIGl0cyBwcm9wb3NhbCBoYXMgYmVlbiBzY2hlZHVsZWQuIFJlamVjdGVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHkBBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uCQSsQSBwcm9wb3NhbCBoYXMgYmVlbiByZWplY3RlZCBieSByZWZlcmVuZHVtLiBUaW1lZE91dAgBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BFHRhbGx5AQcBIFQ6OlRhbGx5BLBUaGUgZmluYWwgdGFsbHkgb2Ygdm90ZXMgaW4gdGhpcyByZWZlcmVuZHVtLgoE2EEgcmVmZXJlbmR1bSBoYXMgYmVlbiB0aW1lZCBvdXQgd2l0aG91dCBiZWluZyBkZWNpZGVkLiRDYW5jZWxsZWQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0YWxseQEHASBUOjpUYWxseQSwVGhlIGZpbmFsIHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4LBIBBIHJlZmVyZW5kdW0gaGFzIGJlZW4gY2FuY2VsbGVkLhhLaWxsZWQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0YWxseQEHASBUOjpUYWxseQSwVGhlIGZpbmFsIHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4MBHRBIHJlZmVyZW5kdW0gaGFzIGJlZW4ga2lsbGVkLmRTdWJtaXNzaW9uRGVwb3NpdFJlZnVuZGVkDAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEMd2hvAAEwVDo6QWNjb3VudElkBIxUaGUgYWNjb3VudCB3aG8gcGxhY2VkIHRoZSBkZXBvc2l0LgEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+BIRUaGUgYW1vdW50IHBsYWNlZCBieSB0aGUgYWNjb3VudC4NBKRUaGUgc3VibWlzc2lvbiBkZXBvc2l0IGhhcyBiZWVuIHJlZnVuZGVkLixNZXRhZGF0YVNldAgBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BEGhhc2g0ARxUOjpIYXNoBDhQcmVpbWFnZSBoYXNoLg4EnE1ldGFkYXRhIGZvciBhIHJlZmVyZW5kdW0gaGFzIGJlZW4gc2V0LjxNZXRhZGF0YUNsZWFyZWQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARBoYXNoNAEcVDo6SGFzaAQ4UHJlaW1hZ2UgaGFzaC4PBKxNZXRhZGF0YSBmb3IgYSByZWZlcmVuZHVtIGhhcyBiZWVuIGNsZWFyZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0bQEAAAUEAHEBEDRmcmFtZV9zdXBwb3J0GHRyYWl0cyRwcmVpbWFnZXMcQm91bmRlZAgEVAF1AQRIAfkGAQwYTGVnYWN5BAEQaGFzaDQBJEg6Ok91dHB1dAAAABhJbmxpbmUEAP0GATRCb3VuZGVkSW5saW5lAAEAGExvb2t1cAgBEGhhc2g0ASRIOjpPdXRwdXQAAQxsZW4QAQx1MzIAAgAAdQEIQHBvbGthZG90X3J1bnRpbWUsUnVudGltZUNhbGwAAbgYU3lzdGVtBAB5AQGtAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTeXN0ZW0sIFJ1bnRpbWU+AAAAJFNjaGVkdWxlcgQAiQEBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U2NoZWR1bGVyLCBSdW50aW1lPgABACBQcmVpbWFnZQQAkQEBtQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UHJlaW1hZ2UsIFJ1bnRpbWU+AAoAEEJhYmUEAJkBAaUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEJhYmUsIFJ1bnRpbWU+AAIAJFRpbWVzdGFtcAQAvQEBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VGltZXN0YW1wLCBSdW50aW1lPgADABxJbmRpY2VzBADBAQGxAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxJbmRpY2VzLCBSdW50aW1lPgAEACBCYWxhbmNlcwQAzQEBtQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8QmFsYW5jZXMsIFJ1bnRpbWU+AAUAHFN0YWtpbmcEANkBAbEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFN0YWtpbmcsIFJ1bnRpbWU+AAcAHFNlc3Npb24EABUCAbEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFNlc3Npb24sIFJ1bnRpbWU+AAkAHEdyYW5kcGEEADECAbEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEdyYW5kcGEsIFJ1bnRpbWU+AAsAIFRyZWFzdXJ5BABdAgG1AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxUcmVhc3VyeSwgUnVudGltZT4AEwBAQ29udmljdGlvblZvdGluZwQAZQIB1QFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8Q29udmljdGlvblZvdGluZywgUnVudGltZT4AFAAkUmVmZXJlbmRhBAB5AgG5AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxSZWZlcmVuZGEsIFJ1bnRpbWU+ABUAJFdoaXRlbGlzdAQAoQIBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8V2hpdGVsaXN0LCBSdW50aW1lPgAXAChQYXJhbWV0ZXJzBAClAgG9AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhbWV0ZXJzLCBSdW50aW1lPgAbABhDbGFpbXMEANECAa0Bc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENsYWltcywgUnVudGltZT4AGAAcVmVzdGluZwQA8QIBsQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VmVzdGluZywgUnVudGltZT4AGQAcVXRpbGl0eQQA+QIBsQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VXRpbGl0eSwgUnVudGltZT4AGgAUUHJveHkEAAEDAakBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFByb3h5LCBSdW50aW1lPgAdACBNdWx0aXNpZwQADQMBtQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8TXVsdGlzaWcsIFJ1bnRpbWU+AB4AIEJvdW50aWVzBAAZAwG1AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxCb3VudGllcywgUnVudGltZT4AIgA0Q2hpbGRCb3VudGllcwQAHQMByQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8Q2hpbGRCb3VudGllcywgUnVudGltZT4AJgBoRWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2UEACEDAf0Bc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEVsZWN0aW9uUHJvdmlkZXJNdWx0aVBoYXNlLCBSdW50aW1lPgAkACRWb3Rlckxpc3QEABUEAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFZvdGVyTGlzdCwgUnVudGltZT4AJQA8Tm9taW5hdGlvblBvb2xzBAAZBAHRAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxOb21pbmF0aW9uUG9vbHMsIFJ1bnRpbWU+ACcALEZhc3RVbnN0YWtlBABNBAHBAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxGYXN0VW5zdGFrZSwgUnVudGltZT4AKAA0Q29uZmlndXJhdGlvbgQAUQQByQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8Q29uZmlndXJhdGlvbiwgUnVudGltZT4AMwAsUGFyYXNTaGFyZWQEAHUEAcEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzU2hhcmVkLCBSdW50aW1lPgA0ADRQYXJhSW5jbHVzaW9uBAB5BAHJAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhSW5jbHVzaW9uLCBSdW50aW1lPgA1ADBQYXJhSW5oZXJlbnQEAH0EAcUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFJbmhlcmVudCwgUnVudGltZT4ANgAUUGFyYXMEAAkFAakBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzLCBSdW50aW1lPgA4ACxJbml0aWFsaXplcgQAEQUBwQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8SW5pdGlhbGl6ZXIsIFJ1bnRpbWU+ADkAEEhybXAEABUFAaUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEhybXAsIFJ1bnRpbWU+ADwANFBhcmFzRGlzcHV0ZXMEAB0FAckBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzRGlzcHV0ZXMsIFJ1bnRpbWU+AD4ANFBhcmFzU2xhc2hpbmcEACEFAckBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzU2xhc2hpbmcsIFJ1bnRpbWU+AD8AIE9uRGVtYW5kBAAxBQG1AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxPbkRlbWFuZCwgUnVudGltZT4AQAAkUmVnaXN0cmFyBAA1BQG5AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxSZWdpc3RyYXIsIFJ1bnRpbWU+AEYAFFNsb3RzBAA5BQGpAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTbG90cywgUnVudGltZT4ARwAgQXVjdGlvbnMEAD0FAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEF1Y3Rpb25zLCBSdW50aW1lPgBIACRDcm93ZGxvYW4EAEUFAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENyb3dkbG9hbiwgUnVudGltZT4ASQAgQ29yZXRpbWUEAFkFAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENvcmV0aW1lLCBSdW50aW1lPgBKAEhTdGF0ZVRyaWVNaWdyYXRpb24EAG0FAd0Bc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFN0YXRlVHJpZU1pZ3JhdGlvbiwgUnVudGltZT4AYgAkWGNtUGFsbGV0BACFBQG5AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxYY21QYWxsZXQsIFJ1bnRpbWU+AGMAME1lc3NhZ2VRdWV1ZQQAwQYBxQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8TWVzc2FnZVF1ZXVlLCBSdW50aW1lPgBkACRBc3NldFJhdGUEAM0GAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEFzc2V0UmF0ZSwgUnVudGltZT4AZQAUQmVlZnkEANUGAakBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEJlZWZ5LCBSdW50aW1lPgDIAAB5AQwwZnJhbWVfc3lzdGVtGHBhbGxldBBDYWxsBARUAAEsGHJlbWFyawQBGHJlbWFyazgBHFZlYzx1OD4AAAxoTWFrZSBzb21lIG9uLWNoYWluIHJlbWFyay4AiENhbiBiZSBleGVjdXRlZCBieSBldmVyeSBgb3JpZ2luYC44c2V0X2hlYXBfcGFnZXMEARRwYWdlczABDHU2NAABBPhTZXQgdGhlIG51bWJlciBvZiBwYWdlcyBpbiB0aGUgV2ViQXNzZW1ibHkgZW52aXJvbm1lbnQncyBoZWFwLiBzZXRfY29kZQQBEGNvZGU4ARxWZWM8dTg+AAIEZFNldCB0aGUgbmV3IHJ1bnRpbWUgY29kZS5cc2V0X2NvZGVfd2l0aG91dF9jaGVja3MEARBjb2RlOAEcVmVjPHU4PgADEBkBU2V0IHRoZSBuZXcgcnVudGltZSBjb2RlIHdpdGhvdXQgZG9pbmcgYW55IGNoZWNrcyBvZiB0aGUgZ2l2ZW4gYGNvZGVgLgBRAU5vdGUgdGhhdCBydW50aW1lIHVwZ3JhZGVzIHdpbGwgbm90IHJ1biBpZiB0aGlzIGlzIGNhbGxlZCB3aXRoIGEgbm90LWluY3JlYXNpbmcgc3BlYyB2ZXJzaW9uISxzZXRfc3RvcmFnZQQBFGl0ZW1zfQEBNFZlYzxLZXlWYWx1ZT4ABARoU2V0IHNvbWUgaXRlbXMgb2Ygc3RvcmFnZS4wa2lsbF9zdG9yYWdlBAEQa2V5c4UBASBWZWM8S2V5PgAFBHRLaWxsIHNvbWUgaXRlbXMgZnJvbSBzdG9yYWdlLixraWxsX3ByZWZpeAgBGHByZWZpeDgBDEtleQABHHN1YmtleXMQAQx1MzIABhARAUtpbGwgYWxsIHN0b3JhZ2UgaXRlbXMgd2l0aCBhIGtleSB0aGF0IHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiBwcmVmaXguADkBKipOT1RFOioqIFdlIHJlbHkgb24gdGhlIFJvb3Qgb3JpZ2luIHRvIHByb3ZpZGUgdXMgdGhlIG51bWJlciBvZiBzdWJrZXlzIHVuZGVyPQF0aGUgcHJlZml4IHdlIGFyZSByZW1vdmluZyB0byBhY2N1cmF0ZWx5IGNhbGN1bGF0ZSB0aGUgd2VpZ2h0IG9mIHRoaXMgZnVuY3Rpb24uRHJlbWFya193aXRoX2V2ZW50BAEYcmVtYXJrOAEcVmVjPHU4PgAHBKRNYWtlIHNvbWUgb24tY2hhaW4gcmVtYXJrIGFuZCBlbWl0IGV2ZW50LkRhdXRob3JpemVfdXBncmFkZQQBJGNvZGVfaGFzaDQBHFQ6Okhhc2gACRBhAUF1dGhvcml6ZSBhbiB1cGdyYWRlIHRvIGEgZ2l2ZW4gYGNvZGVfaGFzaGAgZm9yIHRoZSBydW50aW1lLiBUaGUgcnVudGltZSBjYW4gYmUgc3VwcGxpZWQYbGF0ZXIuAHxUaGlzIGNhbGwgcmVxdWlyZXMgUm9vdCBvcmlnaW4ugGF1dGhvcml6ZV91cGdyYWRlX3dpdGhvdXRfY2hlY2tzBAEkY29kZV9oYXNoNAEcVDo6SGFzaAAKIGEBQXV0aG9yaXplIGFuIHVwZ3JhZGUgdG8gYSBnaXZlbiBgY29kZV9oYXNoYCBmb3IgdGhlIHJ1bnRpbWUuIFRoZSBydW50aW1lIGNhbiBiZSBzdXBwbGllZBhsYXRlci4AXQFXQVJOSU5HOiBUaGlzIGF1dGhvcml6ZXMgYW4gdXBncmFkZSB0aGF0IHdpbGwgdGFrZSBwbGFjZSB3aXRob3V0IGFueSBzYWZldHkgY2hlY2tzLCBmb3JZAWV4YW1wbGUgdGhhdCB0aGUgc3BlYyBuYW1lIHJlbWFpbnMgdGhlIHNhbWUgYW5kIHRoYXQgdGhlIHZlcnNpb24gbnVtYmVyIGluY3JlYXNlcy4gTm908HJlY29tbWVuZGVkIGZvciBub3JtYWwgdXNlLiBVc2UgYGF1dGhvcml6ZV91cGdyYWRlYCBpbnN0ZWFkLgB8VGhpcyBjYWxsIHJlcXVpcmVzIFJvb3Qgb3JpZ2luLmBhcHBseV9hdXRob3JpemVkX3VwZ3JhZGUEARBjb2RlOAEcVmVjPHU4PgALJFUBUHJvdmlkZSB0aGUgcHJlaW1hZ2UgKHJ1bnRpbWUgYmluYXJ5KSBgY29kZWAgZm9yIGFuIHVwZ3JhZGUgdGhhdCBoYXMgYmVlbiBhdXRob3JpemVkLgBJAUlmIHRoZSBhdXRob3JpemF0aW9uIHJlcXVpcmVkIGEgdmVyc2lvbiBjaGVjaywgdGhpcyBjYWxsIHdpbGwgZW5zdXJlIHRoZSBzcGVjIG5hbWXocmVtYWlucyB1bmNoYW5nZWQgYW5kIHRoYXQgdGhlIHNwZWMgdmVyc2lvbiBoYXMgaW5jcmVhc2VkLgBZAURlcGVuZGluZyBvbiB0aGUgcnVudGltZSdzIGBPblNldENvZGVgIGNvbmZpZ3VyYXRpb24sIHRoaXMgZnVuY3Rpb24gbWF5IGRpcmVjdGx5IGFwcGx5EQF0aGUgbmV3IGBjb2RlYCBpbiB0aGUgc2FtZSBibG9jayBvciBhdHRlbXB0IHRvIHNjaGVkdWxlIHRoZSB1cGdyYWRlLgBgQWxsIG9yaWdpbnMgYXJlIGFsbG93ZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLn0BAAACgQEAgQEAAAQIODgAhQEAAAI4AIkBDEBwYWxsZXRfc2NoZWR1bGVyGHBhbGxldBBDYWxsBARUAAEoIHNjaGVkdWxlEAEQd2hlbhABREJsb2NrTnVtYmVyRm9yPFQ+AAE4bWF5YmVfcGVyaW9kaWONAQGsT3B0aW9uPHNjaGVkdWxlOjpQZXJpb2Q8QmxvY2tOdW1iZXJGb3I8VD4+PgABIHByaW9yaXR5CAFIc2NoZWR1bGU6OlByaW9yaXR5AAEQY2FsbHUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAAEcEFub255bW91c2x5IHNjaGVkdWxlIGEgdGFzay4YY2FuY2VsCAEQd2hlbhABREJsb2NrTnVtYmVyRm9yPFQ+AAEUaW5kZXgQAQx1MzIAAQSUQ2FuY2VsIGFuIGFub255bW91c2x5IHNjaGVkdWxlZCB0YXNrLjhzY2hlZHVsZV9uYW1lZBQBCGlkBAEgVGFza05hbWUAARB3aGVuEAFEQmxvY2tOdW1iZXJGb3I8VD4AAThtYXliZV9wZXJpb2RpY40BAaxPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlckZvcjxUPj4+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxsdQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AAgRYU2NoZWR1bGUgYSBuYW1lZCB0YXNrLjBjYW5jZWxfbmFtZWQEAQhpZAQBIFRhc2tOYW1lAAMEeENhbmNlbCBhIG5hbWVkIHNjaGVkdWxlZCB0YXNrLjhzY2hlZHVsZV9hZnRlchABFGFmdGVyEAFEQmxvY2tOdW1iZXJGb3I8VD4AAThtYXliZV9wZXJpb2RpY40BAaxPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlckZvcjxUPj4+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxsdQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4ABASoQW5vbnltb3VzbHkgc2NoZWR1bGUgYSB0YXNrIGFmdGVyIGEgZGVsYXkuUHNjaGVkdWxlX25hbWVkX2FmdGVyFAEIaWQEASBUYXNrTmFtZQABFGFmdGVyEAFEQmxvY2tOdW1iZXJGb3I8VD4AAThtYXliZV9wZXJpb2RpY40BAaxPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlckZvcjxUPj4+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxsdQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4ABQSQU2NoZWR1bGUgYSBuYW1lZCB0YXNrIGFmdGVyIGEgZGVsYXkuJHNldF9yZXRyeQwBEHRhc2uAAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AARxyZXRyaWVzCAEIdTgAARhwZXJpb2QQAURCbG9ja051bWJlckZvcjxUPgAGMFkBU2V0IGEgcmV0cnkgY29uZmlndXJhdGlvbiBmb3IgYSB0YXNrIHNvIHRoYXQsIGluIGNhc2UgaXRzIHNjaGVkdWxlZCBydW4gZmFpbHMsIGl0IHdpbGxVAWJlIHJldHJpZWQgYWZ0ZXIgYHBlcmlvZGAgYmxvY2tzLCBmb3IgYSB0b3RhbCBhbW91bnQgb2YgYHJldHJpZXNgIHJldHJpZXMgb3IgdW50aWwgaXQkc3VjY2VlZHMuAFUBVGFza3Mgd2hpY2ggbmVlZCB0byBiZSBzY2hlZHVsZWQgZm9yIGEgcmV0cnkgYXJlIHN0aWxsIHN1YmplY3QgdG8gd2VpZ2h0IG1ldGVyaW5nIGFuZFEBYWdlbmRhIHNwYWNlLCBzYW1lIGFzIGEgcmVndWxhciB0YXNrLiBJZiBhIHBlcmlvZGljIHRhc2sgZmFpbHMsIGl0IHdpbGwgYmUgc2NoZWR1bGVkkG5vcm1hbGx5IHdoaWxlIHRoZSB0YXNrIGlzIHJldHJ5aW5nLgBRAVRhc2tzIHNjaGVkdWxlZCBhcyBhIHJlc3VsdCBvZiBhIHJldHJ5IGZvciBhIHBlcmlvZGljIHRhc2sgYXJlIHVubmFtZWQsIG5vbi1wZXJpb2RpYz0BY2xvbmVzIG9mIHRoZSBvcmlnaW5hbCB0YXNrLiBUaGVpciByZXRyeSBjb25maWd1cmF0aW9uIHdpbGwgYmUgZGVyaXZlZCBmcm9tIHRoZU0Bb3JpZ2luYWwgdGFzaydzIGNvbmZpZ3VyYXRpb24sIGJ1dCB3aWxsIGhhdmUgYSBsb3dlciB2YWx1ZSBmb3IgYHJlbWFpbmluZ2AgdGhhbiB0aGVkb3JpZ2luYWwgYHRvdGFsX3JldHJpZXNgLjxzZXRfcmV0cnlfbmFtZWQMAQhpZAQBIFRhc2tOYW1lAAEccmV0cmllcwgBCHU4AAEYcGVyaW9kEAFEQmxvY2tOdW1iZXJGb3I8VD4ABzBdAVNldCBhIHJldHJ5IGNvbmZpZ3VyYXRpb24gZm9yIGEgbmFtZWQgdGFzayBzbyB0aGF0LCBpbiBjYXNlIGl0cyBzY2hlZHVsZWQgcnVuIGZhaWxzLCBpdF0Bd2lsbCBiZSByZXRyaWVkIGFmdGVyIGBwZXJpb2RgIGJsb2NrcywgZm9yIGEgdG90YWwgYW1vdW50IG9mIGByZXRyaWVzYCByZXRyaWVzIG9yIHVudGlsMGl0IHN1Y2NlZWRzLgBVAVRhc2tzIHdoaWNoIG5lZWQgdG8gYmUgc2NoZWR1bGVkIGZvciBhIHJldHJ5IGFyZSBzdGlsbCBzdWJqZWN0IHRvIHdlaWdodCBtZXRlcmluZyBhbmRRAWFnZW5kYSBzcGFjZSwgc2FtZSBhcyBhIHJlZ3VsYXIgdGFzay4gSWYgYSBwZXJpb2RpYyB0YXNrIGZhaWxzLCBpdCB3aWxsIGJlIHNjaGVkdWxlZJBub3JtYWxseSB3aGlsZSB0aGUgdGFzayBpcyByZXRyeWluZy4AUQFUYXNrcyBzY2hlZHVsZWQgYXMgYSByZXN1bHQgb2YgYSByZXRyeSBmb3IgYSBwZXJpb2RpYyB0YXNrIGFyZSB1bm5hbWVkLCBub24tcGVyaW9kaWM9AWNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdGFzay4gVGhlaXIgcmV0cnkgY29uZmlndXJhdGlvbiB3aWxsIGJlIGRlcml2ZWQgZnJvbSB0aGVNAW9yaWdpbmFsIHRhc2sncyBjb25maWd1cmF0aW9uLCBidXQgd2lsbCBoYXZlIGEgbG93ZXIgdmFsdWUgZm9yIGByZW1haW5pbmdgIHRoYW4gdGhlZG9yaWdpbmFsIGB0b3RhbF9yZXRyaWVzYC4wY2FuY2VsX3JldHJ5BAEQdGFza4ABeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgAIBKhSZW1vdmVzIHRoZSByZXRyeSBjb25maWd1cmF0aW9uIG9mIGEgdGFzay5IY2FuY2VsX3JldHJ5X25hbWVkBAEIaWQEASBUYXNrTmFtZQAJBLxDYW5jZWwgdGhlIHJldHJ5IGNvbmZpZ3VyYXRpb24gb2YgYSBuYW1lZCB0YXNrLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6NAQQYT3B0aW9uBARUAYABCBBOb25lAAAAEFNvbWUEAIAAAAEAAJEBDDxwYWxsZXRfcHJlaW1hZ2UYcGFsbGV0EENhbGwEBFQAARQ0bm90ZV9wcmVpbWFnZQQBFGJ5dGVzOAEcVmVjPHU4PgAAEHRSZWdpc3RlciBhIHByZWltYWdlIG9uLWNoYWluLgBVAUlmIHRoZSBwcmVpbWFnZSB3YXMgcHJldmlvdXNseSByZXF1ZXN0ZWQsIG5vIGZlZXMgb3IgZGVwb3NpdHMgYXJlIHRha2VuIGZvciBwcm92aWRpbmdVAXRoZSBwcmVpbWFnZS4gT3RoZXJ3aXNlLCBhIGRlcG9zaXQgaXMgdGFrZW4gcHJvcG9ydGlvbmFsIHRvIHRoZSBzaXplIG9mIHRoZSBwcmVpbWFnZS48dW5ub3RlX3ByZWltYWdlBAEQaGFzaDQBHFQ6Okhhc2gAARjcQ2xlYXIgYW4gdW5yZXF1ZXN0ZWQgcHJlaW1hZ2UgZnJvbSB0aGUgcnVudGltZSBzdG9yYWdlLgD8SWYgYGxlbmAgaXMgcHJvdmlkZWQsIHRoZW4gaXQgd2lsbCBiZSBhIG11Y2ggY2hlYXBlciBvcGVyYXRpb24uAAEBLSBgaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBwcmVpbWFnZSB0byBiZSByZW1vdmVkIGZyb20gdGhlIHN0b3JlLrgtIGBsZW5gOiBUaGUgbGVuZ3RoIG9mIHRoZSBwcmVpbWFnZSBvZiBgaGFzaGAuQHJlcXVlc3RfcHJlaW1hZ2UEARBoYXNoNAEcVDo6SGFzaAACEEEBUmVxdWVzdCBhIHByZWltYWdlIGJlIHVwbG9hZGVkIHRvIHRoZSBjaGFpbiB3aXRob3V0IHBheWluZyBhbnkgZmVlcyBvciBkZXBvc2l0cy4AVQFJZiB0aGUgcHJlaW1hZ2UgcmVxdWVzdHMgaGFzIGFscmVhZHkgYmVlbiBwcm92aWRlZCBvbi1jaGFpbiwgd2UgdW5yZXNlcnZlIGFueSBkZXBvc2l0OQFhIHVzZXIgbWF5IGhhdmUgcGFpZCwgYW5kIHRha2UgdGhlIGNvbnRyb2wgb2YgdGhlIHByZWltYWdlIG91dCBvZiB0aGVpciBoYW5kcy5IdW5yZXF1ZXN0X3ByZWltYWdlBAEQaGFzaDQBHFQ6Okhhc2gAAwy8Q2xlYXIgYSBwcmV2aW91c2x5IG1hZGUgcmVxdWVzdCBmb3IgYSBwcmVpbWFnZS4ALQFOT1RFOiBUSElTIE1VU1QgTk9UIEJFIENBTExFRCBPTiBgaGFzaGAgTU9SRSBUSU1FUyBUSEFOIGByZXF1ZXN0X3ByZWltYWdlYC44ZW5zdXJlX3VwZGF0ZWQEARhoYXNoZXOVAQEwVmVjPFQ6Okhhc2g+AAQMxEVuc3VyZSB0aGF0IHRoZSBhIGJ1bGsgb2YgcHJlLWltYWdlcyBpcyB1cGdyYWRlZC4APQFUaGUgY2FsbGVyIHBheXMgbm8gZmVlIGlmIGF0IGxlYXN0IDkwJSBvZiBwcmUtaW1hZ2VzIHdlcmUgc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLpUBAAACNACZAQwscGFsbGV0X2JhYmUYcGFsbGV0EENhbGwEBFQAAQxMcmVwb3J0X2VxdWl2b2NhdGlvbggBSGVxdWl2b2NhdGlvbl9wcm9vZp0BAZBCb3g8RXF1aXZvY2F0aW9uUHJvb2Y8SGVhZGVyRm9yPFQ+Pj4AATxrZXlfb3duZXJfcHJvb2atAQFAVDo6S2V5T3duZXJQcm9vZgAAEAkBUmVwb3J0IGF1dGhvcml0eSBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5BQF0aGUgZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZg0BYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbDBiZSByZXBvcnRlZC5wcmVwb3J0X2VxdWl2b2NhdGlvbl91bnNpZ25lZAgBSGVxdWl2b2NhdGlvbl9wcm9vZp0BAZBCb3g8RXF1aXZvY2F0aW9uUHJvb2Y8SGVhZGVyRm9yPFQ+Pj4AATxrZXlfb3duZXJfcHJvb2atAQFAVDo6S2V5T3duZXJQcm9vZgABIAkBUmVwb3J0IGF1dGhvcml0eSBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5BQF0aGUgZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZg0BYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbDBiZSByZXBvcnRlZC4NAVRoaXMgZXh0cmluc2ljIG11c3QgYmUgY2FsbGVkIHVuc2lnbmVkIGFuZCBpdCBpcyBleHBlY3RlZCB0aGF0IG9ubHkVAWJsb2NrIGF1dGhvcnMgd2lsbCBjYWxsIGl0ICh2YWxpZGF0ZWQgaW4gYFZhbGlkYXRlVW5zaWduZWRgKSwgYXMgc3VjaBUBaWYgdGhlIGJsb2NrIGF1dGhvciBpcyBkZWZpbmVkIGl0IHdpbGwgYmUgZGVmaW5lZCBhcyB0aGUgZXF1aXZvY2F0aW9uJHJlcG9ydGVyLkhwbGFuX2NvbmZpZ19jaGFuZ2UEARhjb25maWexAQFQTmV4dENvbmZpZ0Rlc2NyaXB0b3IAAhBdAVBsYW4gYW4gZXBvY2ggY29uZmlnIGNoYW5nZS4gVGhlIGVwb2NoIGNvbmZpZyBjaGFuZ2UgaXMgcmVjb3JkZWQgYW5kIHdpbGwgYmUgZW5hY3RlZCBvblEBdGhlIG5leHQgY2FsbCB0byBgZW5hY3RfZXBvY2hfY2hhbmdlYC4gVGhlIGNvbmZpZyB3aWxsIGJlIGFjdGl2YXRlZCBvbmUgZXBvY2ggYWZ0ZXIuWQFNdWx0aXBsZSBjYWxscyB0byB0aGlzIG1ldGhvZCB3aWxsIHJlcGxhY2UgYW55IGV4aXN0aW5nIHBsYW5uZWQgY29uZmlnIGNoYW5nZSB0aGF0IGhhZFRub3QgYmVlbiBlbmFjdGVkIHlldC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMunQEISHNwX2NvbnNlbnN1c19zbG90c0RFcXVpdm9jYXRpb25Qcm9vZggYSGVhZGVyAaEBCElkAaUBABABIG9mZmVuZGVypQEBCElkAAEQc2xvdKkBARBTbG90AAEwZmlyc3RfaGVhZGVyoQEBGEhlYWRlcgABNHNlY29uZF9oZWFkZXKhAQEYSGVhZGVyAAChARAoc3BfcnVudGltZRxnZW5lcmljGGhlYWRlchhIZWFkZXIIGE51bWJlcgEQEEhhc2gAABQBLHBhcmVudF9oYXNoNAEwSGFzaDo6T3V0cHV0AAEYbnVtYmVy7AEYTnVtYmVyAAEoc3RhdGVfcm9vdDQBMEhhc2g6Ok91dHB1dAABPGV4dHJpbnNpY3Nfcm9vdDQBMEhhc2g6Ok91dHB1dAABGGRpZ2VzdDwBGERpZ2VzdAAApQEMRHNwX2NvbnNlbnN1c19iYWJlDGFwcBhQdWJsaWMAAAQABAE8c3IyNTUxOTo6UHVibGljAACpAQhIc3BfY29uc2Vuc3VzX3Nsb3RzEFNsb3QAAAQAMAEMdTY0AACtAQgoc3Bfc2Vzc2lvbjxNZW1iZXJzaGlwUHJvb2YAAAwBHHNlc3Npb24QATBTZXNzaW9uSW5kZXgAASh0cmllX25vZGVzhQEBMFZlYzxWZWM8dTg+PgABPHZhbGlkYXRvcl9jb3VudBABOFZhbGlkYXRvckNvdW50AACxAQxEc3BfY29uc2Vuc3VzX2JhYmUcZGlnZXN0c1BOZXh0Q29uZmlnRGVzY3JpcHRvcgABBAhWMQgBBGO1AQEoKHU2NCwgdTY0KQABNGFsbG93ZWRfc2xvdHO5AQEwQWxsb3dlZFNsb3RzAAEAALUBAAAECDAwALkBCERzcF9jb25zZW5zdXNfYmFiZTBBbGxvd2VkU2xvdHMAAQwwUHJpbWFyeVNsb3RzAAAAdFByaW1hcnlBbmRTZWNvbmRhcnlQbGFpblNsb3RzAAEAbFByaW1hcnlBbmRTZWNvbmRhcnlWUkZTbG90cwACAAC9AQxAcGFsbGV0X3RpbWVzdGFtcBhwYWxsZXQQQ2FsbAQEVAABBAxzZXQEAQxub3csASRUOjpNb21lbnQAAExUU2V0IHRoZSBjdXJyZW50IHRpbWUuAFUBVGhpcyBjYWxsIHNob3VsZCBiZSBpbnZva2VkIGV4YWN0bHkgb25jZSBwZXIgYmxvY2suIEl0IHdpbGwgcGFuaWMgYXQgdGhlIGZpbmFsaXphdGlvbtRwaGFzZSwgaWYgdGhpcyBjYWxsIGhhc24ndCBiZWVuIGludm9rZWQgYnkgdGhhdCB0aW1lLgBBAVRoZSB0aW1lc3RhbXAgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lIGJ5IHRoZSBhbW91bnQgc3BlY2lmaWVkIGJ5aFtgQ29uZmlnOjpNaW5pbXVtUGVyaW9kYF0uAMRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfTm9uZV8uAFEBVGhpcyBkaXNwYXRjaCBjbGFzcyBpcyBfTWFuZGF0b3J5XyB0byBlbnN1cmUgaXQgZ2V0cyBleGVjdXRlZCBpbiB0aGUgYmxvY2suIEJlIGF3YXJlUQF0aGF0IGNoYW5naW5nIHRoZSBjb21wbGV4aXR5IG9mIHRoaXMgY2FsbCBjb3VsZCByZXN1bHQgZXhoYXVzdGluZyB0aGUgcmVzb3VyY2VzIGluIGGEYmxvY2sgdG8gZXhlY3V0ZSBhbnkgb3RoZXIgY2FsbHMuADQjIyBDb21wbGV4aXR5MQEtIGBPKDEpYCAoTm90ZSB0aGF0IGltcGxlbWVudGF0aW9ucyBvZiBgT25UaW1lc3RhbXBTZXRgIG11c3QgYWxzbyBiZSBgTygxKWApVQEtIDEgc3RvcmFnZSByZWFkIGFuZCAxIHN0b3JhZ2UgbXV0YXRpb24gKGNvZGVjIGBPKDEpYCBiZWNhdXNlIG9mIGBEaWRVcGRhdGU6OnRha2VgIGluQCAgYG9uX2ZpbmFsaXplYCnULSAxIGV2ZW50IGhhbmRsZXIgYG9uX3RpbWVzdGFtcF9zZXRgLiBNdXN0IGJlIGBPKDEpYC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuwQEMOHBhbGxldF9pbmRpY2VzGHBhbGxldBBDYWxsBARUAAEUFGNsYWltBAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgAADCYQXNzaWduIGFuIHByZXZpb3VzbHkgdW5hc3NpZ25lZCBpbmRleC4A3FBheW1lbnQ6IGBEZXBvc2l0YCBpcyByZXNlcnZlZCBmcm9tIHRoZSBzZW5kZXIgYWNjb3VudC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgDwLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgY2xhaW1lZC4gVGhpcyBtdXN0IG5vdCBiZSBpbiB1c2UuAJBFbWl0cyBgSW5kZXhBc3NpZ25lZGAgaWYgc3VjY2Vzc2Z1bC4ANCMjIENvbXBsZXhpdHkkLSBgTygxKWAuIHRyYW5zZmVyCAEMbmV3xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgAATBdAUFzc2lnbiBhbiBpbmRleCBhbHJlYWR5IG93bmVkIGJ5IHRoZSBzZW5kZXIgdG8gYW5vdGhlciBhY2NvdW50LiBUaGUgYmFsYW5jZSByZXNlcnZhdGlvbrhpcyBlZmZlY3RpdmVseSB0cmFuc2ZlcnJlZCB0byB0aGUgbmV3IGFjY291bnQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AJQEtIGBpbmRleGA6IHRoZSBpbmRleCB0byBiZSByZS1hc3NpZ25lZC4gVGhpcyBtdXN0IGJlIG93bmVkIGJ5IHRoZSBzZW5kZXIuXQEtIGBuZXdgOiB0aGUgbmV3IG93bmVyIG9mIHRoZSBpbmRleC4gVGhpcyBmdW5jdGlvbiBpcyBhIG5vLW9wIGlmIGl0IGlzIGVxdWFsIHRvIHNlbmRlci4AkEVtaXRzIGBJbmRleEFzc2lnbmVkYCBpZiBzdWNjZXNzZnVsLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC4QZnJlZQQBFGluZGV4EAE8VDo6QWNjb3VudEluZGV4AAIwlEZyZWUgdXAgYW4gaW5kZXggb3duZWQgYnkgdGhlIHNlbmRlci4AXQFQYXltZW50OiBBbnkgcHJldmlvdXMgZGVwb3NpdCBwbGFjZWQgZm9yIHRoZSBpbmRleCBpcyB1bnJlc2VydmVkIGluIHRoZSBzZW5kZXIgYWNjb3VudC4AVQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IG93biB0aGUgaW5kZXguAA0BLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgZnJlZWQuIFRoaXMgbXVzdCBiZSBvd25lZCBieSB0aGUgc2VuZGVyLgCERW1pdHMgYEluZGV4RnJlZWRgIGlmIHN1Y2Nlc3NmdWwuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLjhmb3JjZV90cmFuc2ZlcgwBDG5ld8UBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFGluZGV4EAE8VDo6QWNjb3VudEluZGV4AAEYZnJlZXplIAEQYm9vbAADNFUBRm9yY2UgYW4gaW5kZXggdG8gYW4gYWNjb3VudC4gVGhpcyBkb2Vzbid0IHJlcXVpcmUgYSBkZXBvc2l0LiBJZiB0aGUgaW5kZXggaXMgYWxyZWFkeehoZWxkLCB0aGVuIGFueSBkZXBvc2l0IGlzIHJlaW1idXJzZWQgdG8gaXRzIGN1cnJlbnQgb3duZXIuAMRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8uAKQtIGBpbmRleGA6IHRoZSBpbmRleCB0byBiZSAocmUtKWFzc2lnbmVkLl0BLSBgbmV3YDogdGhlIG5ldyBvd25lciBvZiB0aGUgaW5kZXguIFRoaXMgZnVuY3Rpb24gaXMgYSBuby1vcCBpZiBpdCBpcyBlcXVhbCB0byBzZW5kZXIuQQEtIGBmcmVlemVgOiBpZiBzZXQgdG8gYHRydWVgLCB3aWxsIGZyZWV6ZSB0aGUgaW5kZXggc28gaXQgY2Fubm90IGJlIHRyYW5zZmVycmVkLgCQRW1pdHMgYEluZGV4QXNzaWduZWRgIGlmIHN1Y2Nlc3NmdWwuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLhhmcmVlemUEARRpbmRleBABPFQ6OkFjY291bnRJbmRleAAEMEEBRnJlZXplIGFuIGluZGV4IHNvIGl0IHdpbGwgYWx3YXlzIHBvaW50IHRvIHRoZSBzZW5kZXIgYWNjb3VudC4gVGhpcyBjb25zdW1lcyB0aGUgZGVwb3NpdC4AWQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNpZ25pbmcgYWNjb3VudCBtdXN0IGhhdmUgYWxub24tZnJvemVuIGFjY291bnQgYGluZGV4YC4ArC0gYGluZGV4YDogdGhlIGluZGV4IHRvIGJlIGZyb3plbiBpbiBwbGFjZS4AiEVtaXRzIGBJbmRleEZyb3plbmAgaWYgc3VjY2Vzc2Z1bC4ANCMjIENvbXBsZXhpdHkkLSBgTygxKWAuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLsUBDChzcF9ydW50aW1lMG11bHRpYWRkcmVzczBNdWx0aUFkZHJlc3MIJEFjY291bnRJZAEAMEFjY291bnRJbmRleAGMARQISWQEAAABJEFjY291bnRJZAAAABRJbmRleAQAyQEBMEFjY291bnRJbmRleAABAAxSYXcEADgBHFZlYzx1OD4AAgAkQWRkcmVzczMyBAAEASBbdTg7IDMyXQADACRBZGRyZXNzMjAEAPgBIFt1ODsgMjBdAAQAAMkBAAAGjADNAQw8cGFsbGV0X2JhbGFuY2VzGHBhbGxldBBDYWxsCARUAARJAAEkUHRyYW5zZmVyX2FsbG93X2RlYXRoCAEQZGVzdMUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFHZhbHVl/AEoVDo6QmFsYW5jZQAAHNRUcmFuc2ZlciBzb21lIGxpcXVpZCBmcmVlIGJhbGFuY2UgdG8gYW5vdGhlciBhY2NvdW50LgA1AWB0cmFuc2Zlcl9hbGxvd19kZWF0aGAgd2lsbCBzZXQgdGhlIGBGcmVlQmFsYW5jZWAgb2YgdGhlIHNlbmRlciBhbmQgcmVjZWl2ZXIuEQFJZiB0aGUgc2VuZGVyJ3MgYWNjb3VudCBpcyBiZWxvdyB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdCBhcyBhIHJlc3VsdLBvZiB0aGUgdHJhbnNmZXIsIHRoZSBhY2NvdW50IHdpbGwgYmUgcmVhcGVkLgAVAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGBTaWduZWRgIGJ5IHRoZSB0cmFuc2FjdG9yLjhmb3JjZV90cmFuc2ZlcgwBGHNvdXJjZcUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABEGRlc3TFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZfwBKFQ6OkJhbGFuY2UAAghhAUV4YWN0bHkgYXMgYHRyYW5zZmVyX2FsbG93X2RlYXRoYCwgZXhjZXB0IHRoZSBvcmlnaW4gbXVzdCBiZSByb290IGFuZCB0aGUgc291cmNlIGFjY291bnREbWF5IGJlIHNwZWNpZmllZC5MdHJhbnNmZXJfa2VlcF9hbGl2ZQgBEGRlc3TFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZfwBKFQ6OkJhbGFuY2UAAxhZAVNhbWUgYXMgdGhlIFtgdHJhbnNmZXJfYWxsb3dfZGVhdGhgXSBjYWxsLCBidXQgd2l0aCBhIGNoZWNrIHRoYXQgdGhlIHRyYW5zZmVyIHdpbGwgbm90YGtpbGwgdGhlIG9yaWdpbiBhY2NvdW50LgDoOTklIG9mIHRoZSB0aW1lIHlvdSB3YW50IFtgdHJhbnNmZXJfYWxsb3dfZGVhdGhgXSBpbnN0ZWFkLgDwW2B0cmFuc2Zlcl9hbGxvd19kZWF0aGBdOiBzdHJ1Y3QuUGFsbGV0Lmh0bWwjbWV0aG9kLnRyYW5zZmVyMHRyYW5zZmVyX2FsbAgBEGRlc3TFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAShrZWVwX2FsaXZlIAEQYm9vbAAEPAUBVHJhbnNmZXIgdGhlIGVudGlyZSB0cmFuc2ZlcmFibGUgYmFsYW5jZSBmcm9tIHRoZSBjYWxsZXIgYWNjb3VudC4AWQFOT1RFOiBUaGlzIGZ1bmN0aW9uIG9ubHkgYXR0ZW1wdHMgdG8gdHJhbnNmZXIgX3RyYW5zZmVyYWJsZV8gYmFsYW5jZXMuIFRoaXMgbWVhbnMgdGhhdGEBYW55IGxvY2tlZCwgcmVzZXJ2ZWQsIG9yIGV4aXN0ZW50aWFsIGRlcG9zaXRzICh3aGVuIGBrZWVwX2FsaXZlYCBpcyBgdHJ1ZWApLCB3aWxsIG5vdCBiZV0BdHJhbnNmZXJyZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoYXQgdGhpcyBmdW5jdGlvbiByZXN1bHRzIGluIGEga2lsbGVkIGFjY291bnQsRQF5b3UgbWlnaHQgbmVlZCB0byBwcmVwYXJlIHRoZSBhY2NvdW50IGJ5IHJlbW92aW5nIGFueSByZWZlcmVuY2UgY291bnRlcnMsIHN0b3JhZ2VAZGVwb3NpdHMsIGV0Yy4uLgDAVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBTaWduZWQuAKAtIGBkZXN0YDogVGhlIHJlY2lwaWVudCBvZiB0aGUgdHJhbnNmZXIuWQEtIGBrZWVwX2FsaXZlYDogQSBib29sZWFuIHRvIGRldGVybWluZSBpZiB0aGUgYHRyYW5zZmVyX2FsbGAgb3BlcmF0aW9uIHNob3VsZCBzZW5kIGFsbE0BICBvZiB0aGUgZnVuZHMgdGhlIGFjY291bnQgaGFzLCBjYXVzaW5nIHRoZSBzZW5kZXIgYWNjb3VudCB0byBiZSBraWxsZWQgKGZhbHNlKSwgb3JZASAgdHJhbnNmZXIgZXZlcnl0aGluZyBleGNlcHQgYXQgbGVhc3QgdGhlIGV4aXN0ZW50aWFsIGRlcG9zaXQsIHdoaWNoIHdpbGwgZ3VhcmFudGVlIHRvnCAga2VlcCB0aGUgc2VuZGVyIGFjY291bnQgYWxpdmUgKHRydWUpLjxmb3JjZV91bnJlc2VydmUIAQx3aG/FAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARhhbW91bnQYAShUOjpCYWxhbmNlAAUMsFVucmVzZXJ2ZSBzb21lIGJhbGFuY2UgZnJvbSBhIHVzZXIgYnkgZm9yY2UuAGxDYW4gb25seSBiZSBjYWxsZWQgYnkgUk9PVC5AdXBncmFkZV9hY2NvdW50cwQBDHdob9EBAURWZWM8VDo6QWNjb3VudElkPgAGIHBVcGdyYWRlIGEgc3BlY2lmaWVkIGFjY291bnQuAHQtIGBvcmlnaW5gOiBNdXN0IGJlIGBTaWduZWRgLpAtIGB3aG9gOiBUaGUgYWNjb3VudCB0byBiZSB1cGdyYWRlZC4AVQFUaGlzIHdpbGwgd2FpdmUgdGhlIHRyYW5zYWN0aW9uIGZlZSBpZiBhdCBsZWFzdCBhbGwgYnV0IDEwJSBvZiB0aGUgYWNjb3VudHMgbmVlZGVkIHRvQQFiZSB1cGdyYWRlZC4gKFdlIGxldCBzb21lIG5vdCBoYXZlIHRvIGJlIHVwZ3JhZGVkIGp1c3QgaW4gb3JkZXIgdG8gYWxsb3cgZm9yIHRoZVhwb3NzaWJpbGl0eSBvZiBjaHVybikuRGZvcmNlX3NldF9iYWxhbmNlCAEMd2hvxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEgbmV3X2ZyZWX8AShUOjpCYWxhbmNlAAgMrFNldCB0aGUgcmVndWxhciBiYWxhbmNlIG9mIGEgZ2l2ZW4gYWNjb3VudC4AsFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBpcyBgcm9vdGAubGZvcmNlX2FkanVzdF90b3RhbF9pc3N1YW5jZQgBJGRpcmVjdGlvbtUBAUxBZGp1c3RtZW50RGlyZWN0aW9uAAEUZGVsdGH8AShUOjpCYWxhbmNlAAkUuEFkanVzdCB0aGUgdG90YWwgaXNzdWFuY2UgaW4gYSBzYXR1cmF0aW5nIHdheS4A/ENhbiBvbmx5IGJlIGNhbGxlZCBieSByb290IGFuZCBhbHdheXMgbmVlZHMgYSBwb3NpdGl2ZSBgZGVsdGFgLgAkIyBFeGFtcGxlEGJ1cm4IARR2YWx1ZfwBKFQ6OkJhbGFuY2UAAShrZWVwX2FsaXZlIAEQYm9vbAAKHPxCdXJuIHRoZSBzcGVjaWZpZWQgbGlxdWlkIGZyZWUgYmFsYW5jZSBmcm9tIHRoZSBvcmlnaW4gYWNjb3VudC4AJQFJZiB0aGUgb3JpZ2luJ3MgYWNjb3VudCBlbmRzIHVwIGJlbG93IHRoZSBleGlzdGVudGlhbCBkZXBvc2l0IGFzIGEgcmVzdWx0CQFvZiB0aGUgYnVybiBhbmQgYGtlZXBfYWxpdmVgIGlzIGZhbHNlLCB0aGUgYWNjb3VudCB3aWxsIGJlIHJlYXBlZC4AUQFVbmxpa2Ugc2VuZGluZyBmdW5kcyB0byBhIF9idXJuXyBhZGRyZXNzLCB3aGljaCBtZXJlbHkgbWFrZXMgdGhlIGZ1bmRzIGluYWNjZXNzaWJsZSwhAXRoaXMgYGJ1cm5gIG9wZXJhdGlvbiB3aWxsIHJlZHVjZSB0b3RhbCBpc3N1YW5jZSBieSB0aGUgYW1vdW50IF9idXJuZWRfLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7RAQAAAgAA1QEMPHBhbGxldF9iYWxhbmNlcxR0eXBlc0xBZGp1c3RtZW50RGlyZWN0aW9uAAEIIEluY3JlYXNlAAAAIERlY3JlYXNlAAEAANkBEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0EENhbGwEBFQAAXgQYm9uZAgBFHZhbHVl/AEwQmFsYW5jZU9mPFQ+AAEUcGF5ZWWoAXxSZXdhcmREZXN0aW5hdGlvbjxUOjpBY2NvdW50SWQ+AABAYQFUYWtlIHRoZSBvcmlnaW4gYWNjb3VudCBhcyBhIHN0YXNoIGFuZCBsb2NrIHVwIGB2YWx1ZWAgb2YgaXRzIGJhbGFuY2UuIGBjb250cm9sbGVyYCB3aWxsgGJlIHRoZSBhY2NvdW50IHRoYXQgY29udHJvbHMgaXQuAC0BYHZhbHVlYCBtdXN0IGJlIG1vcmUgdGhhbiB0aGUgYG1pbmltdW1fYmFsYW5jZWAgc3BlY2lmaWVkIGJ5IGBUOjpDdXJyZW5jeWAuACEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIHN0YXNoIGFjY291bnQuADxFbWl0cyBgQm9uZGVkYC40IyMgQ29tcGxleGl0edAtIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIE1vZGVyYXRlIGNvbXBsZXhpdHkuHC0gTygxKS5kLSBUaHJlZSBleHRyYSBEQiBlbnRyaWVzLgBNAU5PVEU6IFR3byBvZiB0aGUgc3RvcmFnZSB3cml0ZXMgKGBTZWxmOjpib25kZWRgLCBgU2VsZjo6cGF5ZWVgKSBhcmUgX25ldmVyXyBjbGVhbmVkWQF1bmxlc3MgdGhlIGBvcmlnaW5gIGZhbGxzIGJlbG93IF9leGlzdGVudGlhbCBkZXBvc2l0XyAob3IgZXF1YWwgdG8gMCkgYW5kIGdldHMgcmVtb3ZlZCBhcyBkdXN0Lihib25kX2V4dHJhBAE4bWF4X2FkZGl0aW9uYWz8ATBCYWxhbmNlT2Y8VD4AAThhAUFkZCBzb21lIGV4dHJhIGFtb3VudCB0aGF0IGhhdmUgYXBwZWFyZWQgaW4gdGhlIHN0YXNoIGBmcmVlX2JhbGFuY2VgIGludG8gdGhlIGJhbGFuY2UgdXAwZm9yIHN0YWtpbmcuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIHN0YXNoLCBub3QgdGhlIGNvbnRyb2xsZXIuAE0BVXNlIHRoaXMgaWYgdGhlcmUgYXJlIGFkZGl0aW9uYWwgZnVuZHMgaW4geW91ciBzdGFzaCBhY2NvdW50IHRoYXQgeW91IHdpc2ggdG8gYm9uZC5VAVVubGlrZSBbYGJvbmRgXShTZWxmOjpib25kKSBvciBbYHVuYm9uZGBdKFNlbGY6OnVuYm9uZCkgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBpbXBvc2W8YW55IGxpbWl0YXRpb24gb24gdGhlIGFtb3VudCB0aGF0IGNhbiBiZSBhZGRlZC4APEVtaXRzIGBCb25kZWRgLgA0IyMgQ29tcGxleGl0eeQtIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS4cLSBPKDEpLhh1bmJvbmQEARR2YWx1ZfwBMEJhbGFuY2VPZjxUPgACTFEBU2NoZWR1bGUgYSBwb3J0aW9uIG9mIHRoZSBzdGFzaCB0byBiZSB1bmxvY2tlZCByZWFkeSBmb3IgdHJhbnNmZXIgb3V0IGFmdGVyIHRoZSBib25k/HBlcmlvZCBlbmRzLiBJZiB0aGlzIGxlYXZlcyBhbiBhbW91bnQgYWN0aXZlbHkgYm9uZGVkIGxlc3MgdGhhbiEBVDo6Q3VycmVuY3k6Om1pbmltdW1fYmFsYW5jZSgpLCB0aGVuIGl0IGlzIGluY3JlYXNlZCB0byB0aGUgZnVsbCBhbW91bnQuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guAEUBT25jZSB0aGUgdW5sb2NrIHBlcmlvZCBpcyBkb25lLCB5b3UgY2FuIGNhbGwgYHdpdGhkcmF3X3VuYm9uZGVkYCB0byBhY3R1YWxseSBtb3ZlvHRoZSBmdW5kcyBvdXQgb2YgbWFuYWdlbWVudCByZWFkeSBmb3IgdHJhbnNmZXIuADEBTm8gbW9yZSB0aGFuIGEgbGltaXRlZCBudW1iZXIgb2YgdW5sb2NraW5nIGNodW5rcyAoc2VlIGBNYXhVbmxvY2tpbmdDaHVua3NgKUEBY2FuIGNvLWV4aXN0cyBhdCB0aGUgc2FtZSB0aW1lLiBJZiB0aGVyZSBhcmUgbm8gdW5sb2NraW5nIGNodW5rcyBzbG90cyBhdmFpbGFibGVFAVtgQ2FsbDo6d2l0aGRyYXdfdW5ib25kZWRgXSBpcyBjYWxsZWQgdG8gcmVtb3ZlIHNvbWUgb2YgdGhlIGNodW5rcyAoaWYgcG9zc2libGUpLgA5AUlmIGEgdXNlciBlbmNvdW50ZXJzIHRoZSBgSW5zdWZmaWNpZW50Qm9uZGAgZXJyb3Igd2hlbiBjYWxsaW5nIHRoaXMgZXh0cmluc2ljLBkBdGhleSBzaG91bGQgY2FsbCBgY2hpbGxgIGZpcnN0IGluIG9yZGVyIHRvIGZyZWUgdXAgdGhlaXIgYm9uZGVkIGZ1bmRzLgBERW1pdHMgYFVuYm9uZGVkYC4AlFNlZSBhbHNvIFtgQ2FsbDo6d2l0aGRyYXdfdW5ib25kZWRgXS5Ed2l0aGRyYXdfdW5ib25kZWQEAUhudW1fc2xhc2hpbmdfc3BhbnMQAQx1MzIAA1wpAVJlbW92ZSBhbnkgdW5sb2NrZWQgY2h1bmtzIGZyb20gdGhlIGB1bmxvY2tpbmdgIHF1ZXVlIGZyb20gb3VyIG1hbmFnZW1lbnQuAFUBVGhpcyBlc3NlbnRpYWxseSBmcmVlcyB1cCB0aGF0IGJhbGFuY2UgdG8gYmUgdXNlZCBieSB0aGUgc3Rhc2ggYWNjb3VudCB0byBkbyB3aGF0ZXZlciRpdCB3YW50cy4AFQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlci4ASEVtaXRzIGBXaXRoZHJhd25gLgBoU2VlIGFsc28gW2BDYWxsOjp1bmJvbmRgXS4ANCMjIFBhcmFtZXRlcnMAUQEtIGBudW1fc2xhc2hpbmdfc3BhbnNgIGluZGljYXRlcyB0aGUgbnVtYmVyIG9mIG1ldGFkYXRhIHNsYXNoaW5nIHNwYW5zIHRvIGNsZWFyIHdoZW5VAXRoaXMgY2FsbCByZXN1bHRzIGluIGEgY29tcGxldGUgcmVtb3ZhbCBvZiBhbGwgdGhlIGRhdGEgcmVsYXRlZCB0byB0aGUgc3Rhc2ggYWNjb3VudC49AUluIHRoaXMgY2FzZSwgdGhlIGBudW1fc2xhc2hpbmdfc3BhbnNgIG11c3QgYmUgbGFyZ2VyIG9yIGVxdWFsIHRvIHRoZSBudW1iZXIgb2ZdAXNsYXNoaW5nIHNwYW5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3Rhc2ggYWNjb3VudCBpbiB0aGUgW2BTbGFzaGluZ1NwYW5zYF0gc3RvcmFnZSB0eXBlLCUBb3RoZXJ3aXNlIHRoZSBjYWxsIHdpbGwgZmFpbC4gVGhlIGNhbGwgd2VpZ2h0IGlzIGRpcmVjdGx5IHByb3BvcnRpb25hbCB0b1RgbnVtX3NsYXNoaW5nX3NwYW5zYC4ANCMjIENvbXBsZXhpdHnYTyhTKSB3aGVyZSBTIGlzIHRoZSBudW1iZXIgb2Ygc2xhc2hpbmcgc3BhbnMgdG8gcmVtb3ZlCQFOT1RFOiBXZWlnaHQgYW5ub3RhdGlvbiBpcyB0aGUga2lsbCBzY2VuYXJpbywgd2UgcmVmdW5kIG90aGVyd2lzZS4gdmFsaWRhdGUEARRwcmVmc7ABOFZhbGlkYXRvclByZWZzAAQU5ERlY2xhcmUgdGhlIGRlc2lyZSB0byB2YWxpZGF0ZSBmb3IgdGhlIG9yaWdpbiBjb250cm9sbGVyLgDYRWZmZWN0cyB3aWxsIGJlIGZlbHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBlcmEuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guIG5vbWluYXRlBAEcdGFyZ2V0c90BAWRWZWM8QWNjb3VudElkTG9va3VwT2Y8VD4+AAUoDQFEZWNsYXJlIHRoZSBkZXNpcmUgdG8gbm9taW5hdGUgYHRhcmdldHNgIGZvciB0aGUgb3JpZ2luIGNvbnRyb2xsZXIuANhFZmZlY3RzIHdpbGwgYmUgZmVsdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGVyYS4AUQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC4ANCMjIENvbXBsZXhpdHktAS0gVGhlIHRyYW5zYWN0aW9uJ3MgY29tcGxleGl0eSBpcyBwcm9wb3J0aW9uYWwgdG8gdGhlIHNpemUgb2YgYHRhcmdldHNgIChOKQUBd2hpY2ggaXMgY2FwcGVkIGF0IENvbXBhY3RBc3NpZ25tZW50czo6TElNSVQgKFQ6Ok1heE5vbWluYXRpb25zKS7ULSBCb3RoIHRoZSByZWFkcyBhbmQgd3JpdGVzIGZvbGxvdyBhIHNpbWlsYXIgcGF0dGVybi4UY2hpbGwABijERGVjbGFyZSBubyBkZXNpcmUgdG8gZWl0aGVyIHZhbGlkYXRlIG9yIG5vbWluYXRlLgDYRWZmZWN0cyB3aWxsIGJlIGZlbHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBlcmEuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guADQjIyBDb21wbGV4aXR55C0gSW5kZXBlbmRlbnQgb2YgdGhlIGFyZ3VtZW50cy4gSW5zaWduaWZpY2FudCBjb21wbGV4aXR5LlAtIENvbnRhaW5zIG9uZSByZWFkLsQtIFdyaXRlcyBhcmUgbGltaXRlZCB0byB0aGUgYG9yaWdpbmAgYWNjb3VudCBrZXkuJHNldF9wYXllZQQBFHBheWVlqAF8UmV3YXJkRGVzdGluYXRpb248VDo6QWNjb3VudElkPgAHMLQoUmUtKXNldCB0aGUgcGF5bWVudCB0YXJnZXQgZm9yIGEgY29udHJvbGxlci4AUQFFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS4AUQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC4ANCMjIENvbXBsZXhpdHkYLSBPKDEp5C0gSW5kZXBlbmRlbnQgb2YgdGhlIGFyZ3VtZW50cy4gSW5zaWduaWZpY2FudCBjb21wbGV4aXR5LpQtIENvbnRhaW5zIGEgbGltaXRlZCBudW1iZXIgb2YgcmVhZHMuxC0gV3JpdGVzIGFyZSBsaW1pdGVkIHRvIHRoZSBgb3JpZ2luYCBhY2NvdW50IGtleS4kLS0tLS0tLS0tOHNldF9jb250cm9sbGVyAAg4RQEoUmUtKXNldHMgdGhlIGNvbnRyb2xsZXIgb2YgYSBzdGFzaCB0byB0aGUgc3Rhc2ggaXRzZWxmLiBUaGlzIGZ1bmN0aW9uIHByZXZpb3VzbHlNAWFjY2VwdGVkIGEgYGNvbnRyb2xsZXJgIGFyZ3VtZW50IHRvIHNldCB0aGUgY29udHJvbGxlciB0byBhbiBhY2NvdW50IG90aGVyIHRoYW4gdGhlWQFzdGFzaCBpdHNlbGYuIFRoaXMgZnVuY3Rpb25hbGl0eSBoYXMgbm93IGJlZW4gcmVtb3ZlZCwgbm93IG9ubHkgc2V0dGluZyB0aGUgY29udHJvbGxlcox0byB0aGUgc3Rhc2gsIGlmIGl0IGlzIG5vdCBhbHJlYWR5LgBRAUVmZmVjdHMgd2lsbCBiZSBmZWx0IGluc3RhbnRseSAoYXMgc29vbiBhcyB0aGlzIGZ1bmN0aW9uIGlzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkpLgBRAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBzdGFzaCwgbm90IHRoZSBjb250cm9sbGVyLgA0IyMgQ29tcGxleGl0eRBPKDEp5C0gSW5kZXBlbmRlbnQgb2YgdGhlIGFyZ3VtZW50cy4gSW5zaWduaWZpY2FudCBjb21wbGV4aXR5LpQtIENvbnRhaW5zIGEgbGltaXRlZCBudW1iZXIgb2YgcmVhZHMuxC0gV3JpdGVzIGFyZSBsaW1pdGVkIHRvIHRoZSBgb3JpZ2luYCBhY2NvdW50IGtleS5Mc2V0X3ZhbGlkYXRvcl9jb3VudAQBDG5ld+wBDHUzMgAJGJBTZXRzIHRoZSBpZGVhbCBudW1iZXIgb2YgdmFsaWRhdG9ycy4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgA0IyMgQ29tcGxleGl0eRBPKDEpYGluY3JlYXNlX3ZhbGlkYXRvcl9jb3VudAQBKGFkZGl0aW9uYWzsAQx1MzIAChzoSW5jcmVtZW50cyB0aGUgaWRlYWwgbnVtYmVyIG9mIHZhbGlkYXRvcnMgdXAgdG8gbWF4aW11bSBvZoxgRWxlY3Rpb25Qcm92aWRlckJhc2U6Ok1heFdpbm5lcnNgLgCEVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuADQjIyBDb21wbGV4aXR5mFNhbWUgYXMgW2BTZWxmOjpzZXRfdmFsaWRhdG9yX2NvdW50YF0uVHNjYWxlX3ZhbGlkYXRvcl9jb3VudAQBGGZhY3RvcuEBARxQZXJjZW50AAscEQFTY2FsZSB1cCB0aGUgaWRlYWwgbnVtYmVyIG9mIHZhbGlkYXRvcnMgYnkgYSBmYWN0b3IgdXAgdG8gbWF4aW11bSBvZoxgRWxlY3Rpb25Qcm92aWRlckJhc2U6Ok1heFdpbm5lcnNgLgCEVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuADQjIyBDb21wbGV4aXR5mFNhbWUgYXMgW2BTZWxmOjpzZXRfdmFsaWRhdG9yX2NvdW50YF0uNGZvcmNlX25vX2VyYXMADDSsRm9yY2UgdGhlcmUgdG8gYmUgbm8gbmV3IGVyYXMgaW5kZWZpbml0ZWx5LgCEVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuACQjIFdhcm5pbmcAGQFUaGUgZWxlY3Rpb24gcHJvY2VzcyBzdGFydHMgbXVsdGlwbGUgYmxvY2tzIGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBlcmEuOQFUaHVzIHRoZSBlbGVjdGlvbiBwcm9jZXNzIG1heSBiZSBvbmdvaW5nIHdoZW4gdGhpcyBpcyBjYWxsZWQuIEluIHRoaXMgY2FzZSB0aGXcZWxlY3Rpb24gd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgbmV4dCBlcmEgaXMgdHJpZ2dlcmVkLgA0IyMgQ29tcGxleGl0eTwtIE5vIGFyZ3VtZW50cy44LSBXZWlnaHQ6IE8oMSk0Zm9yY2VfbmV3X2VyYQANOEkBRm9yY2UgdGhlcmUgdG8gYmUgYSBuZXcgZXJhIGF0IHRoZSBlbmQgb2YgdGhlIG5leHQgc2Vzc2lvbi4gQWZ0ZXIgdGhpcywgaXQgd2lsbCBiZZxyZXNldCB0byBub3JtYWwgKG5vbi1mb3JjZWQpIGJlaGF2aW91ci4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgAkIyBXYXJuaW5nABkBVGhlIGVsZWN0aW9uIHByb2Nlc3Mgc3RhcnRzIG11bHRpcGxlIGJsb2NrcyBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgZXJhLkkBSWYgdGhpcyBpcyBjYWxsZWQganVzdCBiZWZvcmUgYSBuZXcgZXJhIGlzIHRyaWdnZXJlZCwgdGhlIGVsZWN0aW9uIHByb2Nlc3MgbWF5IG5vdIxoYXZlIGVub3VnaCBibG9ja3MgdG8gZ2V0IGEgcmVzdWx0LgA0IyMgQ29tcGxleGl0eTwtIE5vIGFyZ3VtZW50cy44LSBXZWlnaHQ6IE8oMSlEc2V0X2ludnVsbmVyYWJsZXMEATRpbnZ1bG5lcmFibGVz0QEBRFZlYzxUOjpBY2NvdW50SWQ+AA4MyFNldCB0aGUgdmFsaWRhdG9ycyB3aG8gY2Fubm90IGJlIHNsYXNoZWQgKGlmIGFueSkuAIRUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC40Zm9yY2VfdW5zdGFrZQgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAFIbnVtX3NsYXNoaW5nX3NwYW5zEAEMdTMyAA8gCQFGb3JjZSBhIGN1cnJlbnQgc3Rha2VyIHRvIGJlY29tZSBjb21wbGV0ZWx5IHVuc3Rha2VkLCBpbW1lZGlhdGVseS4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgA0IyMgUGFyYW1ldGVycwBFAS0gYG51bV9zbGFzaGluZ19zcGFuc2A6IFJlZmVyIHRvIGNvbW1lbnRzIG9uIFtgQ2FsbDo6d2l0aGRyYXdfdW5ib25kZWRgXSBmb3IgbW9yZSBkZXRhaWxzLlBmb3JjZV9uZXdfZXJhX2Fsd2F5cwAQJAEBRm9yY2UgdGhlcmUgdG8gYmUgYSBuZXcgZXJhIGF0IHRoZSBlbmQgb2Ygc2Vzc2lvbnMgaW5kZWZpbml0ZWx5LgCEVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuACQjIFdhcm5pbmcAGQFUaGUgZWxlY3Rpb24gcHJvY2VzcyBzdGFydHMgbXVsdGlwbGUgYmxvY2tzIGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBlcmEuSQFJZiB0aGlzIGlzIGNhbGxlZCBqdXN0IGJlZm9yZSBhIG5ldyBlcmEgaXMgdHJpZ2dlcmVkLCB0aGUgZWxlY3Rpb24gcHJvY2VzcyBtYXkgbm90jGhhdmUgZW5vdWdoIGJsb2NrcyB0byBnZXQgYSByZXN1bHQuVGNhbmNlbF9kZWZlcnJlZF9zbGFzaAgBDGVyYRABIEVyYUluZGV4AAE0c2xhc2hfaW5kaWNlc+UBASBWZWM8dTMyPgARFJRDYW5jZWwgZW5hY3RtZW50IG9mIGEgZGVmZXJyZWQgc2xhc2guAJhDYW4gYmUgY2FsbGVkIGJ5IHRoZSBgVDo6QWRtaW5PcmlnaW5gLgABAVBhcmFtZXRlcnM6IGVyYSBhbmQgaW5kaWNlcyBvZiB0aGUgc2xhc2hlcyBmb3IgdGhhdCBlcmEgdG8ga2lsbC44cGF5b3V0X3N0YWtlcnMIATx2YWxpZGF0b3Jfc3Rhc2gAATBUOjpBY2NvdW50SWQAAQxlcmEQASBFcmFJbmRleAASNBkBUGF5IG91dCBuZXh0IHBhZ2Ugb2YgdGhlIHN0YWtlcnMgYmVoaW5kIGEgdmFsaWRhdG9yIGZvciB0aGUgZ2l2ZW4gZXJhLgDoLSBgdmFsaWRhdG9yX3N0YXNoYCBpcyB0aGUgc3Rhc2ggYWNjb3VudCBvZiB0aGUgdmFsaWRhdG9yLjEBLSBgZXJhYCBtYXkgYmUgYW55IGVyYSBiZXR3ZWVuIGBbY3VycmVudF9lcmEgLSBoaXN0b3J5X2RlcHRoOyBjdXJyZW50X2VyYV1gLgBVAVRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uIEFueSBhY2NvdW50IGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24sIGV2ZW4gaWZ0aXQgaXMgbm90IG9uZSBvZiB0aGUgc3Rha2Vycy4ASQFUaGUgcmV3YXJkIHBheW91dCBjb3VsZCBiZSBwYWdlZCBpbiBjYXNlIHRoZXJlIGFyZSB0b28gbWFueSBub21pbmF0b3JzIGJhY2tpbmcgdGhlXQFgdmFsaWRhdG9yX3N0YXNoYC4gVGhpcyBjYWxsIHdpbGwgcGF5b3V0IHVucGFpZCBwYWdlcyBpbiBhbiBhc2NlbmRpbmcgb3JkZXIuIFRvIGNsYWltIGG0c3BlY2lmaWMgcGFnZSwgdXNlIGBwYXlvdXRfc3Rha2Vyc19ieV9wYWdlYC5gAPBJZiBhbGwgcGFnZXMgYXJlIGNsYWltZWQsIGl0IHJldHVybnMgYW4gZXJyb3IgYEludmFsaWRQYWdlYC4YcmVib25kBAEUdmFsdWX8ATBCYWxhbmNlT2Y8VD4AExzcUmVib25kIGEgcG9ydGlvbiBvZiB0aGUgc3Rhc2ggc2NoZWR1bGVkIHRvIGJlIHVubG9ja2VkLgDUVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIHNpZ25lZCBieSB0aGUgY29udHJvbGxlci4ANCMjIENvbXBsZXhpdHnQLSBUaW1lIGNvbXBsZXhpdHk6IE8oTCksIHdoZXJlIEwgaXMgdW5sb2NraW5nIGNodW5rc4gtIEJvdW5kZWQgYnkgYE1heFVubG9ja2luZ0NodW5rc2AuKHJlYXBfc3Rhc2gIARRzdGFzaAABMFQ6OkFjY291bnRJZAABSG51bV9zbGFzaGluZ19zcGFucxABDHUzMgAUSF0BUmVtb3ZlIGFsbCBkYXRhIHN0cnVjdHVyZXMgY29uY2VybmluZyBhIHN0YWtlci9zdGFzaCBvbmNlIGl0IGlzIGF0IGEgc3RhdGUgd2hlcmUgaXQgY2FuBQFiZSBjb25zaWRlcmVkIGBkdXN0YCBpbiB0aGUgc3Rha2luZyBzeXN0ZW0uIFRoZSByZXF1aXJlbWVudHMgYXJlOgAFATEuIHRoZSBgdG90YWxfYmFsYW5jZWAgb2YgdGhlIHN0YXNoIGlzIGJlbG93IGV4aXN0ZW50aWFsIGRlcG9zaXQuEQEyLiBvciwgdGhlIGBsZWRnZXIudG90YWxgIG9mIHRoZSBzdGFzaCBpcyBiZWxvdyBleGlzdGVudGlhbCBkZXBvc2l0LmEBMy4gb3IsIGV4aXN0ZW50aWFsIGRlcG9zaXQgaXMgemVybyBhbmQgZWl0aGVyIGB0b3RhbF9iYWxhbmNlYCBvciBgbGVkZ2VyLnRvdGFsYCBpcyB6ZXJvLgBVAVRoZSBmb3JtZXIgY2FuIGhhcHBlbiBpbiBjYXNlcyBsaWtlIGEgc2xhc2g7IHRoZSBsYXR0ZXIgd2hlbiBhIGZ1bGx5IHVuYm9uZGVkIGFjY291bnQJAWlzIHN0aWxsIHJlY2VpdmluZyBzdGFraW5nIHJld2FyZHMgaW4gYFJld2FyZERlc3RpbmF0aW9uOjpTdGFrZWRgLgAxAUl0IGNhbiBiZSBjYWxsZWQgYnkgYW55b25lLCBhcyBsb25nIGFzIGBzdGFzaGAgbWVldHMgdGhlIGFib3ZlIHJlcXVpcmVtZW50cy4A3FJlZnVuZHMgdGhlIHRyYW5zYWN0aW9uIGZlZXMgdXBvbiBzdWNjZXNzZnVsIGV4ZWN1dGlvbi4ANCMjIFBhcmFtZXRlcnMARQEtIGBudW1fc2xhc2hpbmdfc3BhbnNgOiBSZWZlciB0byBjb21tZW50cyBvbiBbYENhbGw6OndpdGhkcmF3X3VuYm9uZGVkYF0gZm9yIG1vcmUgZGV0YWlscy4Qa2ljawQBDHdob90BAWRWZWM8QWNjb3VudElkTG9va3VwT2Y8VD4+ABUs4FJlbW92ZSB0aGUgZ2l2ZW4gbm9taW5hdGlvbnMgZnJvbSB0aGUgY2FsbGluZyB2YWxpZGF0b3IuANhFZmZlY3RzIHdpbGwgYmUgZmVsdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGVyYS4AUQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC4ATQEtIGB3aG9gOiBBIGxpc3Qgb2Ygbm9taW5hdG9yIHN0YXNoIGFjY291bnRzIHdobyBhcmUgbm9taW5hdGluZyB0aGlzIHZhbGlkYXRvciB3aGljaMAgIHNob3VsZCBubyBsb25nZXIgYmUgbm9taW5hdGluZyB0aGlzIHZhbGlkYXRvci4AVQFOb3RlOiBNYWtpbmcgdGhpcyBjYWxsIG9ubHkgbWFrZXMgc2Vuc2UgaWYgeW91IGZpcnN0IHNldCB0aGUgdmFsaWRhdG9yIHByZWZlcmVuY2VzIHRveGJsb2NrIGFueSBmdXJ0aGVyIG5vbWluYXRpb25zLkxzZXRfc3Rha2luZ19jb25maWdzHAFIbWluX25vbWluYXRvcl9ib25k6QEBWENvbmZpZ09wPEJhbGFuY2VPZjxUPj4AAUhtaW5fdmFsaWRhdG9yX2JvbmTpAQFYQ29uZmlnT3A8QmFsYW5jZU9mPFQ+PgABTG1heF9ub21pbmF0b3JfY291bnTtAQE0Q29uZmlnT3A8dTMyPgABTG1heF92YWxpZGF0b3JfY291bnTtAQE0Q29uZmlnT3A8dTMyPgABPGNoaWxsX3RocmVzaG9sZPEBAURDb25maWdPcDxQZXJjZW50PgABOG1pbl9jb21taXNzaW9u9QEBRENvbmZpZ09wPFBlcmJpbGw+AAFIbWF4X3N0YWtlZF9yZXdhcmRz8QEBRENvbmZpZ09wPFBlcmNlbnQ+ABZErFVwZGF0ZSB0aGUgdmFyaW91cyBzdGFraW5nIGNvbmZpZ3VyYXRpb25zIC4AJQEqIGBtaW5fbm9taW5hdG9yX2JvbmRgOiBUaGUgbWluaW11bSBhY3RpdmUgYm9uZCBuZWVkZWQgdG8gYmUgYSBub21pbmF0b3IuJQEqIGBtaW5fdmFsaWRhdG9yX2JvbmRgOiBUaGUgbWluaW11bSBhY3RpdmUgYm9uZCBuZWVkZWQgdG8gYmUgYSB2YWxpZGF0b3IuVQEqIGBtYXhfbm9taW5hdG9yX2NvdW50YDogVGhlIG1heCBudW1iZXIgb2YgdXNlcnMgd2hvIGNhbiBiZSBhIG5vbWluYXRvciBhdCBvbmNlLiBXaGVumCAgc2V0IHRvIGBOb25lYCwgbm8gbGltaXQgaXMgZW5mb3JjZWQuVQEqIGBtYXhfdmFsaWRhdG9yX2NvdW50YDogVGhlIG1heCBudW1iZXIgb2YgdXNlcnMgd2hvIGNhbiBiZSBhIHZhbGlkYXRvciBhdCBvbmNlLiBXaGVumCAgc2V0IHRvIGBOb25lYCwgbm8gbGltaXQgaXMgZW5mb3JjZWQuWQEqIGBjaGlsbF90aHJlc2hvbGRgOiBUaGUgcmF0aW8gb2YgYG1heF9ub21pbmF0b3JfY291bnRgIG9yIGBtYXhfdmFsaWRhdG9yX2NvdW50YCB3aGljaBkBICBzaG91bGQgYmUgZmlsbGVkIGluIG9yZGVyIGZvciB0aGUgYGNoaWxsX290aGVyYCB0cmFuc2FjdGlvbiB0byB3b3JrLmEBKiBgbWluX2NvbW1pc3Npb25gOiBUaGUgbWluaW11bSBhbW91bnQgb2YgY29tbWlzc2lvbiB0aGF0IGVhY2ggdmFsaWRhdG9ycyBtdXN0IG1haW50YWluLlUBICBUaGlzIGlzIGNoZWNrZWQgb25seSB1cG9uIGNhbGxpbmcgYHZhbGlkYXRlYC4gRXhpc3RpbmcgdmFsaWRhdG9ycyBhcmUgbm90IGFmZmVjdGVkLgDEUnVudGltZU9yaWdpbiBtdXN0IGJlIFJvb3QgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uLgA1AU5PVEU6IEV4aXN0aW5nIG5vbWluYXRvcnMgYW5kIHZhbGlkYXRvcnMgd2lsbCBub3QgYmUgYWZmZWN0ZWQgYnkgdGhpcyB1cGRhdGUuEQF0byBraWNrIHBlb3BsZSB1bmRlciB0aGUgbmV3IGxpbWl0cywgYGNoaWxsX290aGVyYCBzaG91bGQgYmUgY2FsbGVkLixjaGlsbF9vdGhlcgQBFHN0YXNoAAEwVDo6QWNjb3VudElkABdoQQFEZWNsYXJlIGEgYGNvbnRyb2xsZXJgIHRvIHN0b3AgcGFydGljaXBhdGluZyBhcyBlaXRoZXIgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yLgDYRWZmZWN0cyB3aWxsIGJlIGZlbHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBlcmEuAEEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8sIGJ1dCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZS4AWQFJZiB0aGUgY2FsbGVyIGlzIHRoZSBzYW1lIGFzIHRoZSBjb250cm9sbGVyIGJlaW5nIHRhcmdldGVkLCB0aGVuIG5vIGZ1cnRoZXIgY2hlY2tzIGFyZdhlbmZvcmNlZCwgYW5kIHRoaXMgZnVuY3Rpb24gYmVoYXZlcyBqdXN0IGxpa2UgYGNoaWxsYC4AXQFJZiB0aGUgY2FsbGVyIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBjb250cm9sbGVyIGJlaW5nIHRhcmdldGVkLCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMwbXVzdCBiZSBtZXQ6AB0BKiBgY29udHJvbGxlcmAgbXVzdCBiZWxvbmcgdG8gYSBub21pbmF0b3Igd2hvIGhhcyBiZWNvbWUgbm9uLWRlY29kYWJsZSwADE9yOgA9ASogQSBgQ2hpbGxUaHJlc2hvbGRgIG11c3QgYmUgc2V0IGFuZCBjaGVja2VkIHdoaWNoIGRlZmluZXMgaG93IGNsb3NlIHRvIHRoZSBtYXhVASAgbm9taW5hdG9ycyBvciB2YWxpZGF0b3JzIHdlIG11c3QgcmVhY2ggYmVmb3JlIHVzZXJzIGNhbiBzdGFydCBjaGlsbGluZyBvbmUtYW5vdGhlci5ZASogQSBgTWF4Tm9taW5hdG9yQ291bnRgIGFuZCBgTWF4VmFsaWRhdG9yQ291bnRgIG11c3QgYmUgc2V0IHdoaWNoIGlzIHVzZWQgdG8gZGV0ZXJtaW5lkCAgaG93IGNsb3NlIHdlIGFyZSB0byB0aGUgdGhyZXNob2xkLl0BKiBBIGBNaW5Ob21pbmF0b3JCb25kYCBhbmQgYE1pblZhbGlkYXRvckJvbmRgIG11c3QgYmUgc2V0IGFuZCBjaGVja2VkLCB3aGljaCBkZXRlcm1pbmVzUQEgIGlmIHRoaXMgaXMgYSBwZXJzb24gdGhhdCBzaG91bGQgYmUgY2hpbGxlZCBiZWNhdXNlIHRoZXkgaGF2ZSBub3QgbWV0IHRoZSB0aHJlc2hvbGRAICBib25kIHJlcXVpcmVkLgBVAVRoaXMgY2FuIGJlIGhlbHBmdWwgaWYgYm9uZCByZXF1aXJlbWVudHMgYXJlIHVwZGF0ZWQsIGFuZCB3ZSBuZWVkIHRvIHJlbW92ZSBvbGQgdXNlcnOYd2hvIGRvIG5vdCBzYXRpc2Z5IHRoZXNlIHJlcXVpcmVtZW50cy5oZm9yY2VfYXBwbHlfbWluX2NvbW1pc3Npb24EATx2YWxpZGF0b3Jfc3Rhc2gAATBUOjpBY2NvdW50SWQAGAxFAUZvcmNlIGEgdmFsaWRhdG9yIHRvIGhhdmUgYXQgbGVhc3QgdGhlIG1pbmltdW0gY29tbWlzc2lvbi4gVGhpcyB3aWxsIG5vdCBhZmZlY3QgYWEBdmFsaWRhdG9yIHdobyBhbHJlYWR5IGhhcyBhIGNvbW1pc3Npb24gZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBtaW5pbXVtLiBBbnkgYWNjb3VudDhjYW4gY2FsbCB0aGlzLkhzZXRfbWluX2NvbW1pc3Npb24EAQxuZXesARxQZXJiaWxsABkQJQFTZXRzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBjb21taXNzaW9uIHRoYXQgZWFjaCB2YWxpZGF0b3JzIG11c3QgbWFpbnRhaW4uAFkBVGhpcyBjYWxsIGhhcyBsb3dlciBwcml2aWxlZ2UgcmVxdWlyZW1lbnRzIHRoYW4gYHNldF9zdGFraW5nX2NvbmZpZ2AgYW5kIGNhbiBiZSBjYWxsZWTMYnkgdGhlIGBUOjpBZG1pbk9yaWdpbmAuIFJvb3QgY2FuIGFsd2F5cyBjYWxsIHRoaXMuWHBheW91dF9zdGFrZXJzX2J5X3BhZ2UMATx2YWxpZGF0b3Jfc3Rhc2gAATBUOjpBY2NvdW50SWQAAQxlcmEQASBFcmFJbmRleAABEHBhZ2UQARBQYWdlABpEMQFQYXkgb3V0IGEgcGFnZSBvZiB0aGUgc3Rha2VycyBiZWhpbmQgYSB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcmEgYW5kIHBhZ2UuAOgtIGB2YWxpZGF0b3Jfc3Rhc2hgIGlzIHRoZSBzdGFzaCBhY2NvdW50IG9mIHRoZSB2YWxpZGF0b3IuMQEtIGBlcmFgIG1heSBiZSBhbnkgZXJhIGJldHdlZW4gYFtjdXJyZW50X2VyYSAtIGhpc3RvcnlfZGVwdGg7IGN1cnJlbnRfZXJhXWAuMQEtIGBwYWdlYCBpcyB0aGUgcGFnZSBpbmRleCBvZiBub21pbmF0b3JzIHRvIHBheSBvdXQgd2l0aCB2YWx1ZSBiZXR3ZWVuIDAgYW5ksCAgYG51bV9ub21pbmF0b3JzIC8gVDo6TWF4RXhwb3N1cmVQYWdlU2l6ZWAuAFUBVGhlIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4gQW55IGFjY291bnQgY2FuIGNhbGwgdGhpcyBmdW5jdGlvbiwgZXZlbiBpZnRpdCBpcyBub3Qgb25lIG9mIHRoZSBzdGFrZXJzLgA9AUlmIGEgdmFsaWRhdG9yIGhhcyBtb3JlIHRoYW4gW2BDb25maWc6Ok1heEV4cG9zdXJlUGFnZVNpemVgXSBub21pbmF0b3JzIGJhY2tpbmcpAXRoZW0sIHRoZW4gdGhlIGxpc3Qgb2Ygbm9taW5hdG9ycyBpcyBwYWdlZCwgd2l0aCBlYWNoIHBhZ2UgYmVpbmcgY2FwcGVkIGF0VQFbYENvbmZpZzo6TWF4RXhwb3N1cmVQYWdlU2l6ZWAuXSBJZiBhIHZhbGlkYXRvciBoYXMgbW9yZSB0aGFuIG9uZSBwYWdlIG9mIG5vbWluYXRvcnMsSQF0aGUgY2FsbCBuZWVkcyB0byBiZSBtYWRlIGZvciBlYWNoIHBhZ2Ugc2VwYXJhdGVseSBpbiBvcmRlciBmb3IgYWxsIHRoZSBub21pbmF0b3JzVQFiYWNraW5nIGEgdmFsaWRhdG9yIHRvIHJlY2VpdmUgdGhlIHJld2FyZC4gVGhlIG5vbWluYXRvcnMgYXJlIG5vdCBzb3J0ZWQgYWNyb3NzIHBhZ2VzYQFhbmQgc28gaXQgc2hvdWxkIG5vdCBiZSBhc3N1bWVkIHRoZSBoaWdoZXN0IHN0YWtlciB3b3VsZCBiZSBvbiB0aGUgdG9wbW9zdCBwYWdlIGFuZCB2aWNlSQF2ZXJzYS4gSWYgcmV3YXJkcyBhcmUgbm90IGNsYWltZWQgaW4gW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMsIHRoZXkgYXJlIGxvc3QuMHVwZGF0ZV9wYXllZQQBKGNvbnRyb2xsZXIAATBUOjpBY2NvdW50SWQAGxjgTWlncmF0ZXMgYW4gYWNjb3VudCdzIGBSZXdhcmREZXN0aW5hdGlvbjo6Q29udHJvbGxlcmAgdG+kYFJld2FyZERlc3RpbmF0aW9uOjpBY2NvdW50KGNvbnRyb2xsZXIpYC4AUQFFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS4AMQFUaGlzIHdpbGwgd2FpdmUgdGhlIHRyYW5zYWN0aW9uIGZlZSBpZiB0aGUgYHBheWVlYCBpcyBzdWNjZXNzZnVsbHkgbWlncmF0ZWQuaGRlcHJlY2F0ZV9jb250cm9sbGVyX2JhdGNoBAEsY29udHJvbGxlcnP5AQH0Qm91bmRlZFZlYzxUOjpBY2NvdW50SWQsIFQ6Ok1heENvbnRyb2xsZXJzSW5EZXByZWNhdGlvbkJhdGNoPgAcHF0BVXBkYXRlcyBhIGJhdGNoIG9mIGNvbnRyb2xsZXIgYWNjb3VudHMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBzdGFzaCBhY2NvdW50IGlmIHRoZXkgYXJlYQFub3QgdGhlIHNhbWUuIElnbm9yZXMgYW55IGNvbnRyb2xsZXIgYWNjb3VudHMgdGhhdCBkbyBub3QgZXhpc3QsIGFuZCBkb2VzIG5vdCBvcGVyYXRlIGlmuHRoZSBzdGFzaCBhbmQgY29udHJvbGxlciBhcmUgYWxyZWFkeSB0aGUgc2FtZS4AUQFFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS4AtFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBgVDo6QWRtaW5PcmlnaW5gLjhyZXN0b3JlX2xlZGdlchABFHN0YXNoAAEwVDo6QWNjb3VudElkAAFAbWF5YmVfY29udHJvbGxlcv0BAVBPcHRpb248VDo6QWNjb3VudElkPgABLG1heWJlX3RvdGFsAQIBUE9wdGlvbjxCYWxhbmNlT2Y8VD4+AAE8bWF5YmVfdW5sb2NraW5nBQIBFQFPcHRpb248Qm91bmRlZFZlYzxVbmxvY2tDaHVuazxCYWxhbmNlT2Y8VD4+LCBUOjoKTWF4VW5sb2NraW5nQ2h1bmtzPj4AHSwFAVJlc3RvcmVzIHRoZSBzdGF0ZSBvZiBhIGxlZGdlciB3aGljaCBpcyBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuANxUaGUgcmVxdWlyZW1lbnRzIHRvIHJlc3RvcmUgYSBsZWRnZXIgYXJlIHRoZSBmb2xsb3dpbmc6ZCogVGhlIHN0YXNoIGlzIGJvbmRlZDsgb3INASogVGhlIHN0YXNoIGlzIG5vdCBib25kZWQgYnV0IGl0IGhhcyBhIHN0YWtpbmcgbG9jayBsZWZ0IGJlaGluZDsgb3IlASogSWYgdGhlIHN0YXNoIGhhcyBhbiBhc3NvY2lhdGVkIGxlZGdlciBhbmQgaXRzIHN0YXRlIGlzIGluY29uc2lzdGVudDsgb3IdASogSWYgdGhlIGxlZGdlciBpcyBub3QgY29ycnVwdGVkICpidXQqIGl0cyBzdGFraW5nIGxvY2sgaXMgb3V0IG9mIHN5bmMuAGEBVGhlIGBtYXliZV8qYCBpbnB1dCBwYXJhbWV0ZXJzIHdpbGwgb3ZlcndyaXRlIHRoZSBjb3JyZXNwb25kaW5nIGRhdGEgYW5kIG1ldGFkYXRhIG9mIHRoZVkBbGVkZ2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3Rhc2guIElmIHRoZSBpbnB1dCBwYXJhbWV0ZXJzIGFyZSBub3Qgc2V0LCB0aGUgbGVkZ2VyIHdpbGyQYmUgcmVzZXQgdmFsdWVzIGZyb20gb24tY2hhaW4gc3RhdGUuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLt0BAAACxQEA4QEMNHNwX2FyaXRobWV0aWMocGVyX3RoaW5ncxxQZXJjZW50AAAEAAgBCHU4AADlAQAAAhAA6QEQOHBhbGxldF9zdGFraW5nGHBhbGxldBhwYWxsZXQgQ29uZmlnT3AEBFQBGAEMEE5vb3AAAAAMU2V0BAAYAQRUAAEAGFJlbW92ZQACAADtARA4cGFsbGV0X3N0YWtpbmcYcGFsbGV0GHBhbGxldCBDb25maWdPcAQEVAEQAQwQTm9vcAAAAAxTZXQEABABBFQAAQAYUmVtb3ZlAAIAAPEBEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0IENvbmZpZ09wBARUAeEBAQwQTm9vcAAAAAxTZXQEAOEBAQRUAAEAGFJlbW92ZQACAAD1ARA4cGFsbGV0X3N0YWtpbmcYcGFsbGV0GHBhbGxldCBDb25maWdPcAQEVAGsAQwQTm9vcAAAAAxTZXQEAKwBBFQAAQAYUmVtb3ZlAAIAAPkBDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBAARTAAAEANEBARhWZWM8VD4AAP0BBBhPcHRpb24EBFQBAAEIEE5vbmUAAAAQU29tZQQAAAAAAQAAAQIEGE9wdGlvbgQEVAEYAQgQTm9uZQAAABBTb21lBAAYAAABAAAFAgQYT3B0aW9uBARUAQkCAQgQTm9uZQAAABBTb21lBAAJAgAAAQAACQIMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAENAgRTAAAEABECARhWZWM8VD4AAA0CCDhwYWxsZXRfc3Rha2luZyxVbmxvY2tDaHVuawQcQmFsYW5jZQEYAAgBFHZhbHVl/AEcQmFsYW5jZQABDGVyYewBIEVyYUluZGV4AAARAgAAAg0CABUCDDhwYWxsZXRfc2Vzc2lvbhhwYWxsZXQQQ2FsbAQEVAABCCBzZXRfa2V5cwgBEGtleXMZAgEcVDo6S2V5cwABFHByb29mOAEcVmVjPHU4PgAAJORTZXRzIHRoZSBzZXNzaW9uIGtleShzKSBvZiB0aGUgZnVuY3Rpb24gY2FsbGVyIHRvIGBrZXlzYC4dAUFsbG93cyBhbiBhY2NvdW50IHRvIHNldCBpdHMgc2Vzc2lvbiBrZXkgcHJpb3IgdG8gYmVjb21pbmcgYSB2YWxpZGF0b3IuwFRoaXMgZG9lc24ndCB0YWtlIGVmZmVjdCB1bnRpbCB0aGUgbmV4dCBzZXNzaW9uLgDQVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgc2lnbmVkLgA0IyMgQ29tcGxleGl0eVkBLSBgTygxKWAuIEFjdHVhbCBjb3N0IGRlcGVuZHMgb24gdGhlIG51bWJlciBvZiBsZW5ndGggb2YgYFQ6OktleXM6OmtleV9pZHMoKWAgd2hpY2ggaXMgICBmaXhlZC4ocHVyZ2Vfa2V5cwABMMhSZW1vdmVzIGFueSBzZXNzaW9uIGtleShzKSBvZiB0aGUgZnVuY3Rpb24gY2FsbGVyLgDAVGhpcyBkb2Vzbid0IHRha2UgZWZmZWN0IHVudGlsIHRoZSBuZXh0IHNlc3Npb24uAFUBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgU2lnbmVkIGFuZCB0aGUgYWNjb3VudCBtdXN0IGJlIGVpdGhlciBiZV0BY29udmVydGlibGUgdG8gYSB2YWxpZGF0b3IgSUQgdXNpbmcgdGhlIGNoYWluJ3MgdHlwaWNhbCBhZGRyZXNzaW5nIHN5c3RlbSAodGhpcyB1c3VhbGx5UQFtZWFucyBiZWluZyBhIGNvbnRyb2xsZXIgYWNjb3VudCkgb3IgZGlyZWN0bHkgY29udmVydGlibGUgaW50byBhIHZhbGlkYXRvciBJRCAod2hpY2iUdXN1YWxseSBtZWFucyBiZWluZyBhIHN0YXNoIGFjY291bnQpLgA0IyMgQ29tcGxleGl0eT0BLSBgTygxKWAgaW4gbnVtYmVyIG9mIGtleSB0eXBlcy4gQWN0dWFsIGNvc3QgZGVwZW5kcyBvbiB0aGUgbnVtYmVyIG9mIGxlbmd0aCBvZpggIGBUOjpLZXlzOjprZXlfaWRzKClgIHdoaWNoIGlzIGZpeGVkLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy4ZAghAcG9sa2Fkb3RfcnVudGltZSxTZXNzaW9uS2V5cwAAGAEcZ3JhbmRwYdQB0DxHcmFuZHBhIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWMAARBiYWJlpQEBxDxCYWJlIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWMAAThwYXJhX3ZhbGlkYXRvch0CAeA8SW5pdGlhbGl6ZXIgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpYwABPHBhcmFfYXNzaWdubWVudCECAfA8UGFyYVNlc3Npb25JbmZvIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWMAAUxhdXRob3JpdHlfZGlzY292ZXJ5JQIB/DxBdXRob3JpdHlEaXNjb3ZlcnkgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpYwABFGJlZWZ5KQIByDxCZWVmeSBhcyAkY3JhdGU6OkJvdW5kVG9SdW50aW1lQXBwUHVibGljPjo6UHVibGljAAAdAhBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NzR2YWxpZGF0b3JfYXBwGFB1YmxpYwAABAAEATxzcjI1NTE5OjpQdWJsaWMAACECEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3OGFzc2lnbm1lbnRfYXBwGFB1YmxpYwAABAAEATxzcjI1NTE5OjpQdWJsaWMAACUCDFhzcF9hdXRob3JpdHlfZGlzY292ZXJ5DGFwcBhQdWJsaWMAAAQABAE8c3IyNTUxOTo6UHVibGljAAApAgxIc3BfY29uc2Vuc3VzX2JlZWZ5MGVjZHNhX2NyeXB0bxhQdWJsaWMAAAQALQIBNGVjZHNhOjpQdWJsaWMAAC0CAAADIQAAAAgAMQIMOHBhbGxldF9ncmFuZHBhGHBhbGxldBBDYWxsBARUAAEMTHJlcG9ydF9lcXVpdm9jYXRpb24IAUhlcXVpdm9jYXRpb25fcHJvb2Y1AgHIQm94PEVxdWl2b2NhdGlvblByb29mPFQ6Okhhc2gsIEJsb2NrTnVtYmVyRm9yPFQ+Pj4AATxrZXlfb3duZXJfcHJvb2atAQFAVDo6S2V5T3duZXJQcm9vZgAAEAkBUmVwb3J0IHZvdGVyIGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhl9GVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2b4YWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2VEd2lsbCBiZSByZXBvcnRlZC5wcmVwb3J0X2VxdWl2b2NhdGlvbl91bnNpZ25lZAgBSGVxdWl2b2NhdGlvbl9wcm9vZjUCAchCb3g8RXF1aXZvY2F0aW9uUHJvb2Y8VDo6SGFzaCwgQmxvY2tOdW1iZXJGb3I8VD4+PgABPGtleV9vd25lcl9wcm9vZq0BAUBUOjpLZXlPd25lclByb29mAAEkCQFSZXBvcnQgdm90ZXIgZXF1aXZvY2F0aW9uL21pc2JlaGF2aW9yLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeSB0aGX0ZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZvhhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZUR3aWxsIGJlIHJlcG9ydGVkLgANAVRoaXMgZXh0cmluc2ljIG11c3QgYmUgY2FsbGVkIHVuc2lnbmVkIGFuZCBpdCBpcyBleHBlY3RlZCB0aGF0IG9ubHkVAWJsb2NrIGF1dGhvcnMgd2lsbCBjYWxsIGl0ICh2YWxpZGF0ZWQgaW4gYFZhbGlkYXRlVW5zaWduZWRgKSwgYXMgc3VjaBUBaWYgdGhlIGJsb2NrIGF1dGhvciBpcyBkZWZpbmVkIGl0IHdpbGwgYmUgZGVmaW5lZCBhcyB0aGUgZXF1aXZvY2F0aW9uJHJlcG9ydGVyLjBub3RlX3N0YWxsZWQIARRkZWxheRABREJsb2NrTnVtYmVyRm9yPFQ+AAFsYmVzdF9maW5hbGl6ZWRfYmxvY2tfbnVtYmVyEAFEQmxvY2tOdW1iZXJGb3I8VD4AAjA9AU5vdGUgdGhhdCB0aGUgY3VycmVudCBhdXRob3JpdHkgc2V0IG9mIHRoZSBHUkFORFBBIGZpbmFsaXR5IGdhZGdldCBoYXMgc3RhbGxlZC4AYQFUaGlzIHdpbGwgdHJpZ2dlciBhIGZvcmNlZCBhdXRob3JpdHkgc2V0IGNoYW5nZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IHNlc3Npb24sIHRvYQFiZSBlbmFjdGVkIGBkZWxheWAgYmxvY2tzIGFmdGVyIHRoYXQuIFRoZSBgZGVsYXlgIHNob3VsZCBiZSBoaWdoIGVub3VnaCB0byBzYWZlbHkgYXNzdW1lSQF0aGF0IHRoZSBibG9jayBzaWduYWxsaW5nIHRoZSBmb3JjZWQgY2hhbmdlIHdpbGwgbm90IGJlIHJlLW9yZ2VkIGUuZy4gMTAwMCBibG9ja3MuXQFUaGUgYmxvY2sgcHJvZHVjdGlvbiByYXRlICh3aGljaCBtYXkgYmUgc2xvd2VkIGRvd24gYmVjYXVzZSBvZiBmaW5hbGl0eSBsYWdnaW5nKSBzaG91bGRRAWJlIHRha2VuIGludG8gYWNjb3VudCB3aGVuIGNob29zaW5nIHRoZSBgZGVsYXlgLiBUaGUgR1JBTkRQQSB2b3RlcnMgYmFzZWQgb24gdGhlIG5ld1UBYXV0aG9yaXR5IHdpbGwgc3RhcnQgdm90aW5nIG9uIHRvcCBvZiBgYmVzdF9maW5hbGl6ZWRfYmxvY2tfbnVtYmVyYCBmb3IgbmV3IGZpbmFsaXplZE0BYmxvY2tzLiBgYmVzdF9maW5hbGl6ZWRfYmxvY2tfbnVtYmVyYCBzaG91bGQgYmUgdGhlIGhpZ2hlc3Qgb2YgdGhlIGxhdGVzdCBmaW5hbGl6ZWTEYmxvY2sgb2YgYWxsIHZhbGlkYXRvcnMgb2YgdGhlIG5ldyBhdXRob3JpdHkgc2V0LgBYT25seSBjYWxsYWJsZSBieSByb290LgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy41AghQc3BfY29uc2Vuc3VzX2dyYW5kcGFERXF1aXZvY2F0aW9uUHJvb2YIBEgBNAROARAACAEYc2V0X2lkMAEUU2V0SWQAATBlcXVpdm9jYXRpb245AgFIRXF1aXZvY2F0aW9uPEgsIE4+AAA5AghQc3BfY29uc2Vuc3VzX2dyYW5kcGEwRXF1aXZvY2F0aW9uCARIATQETgEQAQgcUHJldm90ZQQAPQIBiQFmaW5hbGl0eV9ncmFuZHBhOjpFcXVpdm9jYXRpb248QXV0aG9yaXR5SWQsIGZpbmFsaXR5X2dyYW5kcGE6OlByZXZvdGU8CkgsIE4+LCBBdXRob3JpdHlTaWduYXR1cmUsPgAAACRQcmVjb21taXQEAFECAZEBZmluYWxpdHlfZ3JhbmRwYTo6RXF1aXZvY2F0aW9uPEF1dGhvcml0eUlkLCBmaW5hbGl0eV9ncmFuZHBhOjpQcmVjb21taXQKPEgsIE4+LCBBdXRob3JpdHlTaWduYXR1cmUsPgABAAA9AghAZmluYWxpdHlfZ3JhbmRwYTBFcXVpdm9jYXRpb24MCElkAdQEVgFBAgRTAUUCABABMHJvdW5kX251bWJlcjABDHU2NAABIGlkZW50aXR51AEISWQAARRmaXJzdE0CARgoViwgUykAARhzZWNvbmRNAgEYKFYsIFMpAABBAghAZmluYWxpdHlfZ3JhbmRwYRxQcmV2b3RlCARIATQETgEQAAgBLHRhcmdldF9oYXNoNAEESAABNHRhcmdldF9udW1iZXIQAQROAABFAgxQc3BfY29uc2Vuc3VzX2dyYW5kcGEMYXBwJFNpZ25hdHVyZQAABABJAgFIZWQyNTUxOTo6U2lnbmF0dXJlAABJAgAAA0AAAAAIAE0CAAAECEECRQIAUQIIQGZpbmFsaXR5X2dyYW5kcGEwRXF1aXZvY2F0aW9uDAhJZAHUBFYBVQIEUwFFAgAQATByb3VuZF9udW1iZXIwAQx1NjQAASBpZGVudGl0edQBCElkAAEUZmlyc3RZAgEYKFYsIFMpAAEYc2Vjb25kWQIBGChWLCBTKQAAVQIIQGZpbmFsaXR5X2dyYW5kcGEkUHJlY29tbWl0CARIATQETgEQAAgBLHRhcmdldF9oYXNoNAEESAABNHRhcmdldF9udW1iZXIQAQROAABZAgAABAhVAkUCAF0CDDxwYWxsZXRfdHJlYXN1cnkYcGFsbGV0EENhbGwIBFQABEkAARgsc3BlbmRfbG9jYWwIARhhbW91bnT8ATxCYWxhbmNlT2Y8VCwgST4AASxiZW5lZmljaWFyecUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgADRLhQcm9wb3NlIGFuZCBhcHByb3ZlIGEgc3BlbmQgb2YgdHJlYXN1cnkgZnVuZHMuAEgjIyBEaXNwYXRjaCBPcmlnaW4ARQFNdXN0IGJlIFtgQ29uZmlnOjpTcGVuZE9yaWdpbmBdIHdpdGggdGhlIGBTdWNjZXNzYCB2YWx1ZSBiZWluZyBhdCBsZWFzdCBgYW1vdW50YC4ALCMjIyBEZXRhaWxzRQFOT1RFOiBGb3IgcmVjb3JkLWtlZXBpbmcgcHVycG9zZXMsIHRoZSBwcm9wb3NlciBpcyBkZWVtZWQgdG8gYmUgZXF1aXZhbGVudCB0byB0aGUwYmVuZWZpY2lhcnkuADgjIyMgUGFyYW1ldGVyc0EBLSBgYW1vdW50YDogVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZCBmcm9tIHRoZSB0cmVhc3VyeSB0byB0aGUgYGJlbmVmaWNpYXJ5YC7oLSBgYmVuZWZpY2lhcnlgOiBUaGUgZGVzdGluYXRpb24gYWNjb3VudCBmb3IgdGhlIHRyYW5zZmVyLgAkIyMgRXZlbnRzALRFbWl0cyBbYEV2ZW50OjpTcGVuZEFwcHJvdmVkYF0gaWYgc3VjY2Vzc2Z1bC48cmVtb3ZlX2FwcHJvdmFsBAEscHJvcG9zYWxfaWTsATRQcm9wb3NhbEluZGV4AARULQFGb3JjZSBhIHByZXZpb3VzbHkgYXBwcm92ZWQgcHJvcG9zYWwgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBhcHByb3ZhbCBxdWV1ZS4ASCMjIERpc3BhdGNoIE9yaWdpbgCETXVzdCBiZSBbYENvbmZpZzo6UmVqZWN0T3JpZ2luYF0uACgjIyBEZXRhaWxzAMBUaGUgb3JpZ2luYWwgZGVwb3NpdCB3aWxsIG5vIGxvbmdlciBiZSByZXR1cm5lZC4AOCMjIyBQYXJhbWV0ZXJzoC0gYHByb3Bvc2FsX2lkYDogVGhlIGluZGV4IG9mIGEgcHJvcG9zYWwAOCMjIyBDb21wbGV4aXR5rC0gTyhBKSB3aGVyZSBgQWAgaXMgdGhlIG51bWJlciBvZiBhcHByb3ZhbHMAKCMjIyBFcnJvcnNFAS0gW2BFcnJvcjo6UHJvcG9zYWxOb3RBcHByb3ZlZGBdOiBUaGUgYHByb3Bvc2FsX2lkYCBzdXBwbGllZCB3YXMgbm90IGZvdW5kIGluIHRoZVEBICBhcHByb3ZhbCBxdWV1ZSwgaS5lLiwgdGhlIHByb3Bvc2FsIGhhcyBub3QgYmVlbiBhcHByb3ZlZC4gVGhpcyBjb3VsZCBhbHNvIG1lYW4gdGhlWQEgIHByb3Bvc2FsIGRvZXMgbm90IGV4aXN0IGFsdG9nZXRoZXIsIHRodXMgdGhlcmUgaXMgbm8gd2F5IGl0IHdvdWxkIGhhdmUgYmVlbiBhcHByb3ZlZFQgIGluIHRoZSBmaXJzdCBwbGFjZS4Uc3BlbmQQAShhc3NldF9raW5k3AFEQm94PFQ6OkFzc2V0S2luZD4AARhhbW91bnT8AVBBc3NldEJhbGFuY2VPZjxULCBJPgABLGJlbmVmaWNpYXJ5RQEBeEJveDxCZW5lZmljaWFyeUxvb2t1cE9mPFQsIEk+PgABKHZhbGlkX2Zyb21hAgFkT3B0aW9uPEJsb2NrTnVtYmVyRm9yPFQ+PgAFaLhQcm9wb3NlIGFuZCBhcHByb3ZlIGEgc3BlbmQgb2YgdHJlYXN1cnkgZnVuZHMuAEgjIyBEaXNwYXRjaCBPcmlnaW4AHQFNdXN0IGJlIFtgQ29uZmlnOjpTcGVuZE9yaWdpbmBdIHdpdGggdGhlIGBTdWNjZXNzYCB2YWx1ZSBiZWluZyBhdCBsZWFzdFUBYGFtb3VudGAgb2YgYGFzc2V0X2tpbmRgIGluIHRoZSBuYXRpdmUgYXNzZXQuIFRoZSBhbW91bnQgb2YgYGFzc2V0X2tpbmRgIGlzIGNvbnZlcnRlZNRmb3IgYXNzZXJ0aW9uIHVzaW5nIHRoZSBbYENvbmZpZzo6QmFsYW5jZUNvbnZlcnRlcmBdLgAoIyMgRGV0YWlscwBJAUNyZWF0ZSBhbiBhcHByb3ZlZCBzcGVuZCBmb3IgdHJhbnNmZXJyaW5nIGEgc3BlY2lmaWMgYGFtb3VudGAgb2YgYGFzc2V0X2tpbmRgIHRvIGFhAWRlc2lnbmF0ZWQgYmVuZWZpY2lhcnkuIFRoZSBzcGVuZCBtdXN0IGJlIGNsYWltZWQgdXNpbmcgdGhlIGBwYXlvdXRgIGRpc3BhdGNoYWJsZSB3aXRoaW50dGhlIFtgQ29uZmlnOjpQYXlvdXRQZXJpb2RgXS4AOCMjIyBQYXJhbWV0ZXJzFQEtIGBhc3NldF9raW5kYDogQW4gaW5kaWNhdG9yIG9mIHRoZSBzcGVjaWZpYyBhc3NldCBjbGFzcyB0byBiZSBzcGVudC5BAS0gYGFtb3VudGA6IFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZnJvbSB0aGUgdHJlYXN1cnkgdG8gdGhlIGBiZW5lZmljaWFyeWAuuC0gYGJlbmVmaWNpYXJ5YDogVGhlIGJlbmVmaWNpYXJ5IG9mIHRoZSBzcGVuZC5VAS0gYHZhbGlkX2Zyb21gOiBUaGUgYmxvY2sgbnVtYmVyIGZyb20gd2hpY2ggdGhlIHNwZW5kIGNhbiBiZSBjbGFpbWVkLiBJdCBjYW4gcmVmZXIgdG8ZASAgdGhlIHBhc3QgaWYgdGhlIHJlc3VsdGluZyBzcGVuZCBoYXMgbm90IHlldCBleHBpcmVkIGFjY29yZGluZyB0byB0aGVFASAgW2BDb25maWc6OlBheW91dFBlcmlvZGBdLiBJZiBgTm9uZWAsIHRoZSBzcGVuZCBjYW4gYmUgY2xhaW1lZCBpbW1lZGlhdGVseSBhZnRlciwgIGFwcHJvdmFsLgAkIyMgRXZlbnRzAMhFbWl0cyBbYEV2ZW50OjpBc3NldFNwZW5kQXBwcm92ZWRgXSBpZiBzdWNjZXNzZnVsLhhwYXlvdXQEARRpbmRleBABKFNwZW5kSW5kZXgABkw4Q2xhaW0gYSBzcGVuZC4ASCMjIERpc3BhdGNoIE9yaWdpbgA4TXVzdCBiZSBzaWduZWQAKCMjIERldGFpbHMAVQFTcGVuZHMgbXVzdCBiZSBjbGFpbWVkIHdpdGhpbiBzb21lIHRlbXBvcmFsIGJvdW5kcy4gQSBzcGVuZCBtYXkgYmUgY2xhaW1lZCB3aXRoaW4gb25l1FtgQ29uZmlnOjpQYXlvdXRQZXJpb2RgXSBmcm9tIHRoZSBgdmFsaWRfZnJvbWAgYmxvY2suVQFJbiBjYXNlIG9mIGEgcGF5b3V0IGZhaWx1cmUsIHRoZSBzcGVuZCBzdGF0dXMgbXVzdCBiZSB1cGRhdGVkIHdpdGggdGhlIGBjaGVja19zdGF0dXNg3GRpc3BhdGNoYWJsZSBiZWZvcmUgcmV0cnlpbmcgd2l0aCB0aGUgY3VycmVudCBmdW5jdGlvbi4AOCMjIyBQYXJhbWV0ZXJzbC0gYGluZGV4YDogVGhlIHNwZW5kIGluZGV4LgAkIyMgRXZlbnRzAJBFbWl0cyBbYEV2ZW50OjpQYWlkYF0gaWYgc3VjY2Vzc2Z1bC4wY2hlY2tfc3RhdHVzBAEUaW5kZXgQAShTcGVuZEluZGV4AAdMKQFDaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBzcGVuZCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHN0b3JhZ2UgaWYgcHJvY2Vzc2VkLgBIIyMgRGlzcGF0Y2ggT3JpZ2luADxNdXN0IGJlIHNpZ25lZC4AKCMjIERldGFpbHMAAQFUaGUgc3RhdHVzIGNoZWNrIGlzIGEgcHJlcmVxdWlzaXRlIGZvciByZXRyeWluZyBhIGZhaWxlZCBwYXlvdXQuSQFJZiBhIHNwZW5kIGhhcyBlaXRoZXIgc3VjY2VlZGVkIG9yIGV4cGlyZWQsIGl0IGlzIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmFnZSBieSB0aGlz7GZ1bmN0aW9uLiBJbiBzdWNoIGluc3RhbmNlcywgdHJhbnNhY3Rpb24gZmVlcyBhcmUgcmVmdW5kZWQuADgjIyMgUGFyYW1ldGVyc2wtIGBpbmRleGA6IFRoZSBzcGVuZCBpbmRleC4AJCMjIEV2ZW50cwD4RW1pdHMgW2BFdmVudDo6UGF5bWVudEZhaWxlZGBdIGlmIHRoZSBzcGVuZCBwYXlvdXQgaGFzIGZhaWxlZC4BAUVtaXRzIFtgRXZlbnQ6OlNwZW5kUHJvY2Vzc2VkYF0gaWYgdGhlIHNwZW5kIHBheW91dCBoYXMgc3VjY2VlZC4odm9pZF9zcGVuZAQBFGluZGV4EAEoU3BlbmRJbmRleAAIQHxWb2lkIHByZXZpb3VzbHkgYXBwcm92ZWQgc3BlbmQuAEgjIyBEaXNwYXRjaCBPcmlnaW4AhE11c3QgYmUgW2BDb25maWc6OlJlamVjdE9yaWdpbmBdLgAoIyMgRGV0YWlscwAdAUEgc3BlbmQgdm9pZCBpcyBvbmx5IHBvc3NpYmxlIGlmIHRoZSBwYXlvdXQgaGFzIG5vdCBiZWVuIGF0dGVtcHRlZCB5ZXQuADgjIyMgUGFyYW1ldGVyc2wtIGBpbmRleGA6IFRoZSBzcGVuZCBpbmRleC4AJCMjIEV2ZW50cwDARW1pdHMgW2BFdmVudDo6QXNzZXRTcGVuZFZvaWRlZGBdIGlmIHN1Y2Nlc3NmdWwuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLmECBBhPcHRpb24EBFQBEAEIEE5vbmUAAAAQU29tZQQAEAAAAQAAZQIMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxhwYWxsZXQQQ2FsbAgEVAAESQABGBB2b3RlCAEocG9sbF9pbmRleOwBRFBvbGxJbmRleE9mPFQsIEk+AAEQdm90ZWkCAXBBY2NvdW50Vm90ZTxCYWxhbmNlT2Y8VCwgST4+AAAkGQFWb3RlIGluIGEgcG9sbC4gSWYgYHZvdGUuaXNfYXllKClgLCB0aGUgdm90ZSBpcyB0byBlbmFjdCB0aGUgcHJvcG9zYWw7uG90aGVyd2lzZSBpdCBpcyBhIHZvdGUgdG8ga2VlcCB0aGUgc3RhdHVzIHF1by4AyFRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAMgtIGBwb2xsX2luZGV4YDogVGhlIGluZGV4IG9mIHRoZSBwb2xsIHRvIHZvdGUgZm9yLoQtIGB2b3RlYDogVGhlIHZvdGUgY29uZmlndXJhdGlvbi4AFQFXZWlnaHQ6IGBPKFIpYCB3aGVyZSBSIGlzIHRoZSBudW1iZXIgb2YgcG9sbHMgdGhlIHZvdGVyIGhhcyB2b3RlZCBvbi4gZGVsZWdhdGUQARRjbGFzc20BATRDbGFzc09mPFQsIEk+AAEIdG/FAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAShjb252aWN0aW9ucQIBKENvbnZpY3Rpb24AARxiYWxhbmNlGAE8QmFsYW5jZU9mPFQsIEk+AAFcTQFEZWxlZ2F0ZSB0aGUgdm90aW5nIHBvd2VyICh3aXRoIHNvbWUgZ2l2ZW4gY29udmljdGlvbikgb2YgdGhlIHNlbmRpbmcgYWNjb3VudCBmb3IgYWhwYXJ0aWN1bGFyIGNsYXNzIG9mIHBvbGxzLgBVAVRoZSBiYWxhbmNlIGRlbGVnYXRlZCBpcyBsb2NrZWQgZm9yIGFzIGxvbmcgYXMgaXQncyBkZWxlZ2F0ZWQsIGFuZCB0aGVyZWFmdGVyIGZvciB0aGXIdGltZSBhcHByb3ByaWF0ZSBmb3IgdGhlIGNvbnZpY3Rpb24ncyBsb2NrIHBlcmlvZC4AXQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLCBhbmQgdGhlIHNpZ25pbmcgYWNjb3VudCBtdXN0IGVpdGhlcjp0ICAtIGJlIGRlbGVnYXRpbmcgYWxyZWFkeTsgb3JFASAgLSBoYXZlIG5vIHZvdGluZyBhY3Rpdml0eSAoaWYgdGhlcmUgaXMsIHRoZW4gaXQgd2lsbCBuZWVkIHRvIGJlIHJlbW92ZWQgdGhyb3VnaEwgICAgYHJlbW92ZV92b3RlYCkuAEUBLSBgdG9gOiBUaGUgYWNjb3VudCB3aG9zZSB2b3RpbmcgdGhlIGB0YXJnZXRgIGFjY291bnQncyB2b3RpbmcgcG93ZXIgd2lsbCBmb2xsb3cuXQEtIGBjbGFzc2A6IFRoZSBjbGFzcyBvZiBwb2xscyB0byBkZWxlZ2F0ZS4gVG8gZGVsZWdhdGUgbXVsdGlwbGUgY2xhc3NlcywgbXVsdGlwbGUgY2FsbHOAICB0byB0aGlzIGZ1bmN0aW9uIGFyZSByZXF1aXJlZC5VAS0gYGNvbnZpY3Rpb25gOiBUaGUgY29udmljdGlvbiB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIGRlbGVnYXRlZCB2b3Rlcy4gV2hlbiB0aGVBASAgYWNjb3VudCBpcyB1bmRlbGVnYXRlZCwgdGhlIGZ1bmRzIHdpbGwgYmUgbG9ja2VkIGZvciB0aGUgY29ycmVzcG9uZGluZyBwZXJpb2QuYQEtIGBiYWxhbmNlYDogVGhlIGFtb3VudCBvZiB0aGUgYWNjb3VudCdzIGJhbGFuY2UgdG8gYmUgdXNlZCBpbiBkZWxlZ2F0aW5nLiBUaGlzIG11c3Qgbm90tCAgYmUgbW9yZSB0aGFuIHRoZSBhY2NvdW50J3MgY3VycmVudCBiYWxhbmNlLgBIRW1pdHMgYERlbGVnYXRlZGAuACUBV2VpZ2h0OiBgTyhSKWAgd2hlcmUgUiBpcyB0aGUgbnVtYmVyIG9mIHBvbGxzIHRoZSB2b3RlciBkZWxlZ2F0aW5nIHRvIGhhc00BICB2b3RlZCBvbi4gV2VpZ2h0IGlzIGluaXRpYWxseSBjaGFyZ2VkIGFzIGlmIG1heGltdW0gdm90ZXMsIGJ1dCBpcyByZWZ1bmRlZCBsYXRlci4odW5kZWxlZ2F0ZQQBFGNsYXNzbQEBNENsYXNzT2Y8VCwgST4AAjhNAVVuZGVsZWdhdGUgdGhlIHZvdGluZyBwb3dlciBvZiB0aGUgc2VuZGluZyBhY2NvdW50IGZvciBhIHBhcnRpY3VsYXIgY2xhc3Mgb2YgcG9sbHMuAF0BVG9rZW5zIG1heSBiZSB1bmxvY2tlZCBmb2xsb3dpbmcgb25jZSBhbiBhbW91bnQgb2YgdGltZSBjb25zaXN0ZW50IHdpdGggdGhlIGxvY2sgcGVyaW9kCQFvZiB0aGUgY29udmljdGlvbiB3aXRoIHdoaWNoIHRoZSBkZWxlZ2F0aW9uIHdhcyBpc3N1ZWQgaGFzIHBhc3NlZC4ARQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2lnbmluZyBhY2NvdW50IG11c3QgYmVUY3VycmVudGx5IGRlbGVnYXRpbmcuAPAtIGBjbGFzc2A6IFRoZSBjbGFzcyBvZiBwb2xscyB0byByZW1vdmUgdGhlIGRlbGVnYXRpb24gZnJvbS4AUEVtaXRzIGBVbmRlbGVnYXRlZGAuACUBV2VpZ2h0OiBgTyhSKWAgd2hlcmUgUiBpcyB0aGUgbnVtYmVyIG9mIHBvbGxzIHRoZSB2b3RlciBkZWxlZ2F0aW5nIHRvIGhhc00BICB2b3RlZCBvbi4gV2VpZ2h0IGlzIGluaXRpYWxseSBjaGFyZ2VkIGFzIGlmIG1heGltdW0gdm90ZXMsIGJ1dCBpcyByZWZ1bmRlZCBsYXRlci4YdW5sb2NrCAEUY2xhc3NtAQE0Q2xhc3NPZjxULCBJPgABGHRhcmdldMUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgADJF0BUmVtb3ZlIHRoZSBsb2NrIGNhdXNlZCBieSBwcmlvciB2b3RpbmcvZGVsZWdhdGluZyB3aGljaCBoYXMgZXhwaXJlZCB3aXRoaW4gYSBwYXJ0aWN1bGFyGGNsYXNzLgDIVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AoC0gYGNsYXNzYDogVGhlIGNsYXNzIG9mIHBvbGxzIHRvIHVubG9jay64LSBgdGFyZ2V0YDogVGhlIGFjY291bnQgdG8gcmVtb3ZlIHRoZSBsb2NrIG9uLgC8V2VpZ2h0OiBgTyhSKWAgd2l0aCBSIG51bWJlciBvZiB2b3RlIG9mIHRhcmdldC4scmVtb3ZlX3ZvdGUIARRjbGFzc3UCAVRPcHRpb248Q2xhc3NPZjxULCBJPj4AARRpbmRleBABRFBvbGxJbmRleE9mPFQsIEk+AAR0ZFJlbW92ZSBhIHZvdGUgZm9yIGEgcG9sbC4ADElmOnAtIHRoZSBwb2xsIHdhcyBjYW5jZWxsZWQsIG9yZC0gdGhlIHBvbGwgaXMgb25nb2luZywgb3J4LSB0aGUgcG9sbCBoYXMgZW5kZWQgc3VjaCB0aGF0/CAgLSB0aGUgdm90ZSBvZiB0aGUgYWNjb3VudCB3YXMgaW4gb3Bwb3NpdGlvbiB0byB0aGUgcmVzdWx0OyBvctQgIC0gdGhlcmUgd2FzIG5vIGNvbnZpY3Rpb24gdG8gdGhlIGFjY291bnQncyB2b3RlOyBvcoQgIC0gdGhlIGFjY291bnQgbWFkZSBhIHNwbGl0IHZvdGVdAS4uLnRoZW4gdGhlIHZvdGUgaXMgcmVtb3ZlZCBjbGVhbmx5IGFuZCBhIGZvbGxvd2luZyBjYWxsIHRvIGB1bmxvY2tgIG1heSByZXN1bHQgaW4gbW9yZVhmdW5kcyBiZWluZyBhdmFpbGFibGUuAJBJZiwgaG93ZXZlciwgdGhlIHBvbGwgaGFzIGVuZGVkIGFuZDrsLSBpdCBmaW5pc2hlZCBjb3JyZXNwb25kaW5nIHRvIHRoZSB2b3RlIG9mIHRoZSBhY2NvdW50LCBhbmTcLSB0aGUgYWNjb3VudCBtYWRlIGEgc3RhbmRhcmQgdm90ZSB3aXRoIGNvbnZpY3Rpb24sIGFuZLwtIHRoZSBsb2NrIHBlcmlvZCBvZiB0aGUgY29udmljdGlvbiBpcyBub3Qgb3ZlclkBLi4udGhlbiB0aGUgbG9jayB3aWxsIGJlIGFnZ3JlZ2F0ZWQgaW50byB0aGUgb3ZlcmFsbCBhY2NvdW50J3MgbG9jaywgd2hpY2ggbWF5IGludm9sdmVZASpvdmVybG9ja2luZyogKHdoZXJlIHRoZSB0d28gbG9ja3MgYXJlIGNvbWJpbmVkIGludG8gYSBzaW5nbGUgbG9jayB0aGF0IGlzIHRoZSBtYXhpbXVt5G9mIGJvdGggdGhlIGFtb3VudCBsb2NrZWQgYW5kIHRoZSB0aW1lIGlzIGl0IGxvY2tlZCBmb3IpLgBJAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8sIGFuZCB0aGUgc2lnbmVyIG11c3QgaGF2ZSBhIHZvdGVwcmVnaXN0ZXJlZCBmb3IgcG9sbCBgaW5kZXhgLgDcLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgcG9sbCBvZiB0aGUgdm90ZSB0byBiZSByZW1vdmVkLlUBLSBgY2xhc3NgOiBPcHRpb25hbCBwYXJhbWV0ZXIsIGlmIGdpdmVuIGl0IGluZGljYXRlcyB0aGUgY2xhc3Mgb2YgdGhlIHBvbGwuIEZvciBwb2xsc/AgIHdoaWNoIGhhdmUgZmluaXNoZWQgb3IgYXJlIGNhbmNlbGxlZCwgdGhpcyBtdXN0IGJlIGBTb21lYC4ARQFXZWlnaHQ6IGBPKFIgKyBsb2cgUilgIHdoZXJlIFIgaXMgdGhlIG51bWJlciBvZiBwb2xscyB0aGF0IGB0YXJnZXRgIGhhcyB2b3RlZCBvbi7YICBXZWlnaHQgaXMgY2FsY3VsYXRlZCBmb3IgdGhlIG1heGltdW0gbnVtYmVyIG9mIHZvdGUuRHJlbW92ZV9vdGhlcl92b3RlDAEYdGFyZ2V0xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEUY2xhc3NtAQE0Q2xhc3NPZjxULCBJPgABFGluZGV4EAFEUG9sbEluZGV4T2Y8VCwgST4ABUBkUmVtb3ZlIGEgdm90ZSBmb3IgYSBwb2xsLgBNAUlmIHRoZSBgdGFyZ2V0YCBpcyBlcXVhbCB0byB0aGUgc2lnbmVyLCB0aGVuIHRoaXMgZnVuY3Rpb24gaXMgZXhhY3RseSBlcXVpdmFsZW50IHRvLQFgcmVtb3ZlX3ZvdGVgLiBJZiBub3QgZXF1YWwgdG8gdGhlIHNpZ25lciwgdGhlbiB0aGUgdm90ZSBtdXN0IGhhdmUgZXhwaXJlZCwlAWVpdGhlciBiZWNhdXNlIHRoZSBwb2xsIHdhcyBjYW5jZWxsZWQsIGJlY2F1c2UgdGhlIHZvdGVyIGxvc3QgdGhlIHBvbGwgb3KYYmVjYXVzZSB0aGUgY29udmljdGlvbiBwZXJpb2QgaXMgb3Zlci4AyFRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAGEBLSBgdGFyZ2V0YDogVGhlIGFjY291bnQgb2YgdGhlIHZvdGUgdG8gYmUgcmVtb3ZlZDsgdGhpcyBhY2NvdW50IG11c3QgaGF2ZSB2b3RlZCBmb3IgcG9sbCggIGBpbmRleGAu3C0gYGluZGV4YDogVGhlIGluZGV4IG9mIHBvbGwgb2YgdGhlIHZvdGUgdG8gYmUgcmVtb3ZlZC6ELSBgY2xhc3NgOiBUaGUgY2xhc3Mgb2YgdGhlIHBvbGwuAEUBV2VpZ2h0OiBgTyhSICsgbG9nIFIpYCB3aGVyZSBSIGlzIHRoZSBudW1iZXIgb2YgcG9sbHMgdGhhdCBgdGFyZ2V0YCBoYXMgdm90ZWQgb24u2CAgV2VpZ2h0IGlzIGNhbGN1bGF0ZWQgZm9yIHRoZSBtYXhpbXVtIG51bWJlciBvZiB2b3RlLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy5pAgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nEHZvdGUsQWNjb3VudFZvdGUEHEJhbGFuY2UBGAEMIFN0YW5kYXJkCAEQdm90ZW0CARBWb3RlAAEcYmFsYW5jZRgBHEJhbGFuY2UAAAAUU3BsaXQIAQxheWUYARxCYWxhbmNlAAEMbmF5GAEcQmFsYW5jZQABADBTcGxpdEFic3RhaW4MAQxheWUYARxCYWxhbmNlAAEMbmF5GAEcQmFsYW5jZQABHGFic3RhaW4YARxCYWxhbmNlAAIAAG0CDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcQdm90ZRBWb3RlAAAEAAgAAABxAgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nKGNvbnZpY3Rpb24oQ29udmljdGlvbgABHBBOb25lAAAAIExvY2tlZDF4AAEAIExvY2tlZDJ4AAIAIExvY2tlZDN4AAMAIExvY2tlZDR4AAQAIExvY2tlZDV4AAUAIExvY2tlZDZ4AAYAAHUCBBhPcHRpb24EBFQBbQEBCBBOb25lAAAAEFNvbWUEAG0BAAABAAB5AgxAcGFsbGV0X3JlZmVyZW5kYRhwYWxsZXQQQ2FsbAgEVAAESQABJBhzdWJtaXQMATxwcm9wb3NhbF9vcmlnaW59AgFcQm94PFBhbGxldHNPcmlnaW5PZjxUPj4AASBwcm9wb3NhbHEBAUxCb3VuZGVkQ2FsbE9mPFQsIEk+AAFAZW5hY3RtZW50X21vbWVudJkCAXxEaXNwYXRjaFRpbWU8QmxvY2tOdW1iZXJGb3I8VD4+AAAksFByb3Bvc2UgYSByZWZlcmVuZHVtIG9uIGEgcHJpdmlsZWdlZCBhY3Rpb24uAFkBLSBgb3JpZ2luYDogbXVzdCBiZSBgU3VibWl0T3JpZ2luYCBhbmQgdGhlIGFjY291bnQgbXVzdCBoYXZlIGBTdWJtaXNzaW9uRGVwb3NpdGAgZnVuZHMwICBhdmFpbGFibGUuLQEtIGBwcm9wb3NhbF9vcmlnaW5gOiBUaGUgb3JpZ2luIGZyb20gd2hpY2ggdGhlIHByb3Bvc2FsIHNob3VsZCBiZSBleGVjdXRlZC5sLSBgcHJvcG9zYWxgOiBUaGUgcHJvcG9zYWwuFQEtIGBlbmFjdG1lbnRfbW9tZW50YDogVGhlIG1vbWVudCB0aGF0IHRoZSBwcm9wb3NhbCBzaG91bGQgYmUgZW5hY3RlZC4ASEVtaXRzIGBTdWJtaXR0ZWRgLlhwbGFjZV9kZWNpc2lvbl9kZXBvc2l0BAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgAASCsUG9zdCB0aGUgRGVjaXNpb24gRGVwb3NpdCBmb3IgYSByZWZlcmVuZHVtLgA5AS0gYG9yaWdpbmA6IG11c3QgYmUgYFNpZ25lZGAgYW5kIHRoZSBhY2NvdW50IG11c3QgaGF2ZSBmdW5kcyBhdmFpbGFibGUgZm9yIHRoZaAgIHJlZmVyZW5kdW0ncyB0cmFjaydzIERlY2lzaW9uIERlcG9zaXQuUQEtIGBpbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgc3VibWl0dGVkIHJlZmVyZW5kdW0gd2hvc2UgRGVjaXNpb24gRGVwb3NpdCBpcyB5ZXQgdG8gYmUkICBwb3N0ZWQuAHhFbWl0cyBgRGVjaXNpb25EZXBvc2l0UGxhY2VkYC5ccmVmdW5kX2RlY2lzaW9uX2RlcG9zaXQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAACHCkBUmVmdW5kIHRoZSBEZWNpc2lvbiBEZXBvc2l0IGZvciBhIGNsb3NlZCByZWZlcmVuZHVtIGJhY2sgdG8gdGhlIGRlcG9zaXRvci4AnC0gYG9yaWdpbmA6IG11c3QgYmUgYFNpZ25lZGAgb3IgYFJvb3RgLk0BLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgYSBjbG9zZWQgcmVmZXJlbmR1bSB3aG9zZSBEZWNpc2lvbiBEZXBvc2l0IGhhcyBub3QgeWV0IGJlZW4sICByZWZ1bmRlZC4AgEVtaXRzIGBEZWNpc2lvbkRlcG9zaXRSZWZ1bmRlZGAuGGNhbmNlbAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAMYdENhbmNlbCBhbiBvbmdvaW5nIHJlZmVyZW5kdW0uAJwtIGBvcmlnaW5gOiBtdXN0IGJlIHRoZSBgQ2FuY2VsT3JpZ2luYC7cLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgdGhlIHJlZmVyZW5kdW0gdG8gYmUgY2FuY2VsbGVkLgBIRW1pdHMgYENhbmNlbGxlZGAuEGtpbGwEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAAEGNBDYW5jZWwgYW4gb25nb2luZyByZWZlcmVuZHVtIGFuZCBzbGFzaCB0aGUgZGVwb3NpdHMuAJQtIGBvcmlnaW5gOiBtdXN0IGJlIHRoZSBgS2lsbE9yaWdpbmAu3C0gYGluZGV4YDogVGhlIGluZGV4IG9mIHRoZSByZWZlcmVuZHVtIHRvIGJlIGNhbmNlbGxlZC4AkEVtaXRzIGBLaWxsZWRgIGFuZCBgRGVwb3NpdFNsYXNoZWRgLkBudWRnZV9yZWZlcmVuZHVtBAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgABRAdAUFkdmFuY2UgYSByZWZlcmVuZHVtIG9udG8gaXRzIG5leHQgbG9naWNhbCBzdGF0ZS4gT25seSB1c2VkIGludGVybmFsbHkuAGwtIGBvcmlnaW5gOiBtdXN0IGJlIGBSb290YC6kLSBgaW5kZXhgOiB0aGUgcmVmZXJlbmR1bSB0byBiZSBhZHZhbmNlZC5Ib25lX2Zld2VyX2RlY2lkaW5nBAEUdHJhY2ttAQE8VHJhY2tJZE9mPFQsIEk+AAYkCQFBZHZhbmNlIGEgdHJhY2sgb250byBpdHMgbmV4dCBsb2dpY2FsIHN0YXRlLiBPbmx5IHVzZWQgaW50ZXJuYWxseS4AbC0gYG9yaWdpbmA6IG11c3QgYmUgYFJvb3RgLpAtIGB0cmFja2A6IHRoZSB0cmFjayB0byBiZSBhZHZhbmNlZC4AUQFBY3Rpb24gaXRlbSBmb3Igd2hlbiB0aGVyZSBpcyBub3cgb25lIGZld2VyIHJlZmVyZW5kdW0gaW4gdGhlIGRlY2lkaW5nIHBoYXNlIGFuZCB0aGUVAWBEZWNpZGluZ0NvdW50YCBpcyBub3QgeWV0IHVwZGF0ZWQuIFRoaXMgbWVhbnMgdGhhdCB3ZSBzaG91bGQgZWl0aGVyOiUBLSBiZWdpbiBkZWNpZGluZyBhbm90aGVyIHJlZmVyZW5kdW0gKGFuZCBsZWF2ZSBgRGVjaWRpbmdDb3VudGAgYWxvbmUpOyBvcnAtIGRlY3JlbWVudCBgRGVjaWRpbmdDb3VudGAuZHJlZnVuZF9zdWJtaXNzaW9uX2RlcG9zaXQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAAHHDEBUmVmdW5kIHRoZSBTdWJtaXNzaW9uIERlcG9zaXQgZm9yIGEgY2xvc2VkIHJlZmVyZW5kdW0gYmFjayB0byB0aGUgZGVwb3NpdG9yLgCcLSBgb3JpZ2luYDogbXVzdCBiZSBgU2lnbmVkYCBvciBgUm9vdGAuVQEtIGBpbmRleGA6IFRoZSBpbmRleCBvZiBhIGNsb3NlZCByZWZlcmVuZHVtIHdob3NlIFN1Ym1pc3Npb24gRGVwb3NpdCBoYXMgbm90IHlldCBiZWVuLCAgcmVmdW5kZWQuAIhFbWl0cyBgU3VibWlzc2lvbkRlcG9zaXRSZWZ1bmRlZGAuMHNldF9tZXRhZGF0YQgBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAEobWF5YmVfaGFzaJ0CATxPcHRpb248VDo6SGFzaD4ACByYU2V0IG9yIGNsZWFyIG1ldGFkYXRhIG9mIGEgcmVmZXJlbmR1bS4ALFBhcmFtZXRlcnM6RQEtIGBvcmlnaW5gOiBNdXN0IGJlIGBTaWduZWRgIGJ5IGEgY3JlYXRvciBvZiBhIHJlZmVyZW5kdW0gb3IgYnkgYW55b25lIHRvIGNsZWFyIGGQICBtZXRhZGF0YSBvZiBhIGZpbmlzaGVkIHJlZmVyZW5kdW0uDQEtIGBpbmRleGA6ICBUaGUgaW5kZXggb2YgYSByZWZlcmVuZHVtIHRvIHNldCBvciBjbGVhciBtZXRhZGF0YSBmb3IuUQEtIGBtYXliZV9oYXNoYDogVGhlIGhhc2ggb2YgYW4gb24tY2hhaW4gc3RvcmVkIHByZWltYWdlLiBgTm9uZWAgdG8gY2xlYXIgYSBtZXRhZGF0YS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMufQIIQHBvbGthZG90X3J1bnRpbWUwT3JpZ2luQ2FsbGVyAAEUGHN5c3RlbQQAgQIBdGZyYW1lX3N5c3RlbTo6T3JpZ2luPFJ1bnRpbWU+AAAAHE9yaWdpbnMEAIUCAXRwYWxsZXRfY3VzdG9tX29yaWdpbnM6Ok9yaWdpbgAWAEBQYXJhY2hhaW5zT3JpZ2luBACJAgFkcGFyYWNoYWluc19vcmlnaW46Ok9yaWdpbgAyACRYY21QYWxsZXQEAJECAUhwYWxsZXRfeGNtOjpPcmlnaW4AYwAQVm9pZAQAlQIBQQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6Cl9fcHJpdmF0ZTo6Vm9pZAAEAACBAgw0ZnJhbWVfc3VwcG9ydCBkaXNwYXRjaCRSYXdPcmlnaW4EJEFjY291bnRJZAEAAQwQUm9vdAAAABhTaWduZWQEAAABJEFjY291bnRJZAABABBOb25lAAIAAIUCFEBwb2xrYWRvdF9ydW50aW1lKGdvdmVybmFuY2Ucb3JpZ2luc1RwYWxsZXRfY3VzdG9tX29yaWdpbnMYT3JpZ2luAAE8MFN0YWtpbmdBZG1pbgAAACRUcmVhc3VyZXIAAQA8RmVsbG93c2hpcEFkbWluAAIAMEdlbmVyYWxBZG1pbgADADBBdWN0aW9uQWRtaW4ABAAoTGVhc2VBZG1pbgAFAExSZWZlcmVuZHVtQ2FuY2VsbGVyAAYAQFJlZmVyZW5kdW1LaWxsZXIABwAsU21hbGxUaXBwZXIACAAkQmlnVGlwcGVyAAkAMFNtYWxsU3BlbmRlcgAKADRNZWRpdW1TcGVuZGVyAAsAKEJpZ1NwZW5kZXIADABEV2hpdGVsaXN0ZWRDYWxsZXIADQA0V2lzaEZvckNoYW5nZQAOAACJAhBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zGG9yaWdpbhhwYWxsZXQYT3JpZ2luAAEEJFBhcmFjaGFpbgQAjQIBGFBhcmFJZAAAAACNAgx0cG9sa2Fkb3RfcGFyYWNoYWluX3ByaW1pdGl2ZXMocHJpbWl0aXZlcwhJZAAABAAQAQx1MzIAAJECDChwYWxsZXRfeGNtGHBhbGxldBhPcmlnaW4AAQgMWGNtBAANAQEgTG9jYXRpb24AAAAgUmVzcG9uc2UEAA0BASBMb2NhdGlvbgABAACVAggcc3BfY29yZRBWb2lkAAEAAJkCEDRmcmFtZV9zdXBwb3J0GHRyYWl0cyBzY2hlZHVsZTBEaXNwYXRjaFRpbWUELEJsb2NrTnVtYmVyARABCAhBdAQAEAEsQmxvY2tOdW1iZXIAAAAUQWZ0ZXIEABABLEJsb2NrTnVtYmVyAAEAAJ0CBBhPcHRpb24EBFQBNAEIEE5vbmUAAAAQU29tZQQANAAAAQAAoQIMQHBhbGxldF93aGl0ZWxpc3QYcGFsbGV0EENhbGwEBFQAARA4d2hpdGVsaXN0X2NhbGwEASRjYWxsX2hhc2g0ARxUOjpIYXNoAAAAXHJlbW92ZV93aGl0ZWxpc3RlZF9jYWxsBAEkY2FsbF9oYXNoNAEcVDo6SGFzaAABAGRkaXNwYXRjaF93aGl0ZWxpc3RlZF9jYWxsDAEkY2FsbF9oYXNoNAEcVDo6SGFzaAABQGNhbGxfZW5jb2RlZF9sZW4QAQx1MzIAAUxjYWxsX3dlaWdodF93aXRuZXNzKAEYV2VpZ2h0AAIAnGRpc3BhdGNoX3doaXRlbGlzdGVkX2NhbGxfd2l0aF9wcmVpbWFnZQQBEGNhbGx1AQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgADAAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6lAgxEcGFsbGV0X3BhcmFtZXRlcnMYcGFsbGV0EENhbGwEBFQAAQQ0c2V0X3BhcmFtZXRlcgQBJGtleV92YWx1ZakCAVBUOjpSdW50aW1lUGFyYW1ldGVycwAAEHRTZXQgdGhlIHZhbHVlIG9mIGEgcGFyYW1ldGVyLgBVAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgYEFkbWluT3JpZ2luYCBmb3IgdGhlIGdpdmVuIGBrZXlgLiBWYWx1ZXMgYmWIZGVsZXRlZCBieSBzZXR0aW5nIHRoZW0gdG8gYE5vbmVgLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6pAghAcG9sa2Fkb3RfcnVudGltZURSdW50aW1lUGFyYW1ldGVycwABBCRJbmZsYXRpb24EAK0CAZRkeW5hbWljX3BhcmFtczo6aW5mbGF0aW9uOjpQYXJhbWV0ZXJzAAAAAK0CEEBwb2xrYWRvdF9ydW50aW1lOGR5bmFtaWNfcGFyYW1zJGluZmxhdGlvbihQYXJhbWV0ZXJzAAEUME1pbkluZmxhdGlvbggAsQIBME1pbkluZmxhdGlvbgAAtQIBTE9wdGlvbjxQZXJxdWludGlsbD4AAAAwTWF4SW5mbGF0aW9uCAC9AgEwTWF4SW5mbGF0aW9uAAC1AgFMT3B0aW9uPFBlcnF1aW50aWxsPgABAChJZGVhbFN0YWtlCADBAgEoSWRlYWxTdGFrZQAAtQIBTE9wdGlvbjxQZXJxdWludGlsbD4AAgAcRmFsbG9mZggAxQIBHEZhbGxvZmYAALUCAUxPcHRpb248UGVycXVpbnRpbGw+AAMAPFVzZUF1Y3Rpb25TbG90cwgAyQIBPFVzZUF1Y3Rpb25TbG90cwAAzQIBME9wdGlvbjxib29sPgAEAACxAhBAcG9sa2Fkb3RfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb24wTWluSW5mbGF0aW9uAAAAALUCBBhPcHRpb24EBFQBuQIBCBBOb25lAAAAEFNvbWUEALkCAAABAAC5Agw0c3BfYXJpdGhtZXRpYyhwZXJfdGhpbmdzLFBlcnF1aW50aWxsAAAEADABDHU2NAAAvQIQQHBvbGthZG90X3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uME1heEluZmxhdGlvbgAAAADBAhBAcG9sa2Fkb3RfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb24oSWRlYWxTdGFrZQAAAADFAhBAcG9sa2Fkb3RfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb24cRmFsbG9mZgAAAADJAhBAcG9sa2Fkb3RfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb248VXNlQXVjdGlvblNsb3RzAAAAAM0CBBhPcHRpb24EBFQBIAEIEE5vbmUAAAAQU29tZQQAIAAAAQAA0QIQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uGGNsYWltcxhwYWxsZXQQQ2FsbAQEVAABFBRjbGFpbQgBEGRlc3QAATBUOjpBY2NvdW50SWQAAUhldGhlcmV1bV9zaWduYXR1cmXVAgE4RWNkc2FTaWduYXR1cmUAAGCITWFrZSBhIGNsYWltIHRvIGNvbGxlY3QgeW91ciBET1RzLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX05vbmVfLgBQVW5zaWduZWQgVmFsaWRhdGlvbjoFAUEgY2FsbCB0byBjbGFpbSBpcyBkZWVtZWQgdmFsaWQgaWYgdGhlIHNpZ25hdHVyZSBwcm92aWRlZCBtYXRjaGVzfHRoZSBleHBlY3RlZCBzaWduZWQgbWVzc2FnZSBvZjoAaD4gRXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6lD4gKGNvbmZpZ3VyZWQgcHJlZml4IHN0cmluZykoYWRkcmVzcykApGFuZCBgYWRkcmVzc2AgbWF0Y2hlcyB0aGUgYGRlc3RgIGFjY291bnQuACxQYXJhbWV0ZXJzOtgtIGBkZXN0YDogVGhlIGRlc3RpbmF0aW9uIGFjY291bnQgdG8gcGF5b3V0IHRoZSBjbGFpbS5dAS0gYGV0aGVyZXVtX3NpZ25hdHVyZWA6IFRoZSBzaWduYXR1cmUgb2YgYW4gZXRoZXJldW0gc2lnbmVkIG1lc3NhZ2UgbWF0Y2hpbmcgdGhlIGZvcm1hdEggIGRlc2NyaWJlZCBhYm92ZS4AIDx3ZWlnaHQ+/FRoZSB3ZWlnaHQgb2YgdGhpcyBjYWxsIGlzIGludmFyaWFudCBvdmVyIHRoZSBpbnB1dCBwYXJhbWV0ZXJzLuBXZWlnaHQgaW5jbHVkZXMgbG9naWMgdG8gdmFsaWRhdGUgdW5zaWduZWQgYGNsYWltYCBjYWxsLgBYVG90YWwgQ29tcGxleGl0eTogTygxKSQ8L3dlaWdodD4obWludF9jbGFpbRABDHdob90CATxFdGhlcmV1bUFkZHJlc3MAARR2YWx1ZRgBMEJhbGFuY2VPZjxUPgABQHZlc3Rpbmdfc2NoZWR1bGXhAgHcT3B0aW9uPChCYWxhbmNlT2Y8VD4sIEJhbGFuY2VPZjxUPiwgQmxvY2tOdW1iZXJGb3I8VD4pPgABJHN0YXRlbWVudOkCAVRPcHRpb248U3RhdGVtZW50S2luZD4AATyETWludCBhIG5ldyBjbGFpbSB0byBjb2xsZWN0IERPVHMuAMRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8uACxQYXJhbWV0ZXJzOvAtIGB3aG9gOiBUaGUgRXRoZXJldW0gYWRkcmVzcyBhbGxvd2VkIHRvIGNvbGxlY3QgdGhpcyBjbGFpbS7MLSBgdmFsdWVgOiBUaGUgbnVtYmVyIG9mIERPVHMgdGhhdCB3aWxsIGJlIGNsYWltZWQuCQEtIGB2ZXN0aW5nX3NjaGVkdWxlYDogQW4gb3B0aW9uYWwgdmVzdGluZyBzY2hlZHVsZSBmb3IgdGhlc2UgRE9Ucy4AIDx3ZWlnaHQ+/FRoZSB3ZWlnaHQgb2YgdGhpcyBjYWxsIGlzIGludmFyaWFudCBvdmVyIHRoZSBpbnB1dCBwYXJhbWV0ZXJzLh0BV2UgYXNzdW1lIHdvcnN0IGNhc2UgdGhhdCBib3RoIHZlc3RpbmcgYW5kIHN0YXRlbWVudCBpcyBiZWluZyBpbnNlcnRlZC4AWFRvdGFsIENvbXBsZXhpdHk6IE8oMSkkPC93ZWlnaHQ+MGNsYWltX2F0dGVzdAwBEGRlc3QAATBUOjpBY2NvdW50SWQAAUhldGhlcmV1bV9zaWduYXR1cmXVAgE4RWNkc2FTaWduYXR1cmUAASRzdGF0ZW1lbnQ4ARxWZWM8dTg+AAJs5E1ha2UgYSBjbGFpbSB0byBjb2xsZWN0IHlvdXIgRE9UcyBieSBzaWduaW5nIGEgc3RhdGVtZW50LgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX05vbmVfLgBQVW5zaWduZWQgVmFsaWRhdGlvbjopAUEgY2FsbCB0byBgY2xhaW1fYXR0ZXN0YCBpcyBkZWVtZWQgdmFsaWQgaWYgdGhlIHNpZ25hdHVyZSBwcm92aWRlZCBtYXRjaGVzfHRoZSBleHBlY3RlZCBzaWduZWQgbWVzc2FnZSBvZjoAaD4gRXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6wD4gKGNvbmZpZ3VyZWQgcHJlZml4IHN0cmluZykoYWRkcmVzcykoc3RhdGVtZW50KQBJAWFuZCBgYWRkcmVzc2AgbWF0Y2hlcyB0aGUgYGRlc3RgIGFjY291bnQ7IHRoZSBgc3RhdGVtZW50YCBtdXN0IG1hdGNoIHRoYXQgd2hpY2ggaXPAZXhwZWN0ZWQgYWNjb3JkaW5nIHRvIHlvdXIgcHVyY2hhc2UgYXJyYW5nZW1lbnQuACxQYXJhbWV0ZXJzOtgtIGBkZXN0YDogVGhlIGRlc3RpbmF0aW9uIGFjY291bnQgdG8gcGF5b3V0IHRoZSBjbGFpbS5dAS0gYGV0aGVyZXVtX3NpZ25hdHVyZWA6IFRoZSBzaWduYXR1cmUgb2YgYW4gZXRoZXJldW0gc2lnbmVkIG1lc3NhZ2UgbWF0Y2hpbmcgdGhlIGZvcm1hdEggIGRlc2NyaWJlZCBhYm92ZS45AS0gYHN0YXRlbWVudGA6IFRoZSBpZGVudGl0eSBvZiB0aGUgc3RhdGVtZW50IHdoaWNoIGlzIGJlaW5nIGF0dGVzdGVkIHRvIGluIHRoZTAgIHNpZ25hdHVyZS4AIDx3ZWlnaHQ+/FRoZSB3ZWlnaHQgb2YgdGhpcyBjYWxsIGlzIGludmFyaWFudCBvdmVyIHRoZSBpbnB1dCBwYXJhbWV0ZXJzLvxXZWlnaHQgaW5jbHVkZXMgbG9naWMgdG8gdmFsaWRhdGUgdW5zaWduZWQgYGNsYWltX2F0dGVzdGAgY2FsbC4AWFRvdGFsIENvbXBsZXhpdHk6IE8oMSkkPC93ZWlnaHQ+GGF0dGVzdAQBJHN0YXRlbWVudDgBHFZlYzx1OD4AA0z0QXR0ZXN0IHRvIGEgc3RhdGVtZW50LCBuZWVkZWQgdG8gZmluYWxpemUgdGhlIGNsYWltcyBwcm9jZXNzLgAZAVdBUk5JTkc6IEluc2VjdXJlIHVubGVzcyB5b3VyIGNoYWluIGluY2x1ZGVzIGBQcmV2YWxpZGF0ZUF0dGVzdHNgIGFzIGFIYFNpZ25lZEV4dGVuc2lvbmAuAFBVbnNpZ25lZCBWYWxpZGF0aW9uOikBQSBjYWxsIHRvIGF0dGVzdCBpcyBkZWVtZWQgdmFsaWQgaWYgdGhlIHNlbmRlciBoYXMgYSBgUHJlY2xhaW1gIHJlZ2lzdGVyZWT0YW5kIHByb3ZpZGVzIGEgYHN0YXRlbWVudGAgd2hpY2ggaXMgZXhwZWN0ZWQgZm9yIHRoZSBhY2NvdW50LgAsUGFyYW1ldGVyczo5AS0gYHN0YXRlbWVudGA6IFRoZSBpZGVudGl0eSBvZiB0aGUgc3RhdGVtZW50IHdoaWNoIGlzIGJlaW5nIGF0dGVzdGVkIHRvIGluIHRoZTAgIHNpZ25hdHVyZS4AIDx3ZWlnaHQ+/FRoZSB3ZWlnaHQgb2YgdGhpcyBjYWxsIGlzIGludmFyaWFudCBvdmVyIHRoZSBpbnB1dCBwYXJhbWV0ZXJzLvBXZWlnaHQgaW5jbHVkZXMgbG9naWMgdG8gZG8gcHJlLXZhbGlkYXRpb24gb24gYGF0dGVzdGAgY2FsbC4AWFRvdGFsIENvbXBsZXhpdHk6IE8oMSkkPC93ZWlnaHQ+KG1vdmVfY2xhaW0MAQxvbGTdAgE8RXRoZXJldW1BZGRyZXNzAAEMbmV33QIBPEV0aGVyZXVtQWRkcmVzcwABOG1heWJlX3ByZWNsYWlt/QEBUE9wdGlvbjxUOjpBY2NvdW50SWQ+AAQABA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLtUCDFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhhjbGFpbXM4RWNkc2FTaWduYXR1cmUAAAQA2QIBIFt1ODsgNjVdAADZAgAAA0EAAAAIAN0CDFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhhjbGFpbXM8RXRoZXJldW1BZGRyZXNzAAAEAPgBIFt1ODsgMjBdAADhAgQYT3B0aW9uBARUAeUCAQgQTm9uZQAAABBTb21lBADlAgAAAQAA5QIAAAQMGBgQAOkCBBhPcHRpb24EBFQB7QIBCBBOb25lAAAAEFNvbWUEAO0CAAABAADtAgxccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zNFN0YXRlbWVudEtpbmQAAQgcUmVndWxhcgAAABBTYWZ0AAEAAPECDDhwYWxsZXRfdmVzdGluZxhwYWxsZXQQQ2FsbAQEVAABGBB2ZXN0AAAkuFVubG9jayBhbnkgdmVzdGVkIGZ1bmRzIG9mIHRoZSBzZW5kZXIgYWNjb3VudC4AXQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGhhdmUgZnVuZHMgc3RpbGxkbG9ja2VkIHVuZGVyIHRoaXMgcGFsbGV0LgDQRW1pdHMgZWl0aGVyIGBWZXN0aW5nQ29tcGxldGVkYCBvciBgVmVzdGluZ1VwZGF0ZWRgLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC4odmVzdF9vdGhlcgQBGHRhcmdldMUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABLLhVbmxvY2sgYW55IHZlc3RlZCBmdW5kcyBvZiBhIGB0YXJnZXRgIGFjY291bnQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AUQEtIGB0YXJnZXRgOiBUaGUgYWNjb3VudCB3aG9zZSB2ZXN0ZWQgZnVuZHMgc2hvdWxkIGJlIHVubG9ja2VkLiBNdXN0IGhhdmUgZnVuZHMgc3RpbGxkbG9ja2VkIHVuZGVyIHRoaXMgcGFsbGV0LgDQRW1pdHMgZWl0aGVyIGBWZXN0aW5nQ29tcGxldGVkYCBvciBgVmVzdGluZ1VwZGF0ZWRgLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC48dmVzdGVkX3RyYW5zZmVyCAEYdGFyZ2V0xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEgc2NoZWR1bGX1AgGwVmVzdGluZ0luZm88QmFsYW5jZU9mPFQ+LCBCbG9ja051bWJlckZvcjxUPj4AAjRkQ3JlYXRlIGEgdmVzdGVkIHRyYW5zZmVyLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAMwtIGB0YXJnZXRgOiBUaGUgYWNjb3VudCByZWNlaXZpbmcgdGhlIHZlc3RlZCBmdW5kcy7wLSBgc2NoZWR1bGVgOiBUaGUgdmVzdGluZyBzY2hlZHVsZSBhdHRhY2hlZCB0byB0aGUgdHJhbnNmZXIuAFxFbWl0cyBgVmVzdGluZ0NyZWF0ZWRgLgD8Tk9URTogVGhpcyB3aWxsIHVubG9jayBhbGwgc2NoZWR1bGVzIHRocm91Z2ggdGhlIGN1cnJlbnQgYmxvY2suADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLlRmb3JjZV92ZXN0ZWRfdHJhbnNmZXIMARhzb3VyY2XFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARh0YXJnZXTFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASBzY2hlZHVsZfUCAbBWZXN0aW5nSW5mbzxCYWxhbmNlT2Y8VD4sIEJsb2NrTnVtYmVyRm9yPFQ+PgADOGBGb3JjZSBhIHZlc3RlZCB0cmFuc2Zlci4AxFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9Sb290Xy4A6C0gYHNvdXJjZWA6IFRoZSBhY2NvdW50IHdob3NlIGZ1bmRzIHNob3VsZCBiZSB0cmFuc2ZlcnJlZC4RAS0gYHRhcmdldGA6IFRoZSBhY2NvdW50IHRoYXQgc2hvdWxkIGJlIHRyYW5zZmVycmVkIHRoZSB2ZXN0ZWQgZnVuZHMu8C0gYHNjaGVkdWxlYDogVGhlIHZlc3Rpbmcgc2NoZWR1bGUgYXR0YWNoZWQgdG8gdGhlIHRyYW5zZmVyLgBcRW1pdHMgYFZlc3RpbmdDcmVhdGVkYC4A/E5PVEU6IFRoaXMgd2lsbCB1bmxvY2sgYWxsIHNjaGVkdWxlcyB0aHJvdWdoIHRoZSBjdXJyZW50IGJsb2NrLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC48bWVyZ2Vfc2NoZWR1bGVzCAE8c2NoZWR1bGUxX2luZGV4EAEMdTMyAAE8c2NoZWR1bGUyX2luZGV4EAEMdTMyAARUXQFNZXJnZSB0d28gdmVzdGluZyBzY2hlZHVsZXMgdG9nZXRoZXIsIGNyZWF0aW5nIGEgbmV3IHZlc3Rpbmcgc2NoZWR1bGUgdGhhdCB1bmxvY2tzIG92ZXJVAXRoZSBoaWdoZXN0IHBvc3NpYmxlIHN0YXJ0IGFuZCBlbmQgYmxvY2tzLiBJZiBib3RoIHNjaGVkdWxlcyBoYXZlIGFscmVhZHkgc3RhcnRlZCB0aGVZAWN1cnJlbnQgYmxvY2sgd2lsbCBiZSB1c2VkIGFzIHRoZSBzY2hlZHVsZSBzdGFydDsgd2l0aCB0aGUgY2F2ZWF0IHRoYXQgaWYgb25lIHNjaGVkdWxlXQFpcyBmaW5pc2hlZCBieSB0aGUgY3VycmVudCBibG9jaywgdGhlIG90aGVyIHdpbGwgYmUgdHJlYXRlZCBhcyB0aGUgbmV3IG1lcmdlZCBzY2hlZHVsZSwsdW5tb2RpZmllZC4A+E5PVEU6IElmIGBzY2hlZHVsZTFfaW5kZXggPT0gc2NoZWR1bGUyX2luZGV4YCB0aGlzIGlzIGEgbm8tb3AuQQFOT1RFOiBUaGlzIHdpbGwgdW5sb2NrIGFsbCBzY2hlZHVsZXMgdGhyb3VnaCB0aGUgY3VycmVudCBibG9jayBwcmlvciB0byBtZXJnaW5nLmEBTk9URTogSWYgYm90aCBzY2hlZHVsZXMgaGF2ZSBlbmRlZCBieSB0aGUgY3VycmVudCBibG9jaywgbm8gbmV3IHNjaGVkdWxlIHdpbGwgYmUgY3JlYXRlZGRhbmQgYm90aCB3aWxsIGJlIHJlbW92ZWQuAGxNZXJnZWQgc2NoZWR1bGUgYXR0cmlidXRlczo1AS0gYHN0YXJ0aW5nX2Jsb2NrYDogYE1BWChzY2hlZHVsZTEuc3RhcnRpbmdfYmxvY2ssIHNjaGVkdWxlZDIuc3RhcnRpbmdfYmxvY2ssSCAgY3VycmVudF9ibG9jaylgLiEBLSBgZW5kaW5nX2Jsb2NrYDogYE1BWChzY2hlZHVsZTEuZW5kaW5nX2Jsb2NrLCBzY2hlZHVsZTIuZW5kaW5nX2Jsb2NrKWAuWQEtIGBsb2NrZWRgOiBgc2NoZWR1bGUxLmxvY2tlZF9hdChjdXJyZW50X2Jsb2NrKSArIHNjaGVkdWxlMi5sb2NrZWRfYXQoY3VycmVudF9ibG9jaylgLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAOgtIGBzY2hlZHVsZTFfaW5kZXhgOiBpbmRleCBvZiB0aGUgZmlyc3Qgc2NoZWR1bGUgdG8gbWVyZ2Uu7C0gYHNjaGVkdWxlMl9pbmRleGA6IGluZGV4IG9mIHRoZSBzZWNvbmQgc2NoZWR1bGUgdG8gbWVyZ2UudGZvcmNlX3JlbW92ZV92ZXN0aW5nX3NjaGVkdWxlCAEYdGFyZ2V0xQEBjDxUOjpMb29rdXAgYXMgU3RhdGljTG9va3VwPjo6U291cmNlAAE4c2NoZWR1bGVfaW5kZXgQAQx1MzIABRh8Rm9yY2UgcmVtb3ZlIGEgdmVzdGluZyBzY2hlZHVsZQDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgDILSBgdGFyZ2V0YDogQW4gYWNjb3VudCB0aGF0IGhhcyBhIHZlc3Rpbmcgc2NoZWR1bGUVAS0gYHNjaGVkdWxlX2luZGV4YDogVGhlIHZlc3Rpbmcgc2NoZWR1bGUgaW5kZXggdGhhdCBzaG91bGQgYmUgcmVtb3ZlZAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy71Agw4cGFsbGV0X3Zlc3RpbmcwdmVzdGluZ19pbmZvLFZlc3RpbmdJbmZvCBxCYWxhbmNlARgsQmxvY2tOdW1iZXIBEAAMARhsb2NrZWQYARxCYWxhbmNlAAEkcGVyX2Jsb2NrGAEcQmFsYW5jZQABOHN0YXJ0aW5nX2Jsb2NrEAEsQmxvY2tOdW1iZXIAAPkCDDhwYWxsZXRfdXRpbGl0eRhwYWxsZXQQQ2FsbAQEVAABGBRiYXRjaAQBFGNhbGxz/QIBfFZlYzw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AAEh8U2VuZCBhIGJhdGNoIG9mIGRpc3BhdGNoIGNhbGxzLgCwTWF5IGJlIGNhbGxlZCBmcm9tIGFueSBvcmlnaW4gZXhjZXB0IGBOb25lYC4AXQEtIGBjYWxsc2A6IFRoZSBjYWxscyB0byBiZSBkaXNwYXRjaGVkIGZyb20gdGhlIHNhbWUgb3JpZ2luLiBUaGUgbnVtYmVyIG9mIGNhbGwgbXVzdCBub3Q5ASAgZXhjZWVkIHRoZSBjb25zdGFudDogYGJhdGNoZWRfY2FsbHNfbGltaXRgIChhdmFpbGFibGUgaW4gY29uc3RhbnQgbWV0YWRhdGEpLgBVAUlmIG9yaWdpbiBpcyByb290IHRoZW4gdGhlIGNhbGxzIGFyZSBkaXNwYXRjaGVkIHdpdGhvdXQgY2hlY2tpbmcgb3JpZ2luIGZpbHRlci4gKFRoaXPsaW5jbHVkZXMgYnlwYXNzaW5nIGBmcmFtZV9zeXN0ZW06OkNvbmZpZzo6QmFzZUNhbGxGaWx0ZXJgKS4ANCMjIENvbXBsZXhpdHnQLSBPKEMpIHdoZXJlIEMgaXMgdGhlIG51bWJlciBvZiBjYWxscyB0byBiZSBiYXRjaGVkLgBVAVRoaXMgd2lsbCByZXR1cm4gYE9rYCBpbiBhbGwgY2lyY3Vtc3RhbmNlcy4gVG8gZGV0ZXJtaW5lIHRoZSBzdWNjZXNzIG9mIHRoZSBiYXRjaCwgYW4xAWV2ZW50IGlzIGRlcG9zaXRlZC4gSWYgYSBjYWxsIGZhaWxlZCBhbmQgdGhlIGJhdGNoIHdhcyBpbnRlcnJ1cHRlZCwgdGhlbiB0aGVVAWBCYXRjaEludGVycnVwdGVkYCBldmVudCBpcyBkZXBvc2l0ZWQsIGFsb25nIHdpdGggdGhlIG51bWJlciBvZiBzdWNjZXNzZnVsIGNhbGxzIG1hZGVNAWFuZCB0aGUgZXJyb3Igb2YgdGhlIGZhaWxlZCBjYWxsLiBJZiBhbGwgd2VyZSBzdWNjZXNzZnVsLCB0aGVuIHRoZSBgQmF0Y2hDb21wbGV0ZWRgTGV2ZW50IGlzIGRlcG9zaXRlZC40YXNfZGVyaXZhdGl2ZQgBFGluZGV4bQEBDHUxNgABEGNhbGx1AQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgABNNxTZW5kIGEgY2FsbCB0aHJvdWdoIGFuIGluZGV4ZWQgcHNldWRvbnltIG9mIHRoZSBzZW5kZXIuAFUBRmlsdGVyIGZyb20gb3JpZ2luIGFyZSBwYXNzZWQgYWxvbmcuIFRoZSBjYWxsIHdpbGwgYmUgZGlzcGF0Y2hlZCB3aXRoIGFuIG9yaWdpbiB3aGljaLx1c2UgdGhlIHNhbWUgZmlsdGVyIGFzIHRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsLgBFAU5PVEU6IElmIHlvdSBuZWVkIHRvIGVuc3VyZSB0aGF0IGFueSBhY2NvdW50LWJhc2VkIGZpbHRlcmluZyBpcyBub3QgaG9ub3JlZCAoaS5lLmEBYmVjYXVzZSB5b3UgZXhwZWN0IGBwcm94eWAgdG8gaGF2ZSBiZWVuIHVzZWQgcHJpb3IgaW4gdGhlIGNhbGwgc3RhY2sgYW5kIHlvdSBkbyBub3Qgd2FudFEBdGhlIGNhbGwgcmVzdHJpY3Rpb25zIHRvIGFwcGx5IHRvIGFueSBzdWItYWNjb3VudHMpLCB0aGVuIHVzZSBgYXNfbXVsdGlfdGhyZXNob2xkXzFgfGluIHRoZSBNdWx0aXNpZyBwYWxsZXQgaW5zdGVhZC4A9E5PVEU6IFByaW9yIHRvIHZlcnNpb24gKjEyLCB0aGlzIHdhcyBjYWxsZWQgYGFzX2xpbWl0ZWRfc3ViYC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLiRiYXRjaF9hbGwEARRjYWxsc/0CAXxWZWM8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAI07FNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscyBhbmQgYXRvbWljYWxseSBleGVjdXRlIHRoZW0uIQFUaGUgd2hvbGUgdHJhbnNhY3Rpb24gd2lsbCByb2xsYmFjayBhbmQgZmFpbCBpZiBhbnkgb2YgdGhlIGNhbGxzIGZhaWxlZC4AsE1heSBiZSBjYWxsZWQgZnJvbSBhbnkgb3JpZ2luIGV4Y2VwdCBgTm9uZWAuAF0BLSBgY2FsbHNgOiBUaGUgY2FsbHMgdG8gYmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBzYW1lIG9yaWdpbi4gVGhlIG51bWJlciBvZiBjYWxsIG11c3Qgbm90OQEgIGV4Y2VlZCB0aGUgY29uc3RhbnQ6IGBiYXRjaGVkX2NhbGxzX2xpbWl0YCAoYXZhaWxhYmxlIGluIGNvbnN0YW50IG1ldGFkYXRhKS4AVQFJZiBvcmlnaW4gaXMgcm9vdCB0aGVuIHRoZSBjYWxscyBhcmUgZGlzcGF0Y2hlZCB3aXRob3V0IGNoZWNraW5nIG9yaWdpbiBmaWx0ZXIuIChUaGlz7GluY2x1ZGVzIGJ5cGFzc2luZyBgZnJhbWVfc3lzdGVtOjpDb25maWc6OkJhc2VDYWxsRmlsdGVyYCkuADQjIyBDb21wbGV4aXR50C0gTyhDKSB3aGVyZSBDIGlzIHRoZSBudW1iZXIgb2YgY2FsbHMgdG8gYmUgYmF0Y2hlZC4sZGlzcGF0Y2hfYXMIASRhc19vcmlnaW59AgFUQm94PFQ6OlBhbGxldHNPcmlnaW4+AAEQY2FsbHUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAMYyERpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYSBwcm92aWRlZCBvcmlnaW4uAMRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8uADQjIyBDb21wbGV4aXR5HC0gTygxKS4sZm9yY2VfYmF0Y2gEARRjYWxsc/0CAXxWZWM8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAQ0fFNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscy7UVW5saWtlIGBiYXRjaGAsIGl0IGFsbG93cyBlcnJvcnMgYW5kIHdvbid0IGludGVycnVwdC4AsE1heSBiZSBjYWxsZWQgZnJvbSBhbnkgb3JpZ2luIGV4Y2VwdCBgTm9uZWAuAF0BLSBgY2FsbHNgOiBUaGUgY2FsbHMgdG8gYmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBzYW1lIG9yaWdpbi4gVGhlIG51bWJlciBvZiBjYWxsIG11c3Qgbm90OQEgIGV4Y2VlZCB0aGUgY29uc3RhbnQ6IGBiYXRjaGVkX2NhbGxzX2xpbWl0YCAoYXZhaWxhYmxlIGluIGNvbnN0YW50IG1ldGFkYXRhKS4ATQFJZiBvcmlnaW4gaXMgcm9vdCB0aGVuIHRoZSBjYWxscyBhcmUgZGlzcGF0Y2ggd2l0aG91dCBjaGVja2luZyBvcmlnaW4gZmlsdGVyLiAoVGhpc+xpbmNsdWRlcyBieXBhc3NpbmcgYGZyYW1lX3N5c3RlbTo6Q29uZmlnOjpCYXNlQ2FsbEZpbHRlcmApLgA0IyMgQ29tcGxleGl0edAtIE8oQykgd2hlcmUgQyBpcyB0aGUgbnVtYmVyIG9mIGNhbGxzIHRvIGJlIGJhdGNoZWQuLHdpdGhfd2VpZ2h0CAEQY2FsbHUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAEYd2VpZ2h0KAEYV2VpZ2h0AAUYxERpc3BhdGNoIGEgZnVuY3Rpb24gY2FsbCB3aXRoIGEgc3BlY2lmaWVkIHdlaWdodC4ALQFUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRoZSB3ZWlnaHQgb2YgdGhlIGNhbGwsIGFuZCBpbnN0ZWFkIGFsbG93cyB0aGW4Um9vdCBvcmlnaW4gdG8gc3BlY2lmeSB0aGUgd2VpZ2h0IG9mIHRoZSBjYWxsLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy79AgAAAnUBAAEDDDBwYWxsZXRfcHJveHkYcGFsbGV0EENhbGwEBFQAASgUcHJveHkMARByZWFsxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAFAZm9yY2VfcHJveHlfdHlwZQUDAVBPcHRpb248VDo6UHJveHlUeXBlPgABEGNhbGx1AQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAAJE0BRGlzcGF0Y2ggdGhlIGdpdmVuIGBjYWxsYCBmcm9tIGFuIGFjY291bnQgdGhhdCB0aGUgc2VuZGVyIGlzIGF1dGhvcmlzZWQgZm9yIHRocm91Z2gwYGFkZF9wcm94eWAuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4ALFBhcmFtZXRlcnM6DQEtIGByZWFsYDogVGhlIGFjY291bnQgdGhhdCB0aGUgcHJveHkgd2lsbCBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2YuYQEtIGBmb3JjZV9wcm94eV90eXBlYDogU3BlY2lmeSB0aGUgZXhhY3QgcHJveHkgdHlwZSB0byBiZSB1c2VkIGFuZCBjaGVja2VkIGZvciB0aGlzIGNhbGwu0C0gYGNhbGxgOiBUaGUgY2FsbCB0byBiZSBtYWRlIGJ5IHRoZSBgcmVhbGAgYWNjb3VudC4kYWRkX3Byb3h5DAEgZGVsZWdhdGXFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAShwcm94eV90eXBlCQMBMFQ6OlByb3h5VHlwZQABFGRlbGF5EAFEQmxvY2tOdW1iZXJGb3I8VD4AASRFAVJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlciB0aGF0IGlzIGFibGUgdG8gbWFrZSBjYWxscyBvbiBpdHMgYmVoYWxmLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACxQYXJhbWV0ZXJzOhEBLSBgcHJveHlgOiBUaGUgYWNjb3VudCB0aGF0IHRoZSBgY2FsbGVyYCB3b3VsZCBsaWtlIHRvIG1ha2UgYSBwcm94eS78LSBgcHJveHlfdHlwZWA6IFRoZSBwZXJtaXNzaW9ucyBhbGxvd2VkIGZvciB0aGlzIHByb3h5IGFjY291bnQuTQEtIGBkZWxheWA6IFRoZSBhbm5vdW5jZW1lbnQgcGVyaW9kIHJlcXVpcmVkIG9mIHRoZSBpbml0aWFsIHByb3h5LiBXaWxsIGdlbmVyYWxseSBiZRR6ZXJvLjByZW1vdmVfcHJveHkMASBkZWxlZ2F0ZcUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABKHByb3h5X3R5cGUJAwEwVDo6UHJveHlUeXBlAAEUZGVsYXkQAURCbG9ja051bWJlckZvcjxUPgACHKhVbnJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlci4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgAsUGFyYW1ldGVyczolAS0gYHByb3h5YDogVGhlIGFjY291bnQgdGhhdCB0aGUgYGNhbGxlcmAgd291bGQgbGlrZSB0byByZW1vdmUgYXMgYSBwcm94eS5BAS0gYHByb3h5X3R5cGVgOiBUaGUgcGVybWlzc2lvbnMgY3VycmVudGx5IGVuYWJsZWQgZm9yIHRoZSByZW1vdmVkIHByb3h5IGFjY291bnQuOHJlbW92ZV9wcm94aWVzAAMYtFVucmVnaXN0ZXIgYWxsIHByb3h5IGFjY291bnRzIGZvciB0aGUgc2VuZGVyLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAEEBV0FSTklORzogVGhpcyBtYXkgYmUgY2FsbGVkIG9uIGFjY291bnRzIGNyZWF0ZWQgYnkgYHB1cmVgLCBob3dldmVyIGlmIGRvbmUsIHRoZW5ZAXRoZSB1bnJlc2VydmVkIGZlZXMgd2lsbCBiZSBpbmFjY2Vzc2libGUuICoqQWxsIGFjY2VzcyB0byB0aGlzIGFjY291bnQgd2lsbCBiZSBsb3N0LioqLGNyZWF0ZV9wdXJlDAEocHJveHlfdHlwZQkDATBUOjpQcm94eVR5cGUAARRkZWxheRABREJsb2NrTnVtYmVyRm9yPFQ+AAEUaW5kZXhtAQEMdTE2AARIOQFTcGF3biBhIGZyZXNoIG5ldyBhY2NvdW50IHRoYXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvdGhlcndpc2UgaW5hY2Nlc3NpYmxlLCBhbmT8aW5pdGlhbGl6ZSBpdCB3aXRoIGEgcHJveHkgb2YgYHByb3h5X3R5cGVgIGZvciBgb3JpZ2luYCBzZW5kZXIuAGxSZXF1aXJlcyBhIGBTaWduZWRgIG9yaWdpbi4AUQEtIGBwcm94eV90eXBlYDogVGhlIHR5cGUgb2YgdGhlIHByb3h5IHRoYXQgdGhlIHNlbmRlciB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgb3ZlciB0aGVNAW5ldyBhY2NvdW50LiBUaGlzIHdpbGwgYWxtb3N0IGFsd2F5cyBiZSB0aGUgbW9zdCBwZXJtaXNzaXZlIGBQcm94eVR5cGVgIHBvc3NpYmxlIHRveGFsbG93IGZvciBtYXhpbXVtIGZsZXhpYmlsaXR5LlEBLSBgaW5kZXhgOiBBIGRpc2FtYmlndWF0aW9uIGluZGV4LCBpbiBjYXNlIHRoaXMgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluIHRoZSBzYW1lXQF0cmFuc2FjdGlvbiAoZS5nLiB3aXRoIGB1dGlsaXR5OjpiYXRjaGApLiBVbmxlc3MgeW91J3JlIHVzaW5nIGBiYXRjaGAgeW91IHByb2JhYmx5IGp1c3RAd2FudCB0byB1c2UgYDBgLk0BLSBgZGVsYXlgOiBUaGUgYW5ub3VuY2VtZW50IHBlcmlvZCByZXF1aXJlZCBvZiB0aGUgaW5pdGlhbCBwcm94eS4gV2lsbCBnZW5lcmFsbHkgYmUUemVyby4AUQFGYWlscyB3aXRoIGBEdXBsaWNhdGVgIGlmIHRoaXMgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQgaW4gdGhpcyB0cmFuc2FjdGlvbiwgZnJvbSB0aGWYc2FtZSBzZW5kZXIsIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycy4A5EZhaWxzIGlmIHRoZXJlIGFyZSBpbnN1ZmZpY2llbnQgZnVuZHMgdG8gcGF5IGZvciBkZXBvc2l0LiRraWxsX3B1cmUUARxzcGF3bmVyxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEocHJveHlfdHlwZQkDATBUOjpQcm94eVR5cGUAARRpbmRleG0BAQx1MTYAARhoZWlnaHTsAURCbG9ja051bWJlckZvcjxUPgABJGV4dF9pbmRleOwBDHUzMgAFQKBSZW1vdmVzIGEgcHJldmlvdXNseSBzcGF3bmVkIHB1cmUgcHJveHkuAEkBV0FSTklORzogKipBbGwgYWNjZXNzIHRvIHRoaXMgYWNjb3VudCB3aWxsIGJlIGxvc3QuKiogQW55IGZ1bmRzIGhlbGQgaW4gaXQgd2lsbCBiZTRpbmFjY2Vzc2libGUuAFkBUmVxdWlyZXMgYSBgU2lnbmVkYCBvcmlnaW4sIGFuZCB0aGUgc2VuZGVyIGFjY291bnQgbXVzdCBoYXZlIGJlZW4gY3JlYXRlZCBieSBhIGNhbGwgdG+UYHB1cmVgIHdpdGggY29ycmVzcG9uZGluZyBwYXJhbWV0ZXJzLgA5AS0gYHNwYXduZXJgOiBUaGUgYWNjb3VudCB0aGF0IG9yaWdpbmFsbHkgY2FsbGVkIGBwdXJlYCB0byBjcmVhdGUgdGhpcyBhY2NvdW50LjkBLSBgaW5kZXhgOiBUaGUgZGlzYW1iaWd1YXRpb24gaW5kZXggb3JpZ2luYWxseSBwYXNzZWQgdG8gYHB1cmVgLiBQcm9iYWJseSBgMGAu7C0gYHByb3h5X3R5cGVgOiBUaGUgcHJveHkgdHlwZSBvcmlnaW5hbGx5IHBhc3NlZCB0byBgcHVyZWAuKQEtIGBoZWlnaHRgOiBUaGUgaGVpZ2h0IG9mIHRoZSBjaGFpbiB3aGVuIHRoZSBjYWxsIHRvIGBwdXJlYCB3YXMgcHJvY2Vzc2VkLjUBLSBgZXh0X2luZGV4YDogVGhlIGV4dHJpbnNpYyBpbmRleCBpbiB3aGljaCB0aGUgY2FsbCB0byBgcHVyZWAgd2FzIHByb2Nlc3NlZC4ANQFGYWlscyB3aXRoIGBOb1Blcm1pc3Npb25gIGluIGNhc2UgdGhlIGNhbGxlciBpcyBub3QgYSBwcmV2aW91c2x5IGNyZWF0ZWQgcHVyZdxhY2NvdW50IHdob3NlIGBwdXJlYCBjYWxsIGhhcyBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMuIGFubm91bmNlCAEQcmVhbMUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABJGNhbGxfaGFzaDQBNENhbGxIYXNoT2Y8VD4ABjwFAVB1Ymxpc2ggdGhlIGhhc2ggb2YgYSBwcm94eS1jYWxsIHRoYXQgd2lsbCBiZSBtYWRlIGluIHRoZSBmdXR1cmUuAF0BVGhpcyBtdXN0IGJlIGNhbGxlZCBzb21lIG51bWJlciBvZiBibG9ja3MgYmVmb3JlIHRoZSBjb3JyZXNwb25kaW5nIGBwcm94eWAgaXMgYXR0ZW1wdGVkJQFpZiB0aGUgZGVsYXkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm94eSByZWxhdGlvbnNoaXAgaXMgZ3JlYXRlciB0aGFuIHplcm8uABEBTm8gbW9yZSB0aGFuIGBNYXhQZW5kaW5nYCBhbm5vdW5jZW1lbnRzIG1heSBiZSBtYWRlIGF0IGFueSBvbmUgdGltZS4ACQFUaGlzIHdpbGwgdGFrZSBhIGRlcG9zaXQgb2YgYEFubm91bmNlbWVudERlcG9zaXRGYWN0b3JgIGFzIHdlbGwgYXMZAWBBbm5vdW5jZW1lbnREZXBvc2l0QmFzZWAgaWYgdGhlcmUgYXJlIG5vIG90aGVyIHBlbmRpbmcgYW5ub3VuY2VtZW50cy4AJQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgYSBwcm94eSBvZiBgcmVhbGAuACxQYXJhbWV0ZXJzOg0BLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLhUBLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgbWFkZSBieSB0aGUgYHJlYWxgIGFjY291bnQuTHJlbW92ZV9hbm5vdW5jZW1lbnQIARByZWFsxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkY2FsbF9oYXNoNAE0Q2FsbEhhc2hPZjxUPgAHKHBSZW1vdmUgYSBnaXZlbiBhbm5vdW5jZW1lbnQuAFkBTWF5IGJlIGNhbGxlZCBieSBhIHByb3h5IGFjY291bnQgdG8gcmVtb3ZlIGEgY2FsbCB0aGV5IHByZXZpb3VzbHkgYW5ub3VuY2VkIGFuZCByZXR1cm4wdGhlIGRlcG9zaXQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4ALFBhcmFtZXRlcnM6DQEtIGByZWFsYDogVGhlIGFjY291bnQgdGhhdCB0aGUgcHJveHkgd2lsbCBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2YuFQEtIGBjYWxsX2hhc2hgOiBUaGUgaGFzaCBvZiB0aGUgY2FsbCB0byBiZSBtYWRlIGJ5IHRoZSBgcmVhbGAgYWNjb3VudC5McmVqZWN0X2Fubm91bmNlbWVudAgBIGRlbGVnYXRlxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkY2FsbF9oYXNoNAE0Q2FsbEhhc2hPZjxUPgAIKLBSZW1vdmUgdGhlIGdpdmVuIGFubm91bmNlbWVudCBvZiBhIGRlbGVnYXRlLgBhAU1heSBiZSBjYWxsZWQgYnkgYSB0YXJnZXQgKHByb3hpZWQpIGFjY291bnQgdG8gcmVtb3ZlIGEgY2FsbCB0aGF0IG9uZSBvZiB0aGVpciBkZWxlZ2F0ZXMlAShgZGVsZWdhdGVgKSBoYXMgYW5ub3VuY2VkIHRoZXkgd2FudCB0byBleGVjdXRlLiBUaGUgZGVwb3NpdCBpcyByZXR1cm5lZC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgAsUGFyYW1ldGVyczr0LSBgZGVsZWdhdGVgOiBUaGUgYWNjb3VudCB0aGF0IHByZXZpb3VzbHkgYW5ub3VuY2VkIHRoZSBjYWxsLrwtIGBjYWxsX2hhc2hgOiBUaGUgaGFzaCBvZiB0aGUgY2FsbCB0byBiZSBtYWRlLjxwcm94eV9hbm5vdW5jZWQQASBkZWxlZ2F0ZcUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABEHJlYWzFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAUBmb3JjZV9wcm94eV90eXBlBQMBUE9wdGlvbjxUOjpQcm94eVR5cGU+AAEQY2FsbHUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAksTQFEaXNwYXRjaCB0aGUgZ2l2ZW4gYGNhbGxgIGZyb20gYW4gYWNjb3VudCB0aGF0IHRoZSBzZW5kZXIgaXMgYXV0aG9yaXplZCBmb3IgdGhyb3VnaDBgYWRkX3Byb3h5YC4AqFJlbW92ZXMgYW55IGNvcnJlc3BvbmRpbmcgYW5ub3VuY2VtZW50KHMpLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACxQYXJhbWV0ZXJzOg0BLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLmEBLSBgZm9yY2VfcHJveHlfdHlwZWA6IFNwZWNpZnkgdGhlIGV4YWN0IHByb3h5IHR5cGUgdG8gYmUgdXNlZCBhbmQgY2hlY2tlZCBmb3IgdGhpcyBjYWxsLtAtIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgbWFkZSBieSB0aGUgYHJlYWxgIGFjY291bnQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLgUDBBhPcHRpb24EBFQBCQMBCBBOb25lAAAAEFNvbWUEAAkDAAABAAAJAwhAcG9sa2Fkb3RfcnVudGltZSRQcm94eVR5cGUAARwMQW55AAAALE5vblRyYW5zZmVyAAEAKEdvdmVybmFuY2UAAgAcU3Rha2luZwADACxDYW5jZWxQcm94eQAGABxBdWN0aW9uAAcAPE5vbWluYXRpb25Qb29scwAIAAANAww8cGFsbGV0X211bHRpc2lnGHBhbGxldBBDYWxsBARUAAEQUGFzX211bHRpX3RocmVzaG9sZF8xCAFEb3RoZXJfc2lnbmF0b3JpZXPRAQFEVmVjPFQ6OkFjY291bnRJZD4AARBjYWxsdQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AADBRAUltbWVkaWF0ZWx5IGRpc3BhdGNoIGEgbXVsdGktc2lnbmF0dXJlIGNhbGwgdXNpbmcgYSBzaW5nbGUgYXBwcm92YWwgZnJvbSB0aGUgY2FsbGVyLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAD0BLSBgb3RoZXJfc2lnbmF0b3JpZXNgOiBUaGUgYWNjb3VudHMgKG90aGVyIHRoYW4gdGhlIHNlbmRlcikgd2hvIGFyZSBwYXJ0IG9mIHRoZQEBbXVsdGktc2lnbmF0dXJlLCBidXQgZG8gbm90IHBhcnRpY2lwYXRlIGluIHRoZSBhcHByb3ZhbCBwcm9jZXNzLogtIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuALhSZXN1bHQgaXMgZXF1aXZhbGVudCB0byB0aGUgZGlzcGF0Y2hlZCByZXN1bHQuADQjIyBDb21wbGV4aXR5GQFPKFogKyBDKSB3aGVyZSBaIGlzIHRoZSBsZW5ndGggb2YgdGhlIGNhbGwgYW5kIEMgaXRzIGV4ZWN1dGlvbiB3ZWlnaHQuIGFzX211bHRpFAEkdGhyZXNob2xkbQEBDHUxNgABRG90aGVyX3NpZ25hdG9yaWVz0QEBRFZlYzxUOjpBY2NvdW50SWQ+AAE8bWF5YmVfdGltZXBvaW50EQMBkE9wdGlvbjxUaW1lcG9pbnQ8QmxvY2tOdW1iZXJGb3I8VD4+PgABEGNhbGx1AQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgABKG1heF93ZWlnaHQoARhXZWlnaHQAAZxVAVJlZ2lzdGVyIGFwcHJvdmFsIGZvciBhIGRpc3BhdGNoIHRvIGJlIG1hZGUgZnJvbSBhIGRldGVybWluaXN0aWMgY29tcG9zaXRlIGFjY291bnQgaWb4YXBwcm92ZWQgYnkgYSB0b3RhbCBvZiBgdGhyZXNob2xkIC0gMWAgb2YgYG90aGVyX3NpZ25hdG9yaWVzYC4AsElmIHRoZXJlIGFyZSBlbm91Z2gsIHRoZW4gZGlzcGF0Y2ggdGhlIGNhbGwuAC0BUGF5bWVudDogYERlcG9zaXRCYXNlYCB3aWxsIGJlIHJlc2VydmVkIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGFwcHJvdmFsLCBwbHVzPQFgdGhyZXNob2xkYCB0aW1lcyBgRGVwb3NpdEZhY3RvcmAuIEl0IGlzIHJldHVybmVkIG9uY2UgdGhpcyBkaXNwYXRjaCBoYXBwZW5zIG9yNGlzIGNhbmNlbGxlZC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgBVAS0gYHRocmVzaG9sZGA6IFRoZSB0b3RhbCBudW1iZXIgb2YgYXBwcm92YWxzIGZvciB0aGlzIGRpc3BhdGNoIGJlZm9yZSBpdCBpcyBleGVjdXRlZC5BAS0gYG90aGVyX3NpZ25hdG9yaWVzYDogVGhlIGFjY291bnRzIChvdGhlciB0aGFuIHRoZSBzZW5kZXIpIHdobyBjYW4gYXBwcm92ZSB0aGlzbGRpc3BhdGNoLiBNYXkgbm90IGJlIGVtcHR5LlkBLSBgbWF5YmVfdGltZXBvaW50YDogSWYgdGhpcyBpcyB0aGUgZmlyc3QgYXBwcm92YWwsIHRoZW4gdGhpcyBtdXN0IGJlIGBOb25lYC4gSWYgaXQgaXNRAW5vdCB0aGUgZmlyc3QgYXBwcm92YWwsIHRoZW4gaXQgbXVzdCBiZSBgU29tZWAsIHdpdGggdGhlIHRpbWVwb2ludCAoYmxvY2sgbnVtYmVyIGFuZNR0cmFuc2FjdGlvbiBpbmRleCkgb2YgdGhlIGZpcnN0IGFwcHJvdmFsIHRyYW5zYWN0aW9uLogtIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuAB0BTk9URTogVW5sZXNzIHRoaXMgaXMgdGhlIGZpbmFsIGFwcHJvdmFsLCB5b3Ugd2lsbCBnZW5lcmFsbHkgd2FudCB0byB1c2UZAWBhcHByb3ZlX2FzX211bHRpYCBpbnN0ZWFkLCBzaW5jZSBpdCBvbmx5IHJlcXVpcmVzIGEgaGFzaCBvZiB0aGUgY2FsbC4AWQFSZXN1bHQgaXMgZXF1aXZhbGVudCB0byB0aGUgZGlzcGF0Y2hlZCByZXN1bHQgaWYgYHRocmVzaG9sZGAgaXMgZXhhY3RseSBgMWAuIE90aGVyd2lzZVUBb24gc3VjY2VzcywgcmVzdWx0IGlzIGBPa2AgYW5kIHRoZSByZXN1bHQgZnJvbSB0aGUgaW50ZXJpb3IgY2FsbCwgaWYgaXQgd2FzIGV4ZWN1dGVkLNxtYXkgYmUgZm91bmQgaW4gdGhlIGRlcG9zaXRlZCBgTXVsdGlzaWdFeGVjdXRlZGAgZXZlbnQuADQjIyBDb21wbGV4aXR5UC0gYE8oUyArIFogKyBDYWxsKWAuzC0gVXAgdG8gb25lIGJhbGFuY2UtcmVzZXJ2ZSBvciB1bnJlc2VydmUgb3BlcmF0aW9uLj0BLSBPbmUgcGFzc3Rocm91Z2ggb3BlcmF0aW9uLCBvbmUgaW5zZXJ0LCBib3RoIGBPKFMpYCB3aGVyZSBgU2AgaXMgdGhlIG51bWJlciBvZkUBICBzaWduYXRvcmllcy4gYFNgIGlzIGNhcHBlZCBieSBgTWF4U2lnbmF0b3JpZXNgLCB3aXRoIHdlaWdodCBiZWluZyBwcm9wb3J0aW9uYWwuIQEtIE9uZSBjYWxsIGVuY29kZSAmIGhhc2gsIGJvdGggb2YgY29tcGxleGl0eSBgTyhaKWAgd2hlcmUgYFpgIGlzIHR4LWxlbi68LSBPbmUgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFMpYC7ULSBVcCB0byBvbmUgYmluYXJ5IHNlYXJjaCBhbmQgaW5zZXJ0IChgTyhsb2dTICsgUylgKS74LSBJL086IDEgcmVhZCBgTyhTKWAsIHVwIHRvIDEgbXV0YXRlIGBPKFMpYC4gVXAgdG8gb25lIHJlbW92ZS4wLSBPbmUgZXZlbnQubC0gVGhlIHdlaWdodCBvZiB0aGUgYGNhbGxgLk0BLSBTdG9yYWdlOiBpbnNlcnRzIG9uZSBpdGVtLCB2YWx1ZSBzaXplIGJvdW5kZWQgYnkgYE1heFNpZ25hdG9yaWVzYCwgd2l0aCBhIGRlcG9zaXQZASAgdGFrZW4gZm9yIGl0cyBsaWZldGltZSBvZiBgRGVwb3NpdEJhc2UgKyB0aHJlc2hvbGQgKiBEZXBvc2l0RmFjdG9yYC5AYXBwcm92ZV9hc19tdWx0aRQBJHRocmVzaG9sZG0BAQx1MTYAAURvdGhlcl9zaWduYXRvcmllc9EBAURWZWM8VDo6QWNjb3VudElkPgABPG1heWJlX3RpbWVwb2ludBEDAZBPcHRpb248VGltZXBvaW50PEJsb2NrTnVtYmVyRm9yPFQ+Pj4AASRjYWxsX2hhc2gEASBbdTg7IDMyXQABKG1heF93ZWlnaHQoARhXZWlnaHQAAnhVAVJlZ2lzdGVyIGFwcHJvdmFsIGZvciBhIGRpc3BhdGNoIHRvIGJlIG1hZGUgZnJvbSBhIGRldGVybWluaXN0aWMgY29tcG9zaXRlIGFjY291bnQgaWb4YXBwcm92ZWQgYnkgYSB0b3RhbCBvZiBgdGhyZXNob2xkIC0gMWAgb2YgYG90aGVyX3NpZ25hdG9yaWVzYC4ALQFQYXltZW50OiBgRGVwb3NpdEJhc2VgIHdpbGwgYmUgcmVzZXJ2ZWQgaWYgdGhpcyBpcyB0aGUgZmlyc3QgYXBwcm92YWwsIHBsdXM9AWB0aHJlc2hvbGRgIHRpbWVzIGBEZXBvc2l0RmFjdG9yYC4gSXQgaXMgcmV0dXJuZWQgb25jZSB0aGlzIGRpc3BhdGNoIGhhcHBlbnMgb3I0aXMgY2FuY2VsbGVkLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAFUBLSBgdGhyZXNob2xkYDogVGhlIHRvdGFsIG51bWJlciBvZiBhcHByb3ZhbHMgZm9yIHRoaXMgZGlzcGF0Y2ggYmVmb3JlIGl0IGlzIGV4ZWN1dGVkLkEBLSBgb3RoZXJfc2lnbmF0b3JpZXNgOiBUaGUgYWNjb3VudHMgKG90aGVyIHRoYW4gdGhlIHNlbmRlcikgd2hvIGNhbiBhcHByb3ZlIHRoaXNsZGlzcGF0Y2guIE1heSBub3QgYmUgZW1wdHkuWQEtIGBtYXliZV90aW1lcG9pbnRgOiBJZiB0aGlzIGlzIHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiB0aGlzIG11c3QgYmUgYE5vbmVgLiBJZiBpdCBpc1EBbm90IHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiBpdCBtdXN0IGJlIGBTb21lYCwgd2l0aCB0aGUgdGltZXBvaW50IChibG9jayBudW1iZXIgYW5k1HRyYW5zYWN0aW9uIGluZGV4KSBvZiB0aGUgZmlyc3QgYXBwcm92YWwgdHJhbnNhY3Rpb24uzC0gYGNhbGxfaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBjYWxsIHRvIGJlIGV4ZWN1dGVkLgA1AU5PVEU6IElmIHRoaXMgaXMgdGhlIGZpbmFsIGFwcHJvdmFsLCB5b3Ugd2lsbCB3YW50IHRvIHVzZSBgYXNfbXVsdGlgIGluc3RlYWQuADQjIyBDb21wbGV4aXR5JC0gYE8oUylgLswtIFVwIHRvIG9uZSBiYWxhbmNlLXJlc2VydmUgb3IgdW5yZXNlcnZlIG9wZXJhdGlvbi49AS0gT25lIHBhc3N0aHJvdWdoIG9wZXJhdGlvbiwgb25lIGluc2VydCwgYm90aCBgTyhTKWAgd2hlcmUgYFNgIGlzIHRoZSBudW1iZXIgb2ZFASAgc2lnbmF0b3JpZXMuIGBTYCBpcyBjYXBwZWQgYnkgYE1heFNpZ25hdG9yaWVzYCwgd2l0aCB3ZWlnaHQgYmVpbmcgcHJvcG9ydGlvbmFsLrwtIE9uZSBlbmNvZGUgJiBoYXNoLCBib3RoIG9mIGNvbXBsZXhpdHkgYE8oUylgLtQtIFVwIHRvIG9uZSBiaW5hcnkgc2VhcmNoIGFuZCBpbnNlcnQgKGBPKGxvZ1MgKyBTKWApLvgtIEkvTzogMSByZWFkIGBPKFMpYCwgdXAgdG8gMSBtdXRhdGUgYE8oUylgLiBVcCB0byBvbmUgcmVtb3ZlLjAtIE9uZSBldmVudC5NAS0gU3RvcmFnZTogaW5zZXJ0cyBvbmUgaXRlbSwgdmFsdWUgc2l6ZSBib3VuZGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggYSBkZXBvc2l0GQEgIHRha2VuIGZvciBpdHMgbGlmZXRpbWUgb2YgYERlcG9zaXRCYXNlICsgdGhyZXNob2xkICogRGVwb3NpdEZhY3RvcmAuPGNhbmNlbF9hc19tdWx0aRABJHRocmVzaG9sZG0BAQx1MTYAAURvdGhlcl9zaWduYXRvcmllc9EBAURWZWM8VDo6QWNjb3VudElkPgABJHRpbWVwb2ludBUDAXBUaW1lcG9pbnQ8QmxvY2tOdW1iZXJGb3I8VD4+AAEkY2FsbF9oYXNoBAEgW3U4OyAzMl0AA1RVAUNhbmNlbCBhIHByZS1leGlzdGluZywgb24tZ29pbmcgbXVsdGlzaWcgdHJhbnNhY3Rpb24uIEFueSBkZXBvc2l0IHJlc2VydmVkIHByZXZpb3VzbHnEZm9yIHRoaXMgb3BlcmF0aW9uIHdpbGwgYmUgdW5yZXNlcnZlZCBvbiBzdWNjZXNzLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAFUBLSBgdGhyZXNob2xkYDogVGhlIHRvdGFsIG51bWJlciBvZiBhcHByb3ZhbHMgZm9yIHRoaXMgZGlzcGF0Y2ggYmVmb3JlIGl0IGlzIGV4ZWN1dGVkLkEBLSBgb3RoZXJfc2lnbmF0b3JpZXNgOiBUaGUgYWNjb3VudHMgKG90aGVyIHRoYW4gdGhlIHNlbmRlcikgd2hvIGNhbiBhcHByb3ZlIHRoaXNsZGlzcGF0Y2guIE1heSBub3QgYmUgZW1wdHkuXQEtIGB0aW1lcG9pbnRgOiBUaGUgdGltZXBvaW50IChibG9jayBudW1iZXIgYW5kIHRyYW5zYWN0aW9uIGluZGV4KSBvZiB0aGUgZmlyc3QgYXBwcm92YWx4dHJhbnNhY3Rpb24gZm9yIHRoaXMgZGlzcGF0Y2guzC0gYGNhbGxfaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBjYWxsIHRvIGJlIGV4ZWN1dGVkLgA0IyMgQ29tcGxleGl0eSQtIGBPKFMpYC7MLSBVcCB0byBvbmUgYmFsYW5jZS1yZXNlcnZlIG9yIHVucmVzZXJ2ZSBvcGVyYXRpb24uPQEtIE9uZSBwYXNzdGhyb3VnaCBvcGVyYXRpb24sIG9uZSBpbnNlcnQsIGJvdGggYE8oUylgIHdoZXJlIGBTYCBpcyB0aGUgbnVtYmVyIG9mRQEgIHNpZ25hdG9yaWVzLiBgU2AgaXMgY2FwcGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggd2VpZ2h0IGJlaW5nIHByb3BvcnRpb25hbC68LSBPbmUgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFMpYC4wLSBPbmUgZXZlbnQuhC0gSS9POiAxIHJlYWQgYE8oUylgLCBvbmUgcmVtb3ZlLnAtIFN0b3JhZ2U6IHJlbW92ZXMgb25lIGl0ZW0uBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLhEDBBhPcHRpb24EBFQBFQMBCBBOb25lAAAAEFNvbWUEABUDAAABAAAVAwg8cGFsbGV0X211bHRpc2lnJFRpbWVwb2ludAQsQmxvY2tOdW1iZXIBEAAIARhoZWlnaHQQASxCbG9ja051bWJlcgABFGluZGV4EAEMdTMyAAAZAww8cGFsbGV0X2JvdW50aWVzGHBhbGxldBBDYWxsCARUAARJAAEkOHByb3Bvc2VfYm91bnR5CAEUdmFsdWX8ATxCYWxhbmNlT2Y8VCwgST4AASxkZXNjcmlwdGlvbjgBHFZlYzx1OD4AADBUUHJvcG9zZSBhIG5ldyBib3VudHkuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AUQFQYXltZW50OiBgVGlwUmVwb3J0RGVwb3NpdEJhc2VgIHdpbGwgYmUgcmVzZXJ2ZWQgZnJvbSB0aGUgb3JpZ2luIGFjY291bnQsIGFzIHdlbGwgYXNRAWBEYXRhRGVwb3NpdFBlckJ5dGVgIGZvciBlYWNoIGJ5dGUgaW4gYHJlYXNvbmAuIEl0IHdpbGwgYmUgdW5yZXNlcnZlZCB1cG9uIGFwcHJvdmFsLGRvciBzbGFzaGVkIHdoZW4gcmVqZWN0ZWQuAPgtIGBjdXJhdG9yYDogVGhlIGN1cmF0b3IgYWNjb3VudCB3aG9tIHdpbGwgbWFuYWdlIHRoaXMgYm91bnR5LmQtIGBmZWVgOiBUaGUgY3VyYXRvciBmZWUuJQEtIGB2YWx1ZWA6IFRoZSB0b3RhbCBwYXltZW50IGFtb3VudCBvZiB0aGlzIGJvdW50eSwgY3VyYXRvciBmZWUgaW5jbHVkZWQuwC0gYGRlc2NyaXB0aW9uYDogVGhlIGRlc2NyaXB0aW9uIG9mIHRoaXMgYm91bnR5LjhhcHByb3ZlX2JvdW50eQQBJGJvdW50eV9pZOwBLEJvdW50eUluZGV4AAEcXQFBcHByb3ZlIGEgYm91bnR5IHByb3Bvc2FsLiBBdCBhIGxhdGVyIHRpbWUsIHRoZSBib3VudHkgd2lsbCBiZSBmdW5kZWQgYW5kIGJlY29tZSBhY3RpdmWoYW5kIHRoZSBvcmlnaW5hbCBkZXBvc2l0IHdpbGwgYmUgcmV0dXJuZWQuAKRNYXkgb25seSBiZSBjYWxsZWQgZnJvbSBgVDo6U3BlbmRPcmlnaW5gLgA0IyMgQ29tcGxleGl0eRwtIE8oMSkuPHByb3Bvc2VfY3VyYXRvcgwBJGJvdW50eV9pZOwBLEJvdW50eUluZGV4AAEcY3VyYXRvcsUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABDGZlZfwBPEJhbGFuY2VPZjxULCBJPgACGJRQcm9wb3NlIGEgY3VyYXRvciB0byBhIGZ1bmRlZCBib3VudHkuAKRNYXkgb25seSBiZSBjYWxsZWQgZnJvbSBgVDo6U3BlbmRPcmlnaW5gLgA0IyMgQ29tcGxleGl0eRwtIE8oMSkuQHVuYXNzaWduX2N1cmF0b3IEASRib3VudHlfaWTsASxCb3VudHlJbmRleAADRHxVbmFzc2lnbiBjdXJhdG9yIGZyb20gYSBib3VudHkuAB0BVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGBSZWplY3RPcmlnaW5gIGEgc2lnbmVkIG9yaWdpbi4APQFJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgYFJlamVjdE9yaWdpbmAsIHdlIGFzc3VtZSB0aGF0IHRoZSBjdXJhdG9yIGlzMQFtYWxpY2lvdXMgb3IgaW5hY3RpdmUuIEFzIGEgcmVzdWx0LCB3ZSB3aWxsIHNsYXNoIHRoZSBjdXJhdG9yIHdoZW4gcG9zc2libGUuAGEBSWYgdGhlIG9yaWdpbiBpcyB0aGUgY3VyYXRvciwgd2UgdGFrZSB0aGlzIGFzIGEgc2lnbiB0aGV5IGFyZSB1bmFibGUgdG8gZG8gdGhlaXIgam9iIGFuZF0BdGhleSB3aWxsaW5nbHkgZ2l2ZSB1cC4gV2UgY291bGQgc2xhc2ggdGhlbSwgYnV0IGZvciBub3cgd2UgYWxsb3cgdGhlbSB0byByZWNvdmVyIHRoZWlyNQFkZXBvc2l0IGFuZCBleGl0IHdpdGhvdXQgaXNzdWUuIChXZSBtYXkgd2FudCB0byBjaGFuZ2UgdGhpcyBpZiBpdCBpcyBhYnVzZWQuKQBdAUZpbmFsbHksIHRoZSBvcmlnaW4gY2FuIGJlIGFueW9uZSBpZiBhbmQgb25seSBpZiB0aGUgY3VyYXRvciBpcyAiaW5hY3RpdmUiLiBUaGlzIGFsbG93c2EBYW55b25lIGluIHRoZSBjb21tdW5pdHkgdG8gY2FsbCBvdXQgdGhhdCBhIGN1cmF0b3IgaXMgbm90IGRvaW5nIHRoZWlyIGR1ZSBkaWxpZ2VuY2UsIGFuZDkBd2Ugc2hvdWxkIHBpY2sgYSBuZXcgY3VyYXRvci4gSW4gdGhpcyBjYXNlIHRoZSBjdXJhdG9yIHNob3VsZCBhbHNvIGJlIHNsYXNoZWQuADQjIyBDb21wbGV4aXR5HC0gTygxKS44YWNjZXB0X2N1cmF0b3IEASRib3VudHlfaWTsASxCb3VudHlJbmRleAAEHJRBY2NlcHQgdGhlIGN1cmF0b3Igcm9sZSBmb3IgYSBib3VudHkuKQFBIGRlcG9zaXQgd2lsbCBiZSByZXNlcnZlZCBmcm9tIGN1cmF0b3IgYW5kIHJlZnVuZCB1cG9uIHN1Y2Nlc3NmdWwgcGF5b3V0LgCQTWF5IG9ubHkgYmUgY2FsbGVkIGZyb20gdGhlIGN1cmF0b3IuADQjIyBDb21wbGV4aXR5HC0gTygxKS4wYXdhcmRfYm91bnR5CAEkYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAASxiZW5lZmljaWFyecUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAFKFkBQXdhcmQgYm91bnR5IHRvIGEgYmVuZWZpY2lhcnkgYWNjb3VudC4gVGhlIGJlbmVmaWNpYXJ5IHdpbGwgYmUgYWJsZSB0byBjbGFpbSB0aGUgZnVuZHM4YWZ0ZXIgYSBkZWxheS4AFQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSB0aGUgY3VyYXRvciBvZiB0aGlzIGJvdW50eS4AiC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBhd2FyZC4ZAS0gYGJlbmVmaWNpYXJ5YDogVGhlIGJlbmVmaWNpYXJ5IGFjY291bnQgd2hvbSB3aWxsIHJlY2VpdmUgdGhlIHBheW91dC4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLjBjbGFpbV9ib3VudHkEASRib3VudHlfaWTsASxCb3VudHlJbmRleAAGIOxDbGFpbSB0aGUgcGF5b3V0IGZyb20gYW4gYXdhcmRlZCBib3VudHkgYWZ0ZXIgcGF5b3V0IGRlbGF5LgAlAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBiZW5lZmljaWFyeSBvZiB0aGlzIGJvdW50eS4AiC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBjbGFpbS4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLjBjbG9zZV9ib3VudHkEASRib3VudHlfaWTsASxCb3VudHlJbmRleAAHJDkBQ2FuY2VsIGEgcHJvcG9zZWQgb3IgYWN0aXZlIGJvdW50eS4gQWxsIHRoZSBmdW5kcyB3aWxsIGJlIHNlbnQgdG8gdHJlYXN1cnkgYW5kzHRoZSBjdXJhdG9yIGRlcG9zaXQgd2lsbCBiZSB1bnJlc2VydmVkIGlmIHBvc3NpYmxlLgDIT25seSBgVDo6UmVqZWN0T3JpZ2luYCBpcyBhYmxlIHRvIGNhbmNlbCBhIGJvdW50eS4AjC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBjYW5jZWwuADQjIyBDb21wbGV4aXR5HC0gTygxKS5QZXh0ZW5kX2JvdW50eV9leHBpcnkIASRib3VudHlfaWTsASxCb3VudHlJbmRleAABGHJlbWFyazgBHFZlYzx1OD4ACCSsRXh0ZW5kIHRoZSBleHBpcnkgdGltZSBvZiBhbiBhY3RpdmUgYm91bnR5LgAVAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBjdXJhdG9yIG9mIHRoaXMgYm91bnR5LgCMLSBgYm91bnR5X2lkYDogQm91bnR5IElEIHRvIGV4dGVuZC6MLSBgcmVtYXJrYDogYWRkaXRpb25hbCBpbmZvcm1hdGlvbi4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy4dAwxUcGFsbGV0X2NoaWxkX2JvdW50aWVzGHBhbGxldBBDYWxsBARUAAEcQGFkZF9jaGlsZF9ib3VudHkMAUBwYXJlbnRfYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAARR2YWx1ZfwBMEJhbGFuY2VPZjxUPgABLGRlc2NyaXB0aW9uOAEcVmVjPHU4PgAATFxBZGQgYSBuZXcgY2hpbGQtYm91bnR5LgD8VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgdGhlIGN1cmF0b3Igb2YgcGFyZW503GJvdW50eSBhbmQgdGhlIHBhcmVudCBib3VudHkgbXVzdCBiZSBpbiAiYWN0aXZlIiBzdGF0ZS4ABQFDaGlsZC1ib3VudHkgZ2V0cyBhZGRlZCBzdWNjZXNzZnVsbHkgJiBmdW5kIGdldHMgdHJhbnNmZXJyZWQgZnJvbQkBcGFyZW50IGJvdW50eSB0byBjaGlsZC1ib3VudHkgYWNjb3VudCwgaWYgcGFyZW50IGJvdW50eSBoYXMgZW5vdWdobGZ1bmRzLCBlbHNlIHRoZSBjYWxsIGZhaWxzLgANAVVwcGVyIGJvdW5kIHRvIG1heGltdW0gbnVtYmVyIG9mIGFjdGl2ZSAgY2hpbGQgYm91bnRpZXMgdGhhdCBjYW4gYmWoYWRkZWQgYXJlIG1hbmFnZWQgdmlhIHJ1bnRpbWUgdHJhaXQgY29uZmlnmFtgQ29uZmlnOjpNYXhBY3RpdmVDaGlsZEJvdW50eUNvdW50YF0uAAEBSWYgdGhlIGNhbGwgaXMgc3VjY2VzcywgdGhlIHN0YXR1cyBvZiBjaGlsZC1ib3VudHkgaXMgdXBkYXRlZCB0byAiQWRkZWQiLgBNAS0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5IGZvciB3aGljaCBjaGlsZC1ib3VudHkgaXMgYmVpbmcgYWRkZWQusC0gYHZhbHVlYDogVmFsdWUgZm9yIGV4ZWN1dGluZyB0aGUgcHJvcG9zYWwu3C0gYGRlc2NyaXB0aW9uYDogVGV4dCBkZXNjcmlwdGlvbiBmb3IgdGhlIGNoaWxkLWJvdW50eS48cHJvcG9zZV9jdXJhdG9yEAFAcGFyZW50X2JvdW50eV9pZOwBLEJvdW50eUluZGV4AAE8Y2hpbGRfYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAARxjdXJhdG9yxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEMZmVl/AEwQmFsYW5jZU9mPFQ+AAE8oFByb3Bvc2UgY3VyYXRvciBmb3IgZnVuZGVkIGNoaWxkLWJvdW50eS4ADQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBjdXJhdG9yIG9mIHBhcmVudCBib3VudHkuABEBUGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8Ud29yay4ADQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiAiQWRkZWQiIHN0YXRlLCBmb3IgcHJvY2Vzc2luZyB0aGUgY2FsbC4gQW5kBQFzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgbW92ZWQgdG8gIkN1cmF0b3JQcm9wb3NlZCIgb24gc3VjY2Vzc2Z1bEBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LrQtIGBjdXJhdG9yYDogQWRkcmVzcyBvZiBjaGlsZC1ib3VudHkgY3VyYXRvci7sLSBgZmVlYDogcGF5bWVudCBmZWUgdG8gY2hpbGQtYm91bnR5IGN1cmF0b3IgZm9yIGV4ZWN1dGlvbi44YWNjZXB0X2N1cmF0b3IIAUBwYXJlbnRfYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAATxjaGlsZF9ib3VudHlfaWTsASxCb3VudHlJbmRleAACTLRBY2NlcHQgdGhlIGN1cmF0b3Igcm9sZSBmb3IgdGhlIGNoaWxkLWJvdW50eS4A9FRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBjdXJhdG9yIG9mIHRoaXM0Y2hpbGQtYm91bnR5LgDsQSBkZXBvc2l0IHdpbGwgYmUgcmVzZXJ2ZWQgZnJvbSB0aGUgY3VyYXRvciBhbmQgcmVmdW5kIHVwb26Ic3VjY2Vzc2Z1bCBwYXlvdXQgb3IgY2FuY2VsbGF0aW9uLgD4RmVlIGZvciBjdXJhdG9yIGlzIGRlZHVjdGVkIGZyb20gY3VyYXRvciBmZWUgb2YgcGFyZW50IGJvdW50eS4AEQFQYXJlbnQgYm91bnR5IG11c3QgYmUgaW4gYWN0aXZlIHN0YXRlLCBmb3IgdGhpcyBjaGlsZC1ib3VudHkgY2FsbCB0bxR3b3JrLgANAUNoaWxkLWJvdW50eSBtdXN0IGJlIGluICJDdXJhdG9yUHJvcG9zZWQiIHN0YXRlLCBmb3IgcHJvY2Vzc2luZyB0aGUJAWNhbGwuIEFuZCBzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgbW92ZWQgdG8gIkFjdGl2ZSIgb24gc3VjY2Vzc2Z1bEBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LkB1bmFzc2lnbl9jdXJhdG9yCAFAcGFyZW50X2JvdW50eV9pZOwBLEJvdW50eUluZGV4AAE8Y2hpbGRfYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAA4iUVW5hc3NpZ24gY3VyYXRvciBmcm9tIGEgY2hpbGQtYm91bnR5LgAJAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBjYW4gYmUgZWl0aGVyIGBSZWplY3RPcmlnaW5gLCBvctx0aGUgY3VyYXRvciBvZiB0aGUgcGFyZW50IGJvdW50eSwgb3IgYW55IHNpZ25lZCBvcmlnaW4uAPhGb3IgdGhlIG9yaWdpbiBvdGhlciB0aGFuIFQ6OlJlamVjdE9yaWdpbiBhbmQgdGhlIGNoaWxkLWJvdW50eQEBY3VyYXRvciwgcGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2FsbCB0bwkBd29yay4gV2UgYWxsb3cgY2hpbGQtYm91bnR5IGN1cmF0b3IgYW5kIFQ6OlJlamVjdE9yaWdpbiB0byBleGVjdXRlyHRoaXMgY2FsbCBpcnJlc3BlY3RpdmUgb2YgdGhlIHBhcmVudCBib3VudHkgc3RhdGUuANxJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgYFJlamVjdE9yaWdpbmAgb3IgdGhlBQFwYXJlbnQgYm91bnR5IGN1cmF0b3IsIHdlIGFzc3VtZSB0aGF0IHRoZSBjaGlsZC1ib3VudHkgY3VyYXRvciBpcw0BbWFsaWNpb3VzIG9yIGluYWN0aXZlLiBBcyBhIHJlc3VsdCwgY2hpbGQtYm91bnR5IGN1cmF0b3IgZGVwb3NpdCBpcyBzbGFzaGVkLgAFAUlmIHRoZSBvcmlnaW4gaXMgdGhlIGNoaWxkLWJvdW50eSBjdXJhdG9yLCB3ZSB0YWtlIHRoaXMgYXMgYSBzaWduCQF0aGF0IHRoZXkgYXJlIHVuYWJsZSB0byBkbyB0aGVpciBqb2IsIGFuZCBhcmUgd2lsbGluZ2x5IGdpdmluZyB1cC4JAVdlIGNvdWxkIHNsYXNoIHRoZSBkZXBvc2l0LCBidXQgZm9yIG5vdyB3ZSBhbGxvdyB0aGVtIHRvIHVucmVzZXJ2ZREBdGhlaXIgZGVwb3NpdCBhbmQgZXhpdCB3aXRob3V0IGlzc3VlLiAoV2UgbWF5IHdhbnQgdG8gY2hhbmdlIHRoaXMgaWY4aXQgaXMgYWJ1c2VkLikABQFGaW5hbGx5LCB0aGUgb3JpZ2luIGNhbiBiZSBhbnlvbmUgaWZmIHRoZSBjaGlsZC1ib3VudHkgY3VyYXRvciBpcwkBImluYWN0aXZlIi4gRXhwaXJ5IHVwZGF0ZSBkdWUgb2YgcGFyZW50IGJvdW50eSBpcyB1c2VkIHRvIGVzdGltYXRlnGluYWN0aXZlIHN0YXRlIG9mIGNoaWxkLWJvdW50eSBjdXJhdG9yLgANAVRoaXMgYWxsb3dzIGFueW9uZSBpbiB0aGUgY29tbXVuaXR5IHRvIGNhbGwgb3V0IHRoYXQgYSBjaGlsZC1ib3VudHkJAWN1cmF0b3IgaXMgbm90IGRvaW5nIHRoZWlyIGR1ZSBkaWxpZ2VuY2UsIGFuZCB3ZSBzaG91bGQgcGljayBhIG5ld/hvbmUuIEluIHRoaXMgY2FzZSB0aGUgY2hpbGQtYm91bnR5IGN1cmF0b3IgZGVwb3NpdCBpcyBzbGFzaGVkLgABAVN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBtb3ZlZCB0byBBZGRlZCBzdGF0ZSBvbiBzdWNjZXNzZnVsIGNhbGwsY29tcGxldGlvbi4AtC0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5LqwtIGBjaGlsZF9ib3VudHlfaWRgOiBJbmRleCBvZiBjaGlsZCBib3VudHkuSGF3YXJkX2NoaWxkX2JvdW50eQwBQHBhcmVudF9ib3VudHlfaWTsASxCb3VudHlJbmRleAABPGNoaWxkX2JvdW50eV9pZOwBLEJvdW50eUluZGV4AAEsYmVuZWZpY2lhcnnFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4ABESQQXdhcmQgY2hpbGQtYm91bnR5IHRvIGEgYmVuZWZpY2lhcnkuAPhUaGUgYmVuZWZpY2lhcnkgd2lsbCBiZSBhYmxlIHRvIGNsYWltIHRoZSBmdW5kcyBhZnRlciBhIGRlbGF5LgD8VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgdGhlIHBhcmVudCBjdXJhdG9yIG9ydGN1cmF0b3Igb2YgdGhpcyBjaGlsZC1ib3VudHkuABEBUGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8Ud29yay4ACQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiBhY3RpdmUgc3RhdGUsIGZvciBwcm9jZXNzaW5nIHRoZSBjYWxsLiBBbmQRAXN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBtb3ZlZCB0byAiUGVuZGluZ1BheW91dCIgb24gc3VjY2Vzc2Z1bCBjYWxsLGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LpQtIGBiZW5lZmljaWFyeWA6IEJlbmVmaWNpYXJ5IGFjY291bnQuSGNsYWltX2NoaWxkX2JvdW50eQgBQHBhcmVudF9ib3VudHlfaWTsASxCb3VudHlJbmRleAABPGNoaWxkX2JvdW50eV9pZOwBLEJvdW50eUluZGV4AAVABQFDbGFpbSB0aGUgcGF5b3V0IGZyb20gYW4gYXdhcmRlZCBjaGlsZC1ib3VudHkgYWZ0ZXIgcGF5b3V0IGRlbGF5LgDsVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG1heSBiZSBhbnkgc2lnbmVkIG9yaWdpbi4ABQFDYWxsIHdvcmtzIGluZGVwZW5kZW50IG9mIHBhcmVudCBib3VudHkgc3RhdGUsIE5vIG5lZWQgZm9yIHBhcmVudHRib3VudHkgdG8gYmUgaW4gYWN0aXZlIHN0YXRlLgARAVRoZSBCZW5lZmljaWFyeSBpcyBwYWlkIG91dCB3aXRoIGFncmVlZCBib3VudHkgdmFsdWUuIEN1cmF0b3IgZmVlIGlzlHBhaWQgJiBjdXJhdG9yIGRlcG9zaXQgaXMgdW5yZXNlcnZlZC4ABQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiAiUGVuZGluZ1BheW91dCIgc3RhdGUsIGZvciBwcm9jZXNzaW5nIHRoZfxjYWxsLiBBbmQgaW5zdGFuY2Ugb2YgY2hpbGQtYm91bnR5IGlzIHJlbW92ZWQgZnJvbSB0aGUgc3RhdGUgb25sc3VjY2Vzc2Z1bCBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LkhjbG9zZV9jaGlsZF9ib3VudHkIAUBwYXJlbnRfYm91bnR5X2lk7AEsQm91bnR5SW5kZXgAATxjaGlsZF9ib3VudHlfaWTsASxCb3VudHlJbmRleAAGWBEBQ2FuY2VsIGEgcHJvcG9zZWQgb3IgYWN0aXZlIGNoaWxkLWJvdW50eS4gQ2hpbGQtYm91bnR5IGFjY291bnQgZnVuZHMJAWFyZSB0cmFuc2ZlcnJlZCB0byBwYXJlbnQgYm91bnR5IGFjY291bnQuIFRoZSBjaGlsZC1ib3VudHkgY3VyYXRvcphkZXBvc2l0IG1heSBiZSB1bnJlc2VydmVkIGlmIHBvc3NpYmxlLgAJAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGVpdGhlciBwYXJlbnQgY3VyYXRvciBvckhgVDo6UmVqZWN0T3JpZ2luYC4A8ElmIHRoZSBzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgYEFjdGl2ZWAsIGN1cmF0b3IgZGVwb3NpdCBpcyx1bnJlc2VydmVkLgD0SWYgdGhlIHN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBgUGVuZGluZ1BheW91dGAsIGNhbGwgZmFpbHMgJnhyZXR1cm5zIGBQZW5kaW5nUGF5b3V0YCBlcnJvci4ADQFGb3IgdGhlIG9yaWdpbiBvdGhlciB0aGFuIFQ6OlJlamVjdE9yaWdpbiwgcGFyZW50IGJvdW50eSBtdXN0IGJlIGlu8GFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8gd29yay4gRm9yIG9yaWdpbpBUOjpSZWplY3RPcmlnaW4gZXhlY3V0aW9uIGlzIGZvcmNlZC4AAQFJbnN0YW5jZSBvZiBjaGlsZC1ib3VudHkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBzdGF0ZSBvbiBzdWNjZXNzZnVsQGNhbGwgY29tcGxldGlvbi4AtC0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5LqwtIGBjaGlsZF9ib3VudHlfaWRgOiBJbmRleCBvZiBjaGlsZCBib3VudHkuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLiEDDJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UYcGFsbGV0EENhbGwEBFQAARQ8c3VibWl0X3Vuc2lnbmVkCAEwcmF3X3NvbHV0aW9uJQMBsEJveDxSYXdTb2x1dGlvbjxTb2x1dGlvbk9mPFQ6Ok1pbmVyQ29uZmlnPj4+AAEcd2l0bmVzc/kDAVhTb2x1dGlvbk9yU25hcHNob3RTaXplAAA4pFN1Ym1pdCBhIHNvbHV0aW9uIGZvciB0aGUgdW5zaWduZWQgcGhhc2UuAMhUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvIHRoaXMgY2FsbCBtdXN0IGJlIF9fbm9uZV9fLgA9AVRoaXMgc3VibWlzc2lvbiBpcyBjaGVja2VkIG9uIHRoZSBmbHkuIE1vcmVvdmVyLCB0aGlzIHVuc2lnbmVkIHNvbHV0aW9uIGlzIG9ubHlVAXZhbGlkYXRlZCB3aGVuIHN1Ym1pdHRlZCB0byB0aGUgcG9vbCBmcm9tIHRoZSAqKmxvY2FsKiogbm9kZS4gRWZmZWN0aXZlbHksIHRoaXMgbWVhbnNdAXRoYXQgb25seSBhY3RpdmUgdmFsaWRhdG9ycyBjYW4gc3VibWl0IHRoaXMgdHJhbnNhY3Rpb24gd2hlbiBhdXRob3JpbmcgYSBibG9jayAoc2ltaWxhckB0byBhbiBpbmhlcmVudCkuAFkBVG8gcHJldmVudCBhbnkgaW5jb3JyZWN0IHNvbHV0aW9uIChhbmQgdGh1cyB3YXN0ZWQgdGltZS93ZWlnaHQpLCB0aGlzIHRyYW5zYWN0aW9uIHdpbGxNAXBhbmljIGlmIHRoZSBzb2x1dGlvbiBzdWJtaXR0ZWQgYnkgdGhlIHZhbGlkYXRvciBpcyBpbnZhbGlkIGluIGFueSB3YXksIGVmZmVjdGl2ZWx5nHB1dHRpbmcgdGhlaXIgYXV0aG9yaW5nIHJld2FyZCBhdCByaXNrLgDgTm8gZGVwb3NpdCBvciByZXdhcmQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3VibWlzc2lvbi5sc2V0X21pbmltdW1fdW50cnVzdGVkX3Njb3JlBAFAbWF5YmVfbmV4dF9zY29yZf0DAVRPcHRpb248RWxlY3Rpb25TY29yZT4AARSwU2V0IGEgbmV3IHZhbHVlIGZvciBgTWluaW11bVVudHJ1c3RlZFNjb3JlYC4A2ERpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIGFsaWduZWQgd2l0aCBgVDo6Rm9yY2VPcmlnaW5gLgDwVGhpcyBjaGVjayBjYW4gYmUgdHVybmVkIG9mZiBieSBzZXR0aW5nIHRoZSB2YWx1ZSB0byBgTm9uZWAudHNldF9lbWVyZ2VuY3lfZWxlY3Rpb25fcmVzdWx0BAEgc3VwcG9ydHMBBAFYU3VwcG9ydHM8VDo6QWNjb3VudElkPgACIFkBU2V0IGEgc29sdXRpb24gaW4gdGhlIHF1ZXVlLCB0byBiZSBoYW5kZWQgb3V0IHRvIHRoZSBjbGllbnQgb2YgdGhpcyBwYWxsZXQgaW4gdGhlIG5leHSIY2FsbCB0byBgRWxlY3Rpb25Qcm92aWRlcjo6ZWxlY3RgLgBFAVRoaXMgY2FuIG9ubHkgYmUgc2V0IGJ5IGBUOjpGb3JjZU9yaWdpbmAsIGFuZCBvbmx5IHdoZW4gdGhlIHBoYXNlIGlzIGBFbWVyZ2VuY3lgLgBhAVRoZSBzb2x1dGlvbiBpcyBub3QgY2hlY2tlZCBmb3IgYW55IGZlYXNpYmlsaXR5IGFuZCBpcyBhc3N1bWVkIHRvIGJlIHRydXN0d29ydGh5LCBhcyBhbnlRAWZlYXNpYmlsaXR5IGNoZWNrIGl0c2VsZiBjYW4gaW4gcHJpbmNpcGxlIGNhdXNlIHRoZSBlbGVjdGlvbiBwcm9jZXNzIHRvIGZhaWwgKGR1ZSB0b2htZW1vcnkvd2VpZ2h0IGNvbnN0cmFpbnMpLhhzdWJtaXQEATByYXdfc29sdXRpb24lAwGwQm94PFJhd1NvbHV0aW9uPFNvbHV0aW9uT2Y8VDo6TWluZXJDb25maWc+Pj4AAyScU3VibWl0IGEgc29sdXRpb24gZm9yIHRoZSBzaWduZWQgcGhhc2UuANBUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvIHRoaXMgY2FsbCBtdXN0IGJlIF9fc2lnbmVkX18uAF0BVGhlIHNvbHV0aW9uIGlzIHBvdGVudGlhbGx5IHF1ZXVlZCwgYmFzZWQgb24gdGhlIGNsYWltZWQgc2NvcmUgYW5kIHByb2Nlc3NlZCBhdCB0aGUgZW5kUG9mIHRoZSBzaWduZWQgcGhhc2UuAF0BQSBkZXBvc2l0IGlzIHJlc2VydmVkIGFuZCByZWNvcmRlZCBmb3IgdGhlIHNvbHV0aW9uLiBCYXNlZCBvbiB0aGUgb3V0Y29tZSwgdGhlIHNvbHV0aW9uFQFtaWdodCBiZSByZXdhcmRlZCwgc2xhc2hlZCwgb3IgZ2V0IGFsbCBvciBhIHBhcnQgb2YgdGhlIGRlcG9zaXQgYmFjay5MZ292ZXJuYW5jZV9mYWxsYmFjawgBQG1heWJlX21heF92b3RlcnNhAgEsT3B0aW9uPHUzMj4AAURtYXliZV9tYXhfdGFyZ2V0c2ECASxPcHRpb248dTMyPgAEEIBUcmlnZ2VyIHRoZSBnb3Zlcm5hbmNlIGZhbGxiYWNrLgBJAVRoaXMgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gW2BQaGFzZTo6RW1lcmdlbmN5YF0gaXMgZW5hYmxlZCwgYXMgYW4gYWx0ZXJuYXRpdmUgdG/AY2FsbGluZyBbYENhbGw6OnNldF9lbWVyZ2VuY3lfZWxlY3Rpb25fcmVzdWx0YF0uBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLiUDCJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UsUmF3U29sdXRpb24EBFMBKQMADAEgc29sdXRpb24pAwEEUwABFHNjb3Jl9QMBNEVsZWN0aW9uU2NvcmUAARRyb3VuZBABDHUzMgAAKQMIQHBvbGthZG90X3J1bnRpbWVUTnBvc0NvbXBhY3RTb2x1dGlvbjE2AABAARh2b3RlczEtAwAAARh2b3RlczI5AwAAARh2b3RlczNNAwAAARh2b3RlczRZAwAAARh2b3RlczVlAwAAARh2b3RlczZxAwAAARh2b3Rlczd9AwAAARh2b3RlcziJAwAAARh2b3RlczmVAwAAARx2b3RlczEwoQMAAAEcdm90ZXMxMa0DAAABHHZvdGVzMTK5AwAAARx2b3RlczEzxQMAAAEcdm90ZXMxNNEDAAABHHZvdGVzMTXdAwAAARx2b3RlczE26QMAAAAtAwAAAjEDADEDAAAECOw1AwA1AwAABm0BADkDAAACPQMAPQMAAAQM7EEDNQMAQQMAAAQINQNFAwBFAwAABkkDAEkDDDRzcF9hcml0aG1ldGljKHBlcl90aGluZ3MYUGVyVTE2AAAEAG0BAQx1MTYAAE0DAAACUQMAUQMAAAQM7FUDNQMAVQMAAAMCAAAAQQMAWQMAAAJdAwBdAwAABAzsYQM1AwBhAwAAAwMAAABBAwBlAwAAAmkDAGkDAAAEDOxtAzUDAG0DAAADBAAAAEEDAHEDAAACdQMAdQMAAAQM7HkDNQMAeQMAAAMFAAAAQQMAfQMAAAKBAwCBAwAABAzshQM1AwCFAwAAAwYAAABBAwCJAwAAAo0DAI0DAAAEDOyRAzUDAJEDAAADBwAAAEEDAJUDAAACmQMAmQMAAAQM7J0DNQMAnQMAAAMIAAAAQQMAoQMAAAKlAwClAwAABAzsqQM1AwCpAwAAAwkAAABBAwCtAwAAArEDALEDAAAEDOy1AzUDALUDAAADCgAAAEEDALkDAAACvQMAvQMAAAQM7MEDNQMAwQMAAAMLAAAAQQMAxQMAAALJAwDJAwAABAzszQM1AwDNAwAAAwwAAABBAwDRAwAAAtUDANUDAAAEDOzZAzUDANkDAAADDQAAAEEDAN0DAAAC4QMA4QMAAAQM7OUDNQMA5QMAAAMOAAAAQQMA6QMAAALtAwDtAwAABAzs8QM1AwDxAwAAAw8AAABBAwD1AwhEc3BfbnBvc19lbGVjdGlvbnM0RWxlY3Rpb25TY29yZQAADAE0bWluaW1hbF9zdGFrZRgBPEV4dGVuZGVkQmFsYW5jZQABJHN1bV9zdGFrZRgBPEV4dGVuZGVkQmFsYW5jZQABRHN1bV9zdGFrZV9zcXVhcmVkGAE8RXh0ZW5kZWRCYWxhbmNlAAD5AwiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlWFNvbHV0aW9uT3JTbmFwc2hvdFNpemUAAAgBGHZvdGVyc+wBDHUzMgABHHRhcmdldHPsAQx1MzIAAP0DBBhPcHRpb24EBFQB9QMBCBBOb25lAAAAEFNvbWUEAPUDAAABAAABBAAAAgUEAAUEAAAECAAJBAAJBAhEc3BfbnBvc19lbGVjdGlvbnMcU3VwcG9ydAQkQWNjb3VudElkAQAACAEUdG90YWwYATxFeHRlbmRlZEJhbGFuY2UAARh2b3RlcnMNBAGEVmVjPChBY2NvdW50SWQsIEV4dGVuZGVkQmFsYW5jZSk+AAANBAAAAhEEABEEAAAECAAYABUEDEBwYWxsZXRfYmFnc19saXN0GHBhbGxldBBDYWxsCARUAARJAAEMFHJlYmFnBAEoZGlzbG9jYXRlZMUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAAKFkBRGVjbGFyZSB0aGF0IHNvbWUgYGRpc2xvY2F0ZWRgIGFjY291bnQgaGFzLCB0aHJvdWdoIHJld2FyZHMgb3IgcGVuYWx0aWVzLCBzdWZmaWNpZW50bHlRAWNoYW5nZWQgaXRzIHNjb3JlIHRoYXQgaXQgc2hvdWxkIHByb3Blcmx5IGZhbGwgaW50byBhIGRpZmZlcmVudCBiYWcgdGhhbiBpdHMgY3VycmVudBBvbmUuAB0BQW55b25lIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24gYWJvdXQgYW55IHBvdGVudGlhbGx5IGRpc2xvY2F0ZWQgYWNjb3VudC4ASQFXaWxsIGFsd2F5cyB1cGRhdGUgdGhlIHN0b3JlZCBzY29yZSBvZiBgZGlzbG9jYXRlZGAgdG8gdGhlIGNvcnJlY3Qgc2NvcmUsIGJhc2VkIG9uQGBTY29yZVByb3ZpZGVyYC4A1ElmIGBkaXNsb2NhdGVkYCBkb2VzIG5vdCBleGlzdHMsIGl0IHJldHVybnMgYW4gZXJyb3IuPHB1dF9pbl9mcm9udF9vZgQBHGxpZ2h0ZXLFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASjQTW92ZSB0aGUgY2FsbGVyJ3MgSWQgZGlyZWN0bHkgaW4gZnJvbnQgb2YgYGxpZ2h0ZXJgLgBZAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIElkIG9mNQF0aGUgYWNjb3VudCBnb2luZyBpbiBmcm9udCBvZiBgbGlnaHRlcmAuIEZlZSBpcyBwYXllZCBieSB0aGUgb3JpZ2luIHVuZGVyIGFsbDhjaXJjdW1zdGFuY2VzLgA4T25seSB3b3JrcyBpZjoAlC0gYm90aCBub2RlcyBhcmUgd2l0aGluIHRoZSBzYW1lIGJhZyzQLSBhbmQgYG9yaWdpbmAgaGFzIGEgZ3JlYXRlciBgU2NvcmVgIHRoYW4gYGxpZ2h0ZXJgLlRwdXRfaW5fZnJvbnRfb2Zfb3RoZXIIARxoZWF2aWVyxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEcbGlnaHRlcsUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgACDBEBU2FtZSBhcyBbYFBhbGxldDo6cHV0X2luX2Zyb250X29mYF0sIGJ1dCBpdCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZS4AyEZlZSBpcyBwYWlkIGJ5IHRoZSBvcmlnaW4gdW5kZXIgYWxsIGNpcmN1bXN0YW5jZXMuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLhkEDFxwYWxsZXRfbm9taW5hdGlvbl9wb29scxhwYWxsZXQQQ2FsbAQEVAABaBBqb2luCAEYYW1vdW50/AEwQmFsYW5jZU9mPFQ+AAEccG9vbF9pZBABGFBvb2xJZAAAKEUBU3Rha2UgZnVuZHMgd2l0aCBhIHBvb2wuIFRoZSBhbW91bnQgdG8gYm9uZCBpcyB0cmFuc2ZlcnJlZCBmcm9tIHRoZSBtZW1iZXIgdG8gdGhl3HBvb2xzIGFjY291bnQgYW5kIGltbWVkaWF0ZWx5IGluY3JlYXNlcyB0aGUgcG9vbHMgYm9uZC4AGCMgTm90ZQDMKiBBbiBhY2NvdW50IGNhbiBvbmx5IGJlIGEgbWVtYmVyIG9mIGEgc2luZ2xlIHBvb2wu2CogQW4gYWNjb3VudCBjYW5ub3Qgam9pbiB0aGUgc2FtZSBwb29sIG11bHRpcGxlIHRpbWVzLkEBKiBUaGlzIGNhbGwgd2lsbCAqbm90KiBkdXN0IHRoZSBtZW1iZXIgYWNjb3VudCwgc28gdGhlIG1lbWJlciBtdXN0IGhhdmUgYXQgbGVhc3TIICBgZXhpc3RlbnRpYWwgZGVwb3NpdCArIGFtb3VudGAgaW4gdGhlaXIgYWNjb3VudC7QKiBPbmx5IGEgcG9vbCB3aXRoIFtgUG9vbFN0YXRlOjpPcGVuYF0gY2FuIGJlIGpvaW5lZChib25kX2V4dHJhBAEUZXh0cmEdBAFcQm9uZEV4dHJhPEJhbGFuY2VPZjxUPj4AARxFAUJvbmQgYGV4dHJhYCBtb3JlIGZ1bmRzIGZyb20gYG9yaWdpbmAgaW50byB0aGUgcG9vbCB0byB3aGljaCB0aGV5IGFscmVhZHkgYmVsb25nLgBJAUFkZGl0aW9uYWwgZnVuZHMgY2FuIGNvbWUgZnJvbSBlaXRoZXIgdGhlIGZyZWUgYmFsYW5jZSBvZiB0aGUgYWNjb3VudCwgb2YgZnJvbSB0aGWcYWNjdW11bGF0ZWQgcmV3YXJkcywgc2VlIFtgQm9uZEV4dHJhYF0uAD0BQm9uZGluZyBleHRyYSBmdW5kcyBpbXBsaWVzIGFuIGF1dG9tYXRpYyBwYXlvdXQgb2YgYWxsIHBlbmRpbmcgcmV3YXJkcyBhcyB3ZWxsLgkBU2VlIGBib25kX2V4dHJhX290aGVyYCB0byBib25kIHBlbmRpbmcgcmV3YXJkcyBvZiBgb3RoZXJgIG1lbWJlcnMuMGNsYWltX3BheW91dAACIFUBQSBib25kZWQgbWVtYmVyIGNhbiB1c2UgdGhpcyB0byBjbGFpbSB0aGVpciBwYXlvdXQgYmFzZWQgb24gdGhlIHJld2FyZHMgdGhhdCB0aGUgcG9vbGEBaGFzIGFjY3VtdWxhdGVkIHNpbmNlIHRoZWlyIGxhc3QgY2xhaW1lZCBwYXlvdXQgKE9SIHNpbmNlIGpvaW5pbmcgaWYgdGhpcyBpcyB0aGVpciBmaXJzdD0BdGltZSBjbGFpbWluZyByZXdhcmRzKS4gVGhlIHBheW91dCB3aWxsIGJlIHRyYW5zZmVycmVkIHRvIHRoZSBtZW1iZXIncyBhY2NvdW50LgBJAVRoZSBtZW1iZXIgd2lsbCBlYXJuIHJld2FyZHMgcHJvIHJhdGEgYmFzZWQgb24gdGhlIG1lbWJlcnMgc3Rha2UgdnMgdGhlIHN1bSBvZiB0aGXQbWVtYmVycyBpbiB0aGUgcG9vbHMgc3Rha2UuIFJld2FyZHMgZG8gbm90ICJleHBpcmUiLgBBAVNlZSBgY2xhaW1fcGF5b3V0X290aGVyYCB0byBjbGFpbSByZXdhcmRzIG9uIGJlaGFsZiBvZiBzb21lIGBvdGhlcmAgcG9vbCBtZW1iZXIuGHVuYm9uZAgBOG1lbWJlcl9hY2NvdW50xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAFAdW5ib25kaW5nX3BvaW50c/wBMEJhbGFuY2VPZjxUPgADfEUBVW5ib25kIHVwIHRvIGB1bmJvbmRpbmdfcG9pbnRzYCBvZiB0aGUgYG1lbWJlcl9hY2NvdW50YCdzIGZ1bmRzIGZyb20gdGhlIHBvb2wuIEl0RQFpbXBsaWNpdGx5IGNvbGxlY3RzIHRoZSByZXdhcmRzIG9uZSBsYXN0IHRpbWUsIHNpbmNlIG5vdCBkb2luZyBzbyB3b3VsZCBtZWFuIHNvbWVscmV3YXJkcyB3b3VsZCBiZSBmb3JmZWl0ZWQuAE0BVW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCB0aGlzIGNhbGwgY2FuIGJlIGRpc3BhdGNoZWQgcGVybWlzc2lvbmxlc3NseSAoaS5lLiBieSBhbnkkYWNjb3VudCkuAKwjIENvbmRpdGlvbnMgZm9yIGEgcGVybWlzc2lvbmxlc3MgZGlzcGF0Y2guAF0BKiBUaGUgcG9vbCBpcyBibG9ja2VkIGFuZCB0aGUgY2FsbGVyIGlzIGVpdGhlciB0aGUgcm9vdCBvciBib3VuY2VyLiBUaGlzIGlzIHJlZmVyZWVkIHRvMCAgYXMgYSBraWNrLvQqIFRoZSBwb29sIGlzIGRlc3Ryb3lpbmcgYW5kIHRoZSBtZW1iZXIgaXMgbm90IHRoZSBkZXBvc2l0b3IuVQEqIFRoZSBwb29sIGlzIGRlc3Ryb3lpbmcsIHRoZSBtZW1iZXIgaXMgdGhlIGRlcG9zaXRvciBhbmQgbm8gb3RoZXIgbWVtYmVycyBhcmUgaW4gdGhlHCAgcG9vbC4AEQEjIyBDb25kaXRpb25zIGZvciBwZXJtaXNzaW9uZWQgZGlzcGF0Y2ggKGkuZS4gdGhlIGNhbGxlciBpcyBhbHNvIHRoZUhgbWVtYmVyX2FjY291bnRgKToAiCogVGhlIGNhbGxlciBpcyBub3QgdGhlIGRlcG9zaXRvci5VASogVGhlIGNhbGxlciBpcyB0aGUgZGVwb3NpdG9yLCB0aGUgcG9vbCBpcyBkZXN0cm95aW5nIGFuZCBubyBvdGhlciBtZW1iZXJzIGFyZSBpbiB0aGUcICBwb29sLgAYIyBOb3RlAB0BSWYgdGhlcmUgYXJlIHRvbyBtYW55IHVubG9ja2luZyBjaHVua3MgdG8gdW5ib25kIHdpdGggdGhlIHBvb2wgYWNjb3VudCxRAVtgQ2FsbDo6cG9vbF93aXRoZHJhd191bmJvbmRlZGBdIGNhbiBiZSBjYWxsZWQgdG8gdHJ5IGFuZCBtaW5pbWl6ZSB1bmxvY2tpbmcgY2h1bmtzLlkBVGhlIFtgU3Rha2luZ0ludGVyZmFjZTo6dW5ib25kYF0gd2lsbCBpbXBsaWNpdGx5IGNhbGwgW2BDYWxsOjpwb29sX3dpdGhkcmF3X3VuYm9uZGVkYF1VAXRvIHRyeSB0byBmcmVlIGNodW5rcyBpZiBuZWNlc3NhcnkgKGllLiBpZiB1bmJvdW5kIHdhcyBjYWxsZWQgYW5kIG5vIHVubG9ja2luZyBjaHVua3NhAWFyZSBhdmFpbGFibGUpLiBIb3dldmVyLCBpdCBtYXkgbm90IGJlIHBvc3NpYmxlIHRvIHJlbGVhc2UgdGhlIGN1cnJlbnQgdW5sb2NraW5nIGNodW5rcyxdAWluIHdoaWNoIGNhc2UsIHRoZSByZXN1bHQgb2YgdGhpcyBjYWxsIHdpbGwgbGlrZWx5IGJlIHRoZSBgTm9Nb3JlQ2h1bmtzYCBlcnJvciBmcm9tIHRoZTxzdGFraW5nIHN5c3RlbS5YcG9vbF93aXRoZHJhd191bmJvbmRlZAgBHHBvb2xfaWQQARhQb29sSWQAAUhudW1fc2xhc2hpbmdfc3BhbnMQAQx1MzIABBhVAUNhbGwgYHdpdGhkcmF3X3VuYm9uZGVkYCBmb3IgdGhlIHBvb2xzIGFjY291bnQuIFRoaXMgY2FsbCBjYW4gYmUgbWFkZSBieSBhbnkgYWNjb3VudC4AQQFUaGlzIGlzIHVzZWZ1bCBpZiB0aGVyZSBhcmUgdG9vIG1hbnkgdW5sb2NraW5nIGNodW5rcyB0byBjYWxsIGB1bmJvbmRgLCBhbmQgc29tZWEBY2FuIGJlIGNsZWFyZWQgYnkgd2l0aGRyYXdpbmcuIEluIHRoZSBjYXNlIHRoZXJlIGFyZSB0b28gbWFueSB1bmxvY2tpbmcgY2h1bmtzLCB0aGUgdXNlclEBd291bGQgcHJvYmFibHkgc2VlIGFuIGVycm9yIGxpa2UgYE5vTW9yZUNodW5rc2AgZW1pdHRlZCBmcm9tIHRoZSBzdGFraW5nIHN5c3RlbSB3aGVuXHRoZXkgYXR0ZW1wdCB0byB1bmJvbmQuRHdpdGhkcmF3X3VuYm9uZGVkCAE4bWVtYmVyX2FjY291bnTFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAUhudW1fc2xhc2hpbmdfc3BhbnMQAQx1MzIABVhVAVdpdGhkcmF3IHVuYm9uZGVkIGZ1bmRzIGZyb20gYG1lbWJlcl9hY2NvdW50YC4gSWYgbm8gYm9uZGVkIGZ1bmRzIGNhbiBiZSB1bmJvbmRlZCwgYW5IZXJyb3IgaXMgcmV0dXJuZWQuAE0BVW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCB0aGlzIGNhbGwgY2FuIGJlIGRpc3BhdGNoZWQgcGVybWlzc2lvbmxlc3NseSAoaS5lLiBieSBhbnkkYWNjb3VudCkuAKgjIENvbmRpdGlvbnMgZm9yIGEgcGVybWlzc2lvbmxlc3MgZGlzcGF0Y2gACQEqIFRoZSBwb29sIGlzIGluIGRlc3Ryb3kgbW9kZSBhbmQgdGhlIHRhcmdldCBpcyBub3QgdGhlIGRlcG9zaXRvci4xASogVGhlIHRhcmdldCBpcyB0aGUgZGVwb3NpdG9yIGFuZCB0aGV5IGFyZSB0aGUgb25seSBtZW1iZXIgaW4gdGhlIHN1YiBwb29scy4NASogVGhlIHBvb2wgaXMgYmxvY2tlZCBhbmQgdGhlIGNhbGxlciBpcyBlaXRoZXIgdGhlIHJvb3Qgb3IgYm91bmNlci4AmCMgQ29uZGl0aW9ucyBmb3IgcGVybWlzc2lvbmVkIGRpc3BhdGNoAOgqIFRoZSBjYWxsZXIgaXMgdGhlIHRhcmdldCBhbmQgdGhleSBhcmUgbm90IHRoZSBkZXBvc2l0b3IuABgjIE5vdGUA9C0gSWYgdGhlIHRhcmdldCBpcyB0aGUgZGVwb3NpdG9yLCB0aGUgcG9vbCB3aWxsIGJlIGRlc3Ryb3llZC5hAS0gSWYgdGhlIHBvb2wgaGFzIGFueSBwZW5kaW5nIHNsYXNoLCB3ZSBhbHNvIHRyeSB0byBzbGFzaCB0aGUgbWVtYmVyIGJlZm9yZSBsZXR0aW5nIHRoZW1dAXdpdGhkcmF3LiBUaGlzIGNhbGN1bGF0aW9uIGFkZHMgc29tZSB3ZWlnaHQgb3ZlcmhlYWQgYW5kIGlzIG9ubHkgZGVmZW5zaXZlLiBJbiByZWFsaXR5LFUBcG9vbCBzbGFzaGVzIG11c3QgaGF2ZSBiZWVuIGFscmVhZHkgYXBwbGllZCB2aWEgcGVybWlzc2lvbmxlc3MgW2BDYWxsOjphcHBseV9zbGFzaGBdLhhjcmVhdGUQARhhbW91bnT8ATBCYWxhbmNlT2Y8VD4AARByb290xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkbm9taW5hdG9yxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEcYm91bmNlcsUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAGRHRDcmVhdGUgYSBuZXcgZGVsZWdhdGlvbiBwb29sLgAsIyBBcmd1bWVudHMAVQEqIGBhbW91bnRgIC0gVGhlIGFtb3VudCBvZiBmdW5kcyB0byBkZWxlZ2F0ZSB0byB0aGUgcG9vbC4gVGhpcyBhbHNvIGFjdHMgb2YgYSBzb3J0IG9mTQEgIGRlcG9zaXQgc2luY2UgdGhlIHBvb2xzIGNyZWF0b3IgY2Fubm90IGZ1bGx5IHVuYm9uZCBmdW5kcyB1bnRpbCB0aGUgcG9vbCBpcyBiZWluZzAgIGRlc3Ryb3llZC5RASogYGluZGV4YCAtIEEgZGlzYW1iaWd1YXRpb24gaW5kZXggZm9yIGNyZWF0aW5nIHRoZSBhY2NvdW50LiBMaWtlbHkgb25seSB1c2VmdWwgd2hlbsAgIGNyZWF0aW5nIG11bHRpcGxlIHBvb2xzIGluIHRoZSBzYW1lIGV4dHJpbnNpYy7UKiBgcm9vdGAgLSBUaGUgYWNjb3VudCB0byBzZXQgYXMgW2BQb29sUm9sZXM6OnJvb3RgXS4NASogYG5vbWluYXRvcmAgLSBUaGUgYWNjb3VudCB0byBzZXQgYXMgdGhlIFtgUG9vbFJvbGVzOjpub21pbmF0b3JgXS78KiBgYm91bmNlcmAgLSBUaGUgYWNjb3VudCB0byBzZXQgYXMgdGhlIFtgUG9vbFJvbGVzOjpib3VuY2VyYF0uABgjIE5vdGUAYQFJbiBhZGRpdGlvbiB0byBgYW1vdW50YCwgdGhlIGNhbGxlciB3aWxsIHRyYW5zZmVyIHRoZSBleGlzdGVudGlhbCBkZXBvc2l0OyBzbyB0aGUgY2FsbGVyDQFuZWVkcyBhdCBoYXZlIGF0IGxlYXN0IGBhbW91bnQgKyBleGlzdGVudGlhbF9kZXBvc2l0YCB0cmFuc2ZlcmFibGUuTGNyZWF0ZV93aXRoX3Bvb2xfaWQUARhhbW91bnT8ATBCYWxhbmNlT2Y8VD4AARByb290xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkbm9taW5hdG9yxQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEcYm91bmNlcsUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABHHBvb2xfaWQQARhQb29sSWQABxjsQ3JlYXRlIGEgbmV3IGRlbGVnYXRpb24gcG9vbCB3aXRoIGEgcHJldmlvdXNseSB1c2VkIHBvb2wgaWQALCMgQXJndW1lbnRzAJhzYW1lIGFzIGBjcmVhdGVgIHdpdGggdGhlIGluY2x1c2lvbiBvZngqIGBwb29sX2lkYCAtIGBBIHZhbGlkIFBvb2xJZC4gbm9taW5hdGUIARxwb29sX2lkEAEYUG9vbElkAAEodmFsaWRhdG9yc9EBAURWZWM8VDo6QWNjb3VudElkPgAIMHxOb21pbmF0ZSBvbiBiZWhhbGYgb2YgdGhlIHBvb2wuAEUBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIHBvb2wgbm9taW5hdG9yIG9yIHRoZSBwb29sKHJvb3Qgcm9sZS4ASQFUaGlzIGRpcmVjdGx5IGZvcndhcmQgdGhlIGNhbGwgdG8gdGhlIHN0YWtpbmcgcGFsbGV0LCBvbiBiZWhhbGYgb2YgdGhlIHBvb2wgYm9uZGVkIGFjY291bnQuABgjIE5vdGUAXQFJbiBhZGRpdGlvbiB0byBhIGByb290YCBvciBgbm9taW5hdG9yYCByb2xlIG9mIGBvcmlnaW5gLCBwb29sJ3MgZGVwb3NpdG9yIG5lZWRzIHRvIGhhdmX4YXQgbGVhc3QgYGRlcG9zaXRvcl9taW5fYm9uZGAgaW4gdGhlIHBvb2wgdG8gc3RhcnQgbm9taW5hdGluZy4kc2V0X3N0YXRlCAEccG9vbF9pZBABGFBvb2xJZAABFHN0YXRlIQQBJFBvb2xTdGF0ZQAJKHRTZXQgYSBuZXcgc3RhdGUgZm9yIHRoZSBwb29sLgBVAUlmIGEgcG9vbCBpcyBhbHJlYWR5IGluIHRoZSBgRGVzdHJveWluZ2Agc3RhdGUsIHRoZW4gdW5kZXIgbm8gY29uZGl0aW9uIGNhbiBpdHMgc3RhdGU0Y2hhbmdlIGFnYWluLgDAVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBlaXRoZXI6ANwxLiBzaWduZWQgYnkgdGhlIGJvdW5jZXIsIG9yIHRoZSByb290IHJvbGUgb2YgdGhlIHBvb2wsXQEyLiBpZiB0aGUgcG9vbCBjb25kaXRpb25zIHRvIGJlIG9wZW4gYXJlIE5PVCBtZXQgKGFzIGRlc2NyaWJlZCBieSBgb2tfdG9fYmVfb3BlbmApLCBhbmQ5ASAgIHRoZW4gdGhlIHN0YXRlIG9mIHRoZSBwb29sIGNhbiBiZSBwZXJtaXNzaW9ubGVzc2x5IGNoYW5nZWQgdG8gYERlc3Ryb3lpbmdgLjBzZXRfbWV0YWRhdGEIARxwb29sX2lkEAEYUG9vbElkAAEgbWV0YWRhdGE4ARxWZWM8dTg+AAoQgFNldCBhIG5ldyBtZXRhZGF0YSBmb3IgdGhlIHBvb2wuAF0BVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIGJvdW5jZXIsIG9yIHRoZSByb290IHJvbGUgb2YgdGhlFHBvb2wuLHNldF9jb25maWdzGAE0bWluX2pvaW5fYm9uZCUEAVhDb25maWdPcDxCYWxhbmNlT2Y8VD4+AAE8bWluX2NyZWF0ZV9ib25kJQQBWENvbmZpZ09wPEJhbGFuY2VPZjxUPj4AASRtYXhfcG9vbHMpBAE0Q29uZmlnT3A8dTMyPgABLG1heF9tZW1iZXJzKQQBNENvbmZpZ09wPHUzMj4AAVBtYXhfbWVtYmVyc19wZXJfcG9vbCkEATRDb25maWdPcDx1MzI+AAFUZ2xvYmFsX21heF9jb21taXNzaW9uLQQBRENvbmZpZ09wPFBlcmJpbGw+AAssQQFVcGRhdGUgY29uZmlndXJhdGlvbnMgZm9yIHRoZSBub21pbmF0aW9uIHBvb2xzLiBUaGUgb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZWBbYENvbmZpZzo6QWRtaW5PcmlnaW5gXS4ALCMgQXJndW1lbnRzAKAqIGBtaW5fam9pbl9ib25kYCAtIFNldCBbYE1pbkpvaW5Cb25kYF0usCogYG1pbl9jcmVhdGVfYm9uZGAgLSBTZXQgW2BNaW5DcmVhdGVCb25kYF0uhCogYG1heF9wb29sc2AgLSBTZXQgW2BNYXhQb29sc2BdLqQqIGBtYXhfbWVtYmVyc2AgLSBTZXQgW2BNYXhQb29sTWVtYmVyc2BdLuQqIGBtYXhfbWVtYmVyc19wZXJfcG9vbGAgLSBTZXQgW2BNYXhQb29sTWVtYmVyc1BlclBvb2xgXS7gKiBgZ2xvYmFsX21heF9jb21taXNzaW9uYCAtIFNldCBbYEdsb2JhbE1heENvbW1pc3Npb25gXS4wdXBkYXRlX3JvbGVzEAEccG9vbF9pZBABGFBvb2xJZAABIG5ld19yb290MQQBWENvbmZpZ09wPFQ6OkFjY291bnRJZD4AATRuZXdfbm9taW5hdG9yMQQBWENvbmZpZ09wPFQ6OkFjY291bnRJZD4AASxuZXdfYm91bmNlcjEEAVhDb25maWdPcDxUOjpBY2NvdW50SWQ+AAwcdFVwZGF0ZSB0aGUgcm9sZXMgb2YgdGhlIHBvb2wuAD0BVGhlIHJvb3QgaXMgdGhlIG9ubHkgZW50aXR5IHRoYXQgY2FuIGNoYW5nZSBhbnkgb2YgdGhlIHJvbGVzLCBpbmNsdWRpbmcgaXRzZWxmLLhleGNsdWRpbmcgdGhlIGRlcG9zaXRvciwgd2hvIGNhbiBuZXZlciBjaGFuZ2UuAFEBSXQgZW1pdHMgYW4gZXZlbnQsIG5vdGlmeWluZyBVSXMgb2YgdGhlIHJvbGUgY2hhbmdlLiBUaGlzIGV2ZW50IGlzIHF1aXRlIHJlbGV2YW50IHRvHQFtb3N0IHBvb2wgbWVtYmVycyBhbmQgdGhleSBzaG91bGQgYmUgaW5mb3JtZWQgb2YgY2hhbmdlcyB0byBwb29sIHJvbGVzLhRjaGlsbAQBHHBvb2xfaWQQARhQb29sSWQADUBwQ2hpbGwgb24gYmVoYWxmIG9mIHRoZSBwb29sLgBBAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIGNhbiBiZSBzaWduZWQgYnkgdGhlIHBvb2wgbm9taW5hdG9yIG9yIHRoZSBwb29soHJvb3Qgcm9sZSwgc2FtZSBhcyBbYFBhbGxldDo6bm9taW5hdGVgXS4ATQFVbmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIHRoaXMgY2FsbCBjYW4gYmUgZGlzcGF0Y2hlZCBwZXJtaXNzaW9ubGVzc2x5IChpLmUuIGJ5IGFueSRhY2NvdW50KS4ArCMgQ29uZGl0aW9ucyBmb3IgYSBwZXJtaXNzaW9ubGVzcyBkaXNwYXRjaDpZASogV2hlbiBwb29sIGRlcG9zaXRvciBoYXMgbGVzcyB0aGFuIGBNaW5Ob21pbmF0b3JCb25kYCBzdGFrZWQsIG90aGVyd2lzZSAgcG9vbCBtZW1iZXJzXCAgYXJlIHVuYWJsZSB0byB1bmJvbmQuAJwjIENvbmRpdGlvbnMgZm9yIHBlcm1pc3Npb25lZCBkaXNwYXRjaDrYKiBUaGUgY2FsbGVyIGhhcyBhIG5vbWluYXRvciBvciByb290IHJvbGUgb2YgdGhlIHBvb2wuSQFUaGlzIGRpcmVjdGx5IGZvcndhcmQgdGhlIGNhbGwgdG8gdGhlIHN0YWtpbmcgcGFsbGV0LCBvbiBiZWhhbGYgb2YgdGhlIHBvb2wgYm9uZGVkIGFjY291bnQuQGJvbmRfZXh0cmFfb3RoZXIIARhtZW1iZXLFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARRleHRyYR0EAVxCb25kRXh0cmE8QmFsYW5jZU9mPFQ+PgAOJFUBYG9yaWdpbmAgYm9uZHMgZnVuZHMgZnJvbSBgZXh0cmFgIGZvciBzb21lIHBvb2wgbWVtYmVyIGBtZW1iZXJgIGludG8gdGhlaXIgcmVzcGVjdGl2ZRhwb29scy4ASQFgb3JpZ2luYCBjYW4gYm9uZCBleHRyYSBmdW5kcyBmcm9tIGZyZWUgYmFsYW5jZSBvciBwZW5kaW5nIHJld2FyZHMgd2hlbiBgb3JpZ2luID09HG90aGVyYC4ARQFJbiB0aGUgY2FzZSBvZiBgb3JpZ2luICE9IG90aGVyYCwgYG9yaWdpbmAgY2FuIG9ubHkgYm9uZCBleHRyYSBwZW5kaW5nIHJld2FyZHMgb2YVAWBvdGhlcmAgbWVtYmVycyBhc3N1bWluZyBzZXRfY2xhaW1fcGVybWlzc2lvbiBmb3IgdGhlIGdpdmVuIG1lbWJlciBpc8BgUGVybWlzc2lvbmxlc3NDb21wb3VuZGAgb3IgYFBlcm1pc3Npb25sZXNzQWxsYC5Qc2V0X2NsYWltX3Blcm1pc3Npb24EAShwZXJtaXNzaW9uNQQBPENsYWltUGVybWlzc2lvbgAPHEkBQWxsb3dzIGEgcG9vbCBtZW1iZXIgdG8gc2V0IGEgY2xhaW0gcGVybWlzc2lvbiB0byBhbGxvdyBvciBkaXNhbGxvdyBwZXJtaXNzaW9ubGVzc2Bib25kaW5nIGFuZCB3aXRoZHJhd2luZy4ALCMgQXJndW1lbnRzAHgqIGBvcmlnaW5gIC0gTWVtYmVyIG9mIGEgcG9vbC64KiBgcGVybWlzc2lvbmAgLSBUaGUgcGVybWlzc2lvbiB0byBiZSBhcHBsaWVkLkhjbGFpbV9wYXlvdXRfb3RoZXIEARRvdGhlcgABMFQ6OkFjY291bnRJZAAQEAEBYG9yaWdpbmAgY2FuIGNsYWltIHBheW91dHMgb24gc29tZSBwb29sIG1lbWJlciBgb3RoZXJgJ3MgYmVoYWxmLgBVAVBvb2wgbWVtYmVyIGBvdGhlcmAgbXVzdCBoYXZlIGEgYFBlcm1pc3Npb25sZXNzV2l0aGRyYXdgIG9yIGBQZXJtaXNzaW9ubGVzc0FsbGAgY2xhaW2ocGVybWlzc2lvbiBmb3IgdGhpcyBjYWxsIHRvIGJlIHN1Y2Nlc3NmdWwuOHNldF9jb21taXNzaW9uCAEccG9vbF9pZBABGFBvb2xJZAABOG5ld19jb21taXNzaW9uOQQBfE9wdGlvbjwoUGVyYmlsbCwgVDo6QWNjb3VudElkKT4AERR0U2V0IHRoZSBjb21taXNzaW9uIG9mIGEgcG9vbC5VAUJvdGggYSBjb21taXNzaW9uIHBlcmNlbnRhZ2UgYW5kIGEgY29tbWlzc2lvbiBwYXllZSBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSBgY3VycmVudGBdAXR1cGxlLiBXaGVyZSBhIGBjdXJyZW50YCBvZiBgTm9uZWAgaXMgcHJvdmlkZWQsIGFueSBjdXJyZW50IGNvbW1pc3Npb24gd2lsbCBiZSByZW1vdmVkLgBNAS0gSWYgYSBgTm9uZWAgaXMgc3VwcGxpZWQgdG8gYG5ld19jb21taXNzaW9uYCwgZXhpc3RpbmcgY29tbWlzc2lvbiB3aWxsIGJlIHJlbW92ZWQuSHNldF9jb21taXNzaW9uX21heAgBHHBvb2xfaWQQARhQb29sSWQAAThtYXhfY29tbWlzc2lvbqwBHFBlcmJpbGwAEhSUU2V0IHRoZSBtYXhpbXVtIGNvbW1pc3Npb24gb2YgYSBwb29sLgA5AS0gSW5pdGlhbCBtYXggY2FuIGJlIHNldCB0byBhbnkgYFBlcmJpbGxgLCBhbmQgb25seSBzbWFsbGVyIHZhbHVlcyB0aGVyZWFmdGVyLjUBLSBDdXJyZW50IGNvbW1pc3Npb24gd2lsbCBiZSBsb3dlcmVkIGluIHRoZSBldmVudCBpdCBpcyBoaWdoZXIgdGhhbiBhIG5ldyBtYXg0ICBjb21taXNzaW9uLmhzZXRfY29tbWlzc2lvbl9jaGFuZ2VfcmF0ZQgBHHBvb2xfaWQQARhQb29sSWQAASxjaGFuZ2VfcmF0ZUEEAZxDb21taXNzaW9uQ2hhbmdlUmF0ZTxCbG9ja051bWJlckZvcjxUPj4AExCoU2V0IHRoZSBjb21taXNzaW9uIGNoYW5nZSByYXRlIGZvciBhIHBvb2wuAD0BSW5pdGlhbCBjaGFuZ2UgcmF0ZSBpcyBub3QgYm91bmRlZCwgd2hlcmVhcyBzdWJzZXF1ZW50IHVwZGF0ZXMgY2FuIG9ubHkgYmUgbW9yZXRyZXN0cmljdGl2ZSB0aGFuIHRoZSBjdXJyZW50LkBjbGFpbV9jb21taXNzaW9uBAEccG9vbF9pZBABGFBvb2xJZAAUFGRDbGFpbSBwZW5kaW5nIGNvbW1pc3Npb24uAF0BVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIGByb290YCByb2xlIG9mIHRoZSBwb29sLiBQZW5kaW5nXQFjb21taXNzaW9uIGlzIHBhaWQgb3V0IGFuZCBhZGRlZCB0byB0b3RhbCBjbGFpbWVkIGNvbW1pc3Npb25gLiBUb3RhbCBwZW5kaW5nIGNvbW1pc3Npb254aXMgcmVzZXQgdG8gemVyby4gdGhlIGN1cnJlbnQuTGFkanVzdF9wb29sX2RlcG9zaXQEARxwb29sX2lkEAEYUG9vbElkABUc7FRvcCB1cCB0aGUgZGVmaWNpdCBvciB3aXRoZHJhdyB0aGUgZXhjZXNzIEVEIGZyb20gdGhlIHBvb2wuAFEBV2hlbiBhIHBvb2wgaXMgY3JlYXRlZCwgdGhlIHBvb2wgZGVwb3NpdG9yIHRyYW5zZmVycyBFRCB0byB0aGUgcmV3YXJkIGFjY291bnQgb2YgdGhlVQFwb29sLiBFRCBpcyBzdWJqZWN0IHRvIGNoYW5nZSBhbmQgb3ZlciB0aW1lLCB0aGUgZGVwb3NpdCBpbiB0aGUgcmV3YXJkIGFjY291bnQgbWF5IGJlUQFpbnN1ZmZpY2llbnQgdG8gY292ZXIgdGhlIEVEIGRlZmljaXQgb2YgdGhlIHBvb2wgb3IgdmljZS12ZXJzYSB3aGVyZSB0aGVyZSBpcyBleGNlc3MxAWRlcG9zaXQgdG8gdGhlIHBvb2wuIFRoaXMgY2FsbCBhbGxvd3MgYW55b25lIHRvIGFkanVzdCB0aGUgRUQgZGVwb3NpdCBvZiB0aGX0cG9vbCBieSBlaXRoZXIgdG9wcGluZyB1cCB0aGUgZGVmaWNpdCBvciBjbGFpbWluZyB0aGUgZXhjZXNzLnxzZXRfY29tbWlzc2lvbl9jbGFpbV9wZXJtaXNzaW9uCAEccG9vbF9pZBABGFBvb2xJZAABKHBlcm1pc3Npb25FBAG8T3B0aW9uPENvbW1pc3Npb25DbGFpbVBlcm1pc3Npb248VDo6QWNjb3VudElkPj4AFhDMU2V0IG9yIHJlbW92ZSBhIHBvb2wncyBjb21taXNzaW9uIGNsYWltIHBlcm1pc3Npb24uAGEBRGV0ZXJtaW5lcyB3aG8gY2FuIGNsYWltIHRoZSBwb29sJ3MgcGVuZGluZyBjb21taXNzaW9uLiBPbmx5IHRoZSBgUm9vdGAgcm9sZSBvZiB0aGUgcG9vbMhpcyBhYmxlIHRvIGNvbmZpZ3VyZSBjb21taXNzaW9uIGNsYWltIHBlcm1pc3Npb25zLixhcHBseV9zbGFzaAQBOG1lbWJlcl9hY2NvdW50xQEBUEFjY291bnRJZExvb2t1cE9mPFQ+ABcciEFwcGx5IGEgcGVuZGluZyBzbGFzaCBvbiBhIG1lbWJlci4AJQFGYWlscyB1bmxlc3MgW2BjcmF0ZTo6cGFsbGV0OjpDb25maWc6OlN0YWtlQWRhcHRlcmBdIGlzIG9mIHN0cmF0ZWd5IHR5cGU6pFtgYWRhcHRlcjo6U3Rha2VTdHJhdGVneVR5cGU6OkRlbGVnYXRlYF0uAFUBVGhpcyBjYWxsIGNhbiBiZSBkaXNwYXRjaGVkIHBlcm1pc3Npb25sZXNzbHkgKGkuZS4gYnkgYW55IGFjY291bnQpLiBJZiB0aGUgbWVtYmVyIGhhcx0Bc2xhc2ggdG8gYmUgYXBwbGllZCwgY2FsbGVyIG1heSBiZSByZXdhcmRlZCB3aXRoIHRoZSBwYXJ0IG9mIHRoZSBzbGFzaC5IbWlncmF0ZV9kZWxlZ2F0aW9uBAE4bWVtYmVyX2FjY291bnTFAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AGCQdAU1pZ3JhdGVzIGRlbGVnYXRlZCBmdW5kcyBmcm9tIHRoZSBwb29sIGFjY291bnQgdG8gdGhlIGBtZW1iZXJfYWNjb3VudGAuACUBRmFpbHMgdW5sZXNzIFtgY3JhdGU6OnBhbGxldDo6Q29uZmlnOjpTdGFrZUFkYXB0ZXJgXSBpcyBvZiBzdHJhdGVneSB0eXBlOqRbYGFkYXB0ZXI6OlN0YWtlU3RyYXRlZ3lUeXBlOjpEZWxlZ2F0ZWBdLgApAVRoaXMgaXMgYSBwZXJtaXNzaW9uLWxlc3MgY2FsbCBhbmQgcmVmdW5kcyBhbnkgZmVlIGlmIGNsYWltIGlzIHN1Y2Nlc3NmdWwuAF0BSWYgdGhlIHBvb2wgaGFzIG1pZ3JhdGVkIHRvIGRlbGVnYXRpb24gYmFzZWQgc3Rha2luZywgdGhlIHN0YWtlZCB0b2tlbnMgb2YgcG9vbCBtZW1iZXJzKQFjYW4gYmUgbW92ZWQgYW5kIGhlbGQgaW4gdGhlaXIgb3duIGFjY291bnQuIFNlZSBbYGFkYXB0ZXI6OkRlbGVnYXRlU3Rha2VgXXhtaWdyYXRlX3Bvb2xfdG9fZGVsZWdhdGVfc3Rha2UEARxwb29sX2lkEAEYUG9vbElkABkk9E1pZ3JhdGUgcG9vbCBmcm9tIFtgYWRhcHRlcjo6U3Rha2VTdHJhdGVneVR5cGU6OlRyYW5zZmVyYF0gdG+kW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZTo6RGVsZWdhdGVgXS4AJQFGYWlscyB1bmxlc3MgW2BjcmF0ZTo6cGFsbGV0OjpDb25maWc6OlN0YWtlQWRhcHRlcmBdIGlzIG9mIHN0cmF0ZWd5IHR5cGU6pFtgYWRhcHRlcjo6U3Rha2VTdHJhdGVneVR5cGU6OkRlbGVnYXRlYF0uAEEBVGhpcyBjYWxsIGNhbiBiZSBkaXNwYXRjaGVkIHBlcm1pc3Npb25sZXNzbHksIGFuZCByZWZ1bmRzIGFueSBmZWUgaWYgc3VjY2Vzc2Z1bC4ASQFJZiB0aGUgcG9vbCBoYXMgYWxyZWFkeSBtaWdyYXRlZCB0byBkZWxlZ2F0aW9uIGJhc2VkIHN0YWtpbmcsIHRoaXMgY2FsbCB3aWxsIGZhaWwuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLh0ECFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyRCb25kRXh0cmEEHEJhbGFuY2UBGAEILEZyZWVCYWxhbmNlBAAYARxCYWxhbmNlAAAAHFJld2FyZHMAAQAAIQQIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzJFBvb2xTdGF0ZQABDBBPcGVuAAAAHEJsb2NrZWQAAQAoRGVzdHJveWluZwACAAAlBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMgQ29uZmlnT3AEBFQBGAEMEE5vb3AAAAAMU2V0BAAYAQRUAAEAGFJlbW92ZQACAAApBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMgQ29uZmlnT3AEBFQBEAEMEE5vb3AAAAAMU2V0BAAQAQRUAAEAGFJlbW92ZQACAAAtBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMgQ29uZmlnT3AEBFQBrAEMEE5vb3AAAAAMU2V0BACsAQRUAAEAGFJlbW92ZQACAAAxBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMgQ29uZmlnT3AEBFQBAAEMEE5vb3AAAAAMU2V0BAAAAQRUAAEAGFJlbW92ZQACAAA1BAhccGFsbGV0X25vbWluYXRpb25fcG9vbHM8Q2xhaW1QZXJtaXNzaW9uAAEQMFBlcm1pc3Npb25lZAAAAFhQZXJtaXNzaW9ubGVzc0NvbXBvdW5kAAEAWFBlcm1pc3Npb25sZXNzV2l0aGRyYXcAAgBEUGVybWlzc2lvbmxlc3NBbGwAAwAAOQQEGE9wdGlvbgQEVAE9BAEIEE5vbmUAAAAQU29tZQQAPQQAAAEAAD0EAAAECKwAAEEECFxwYWxsZXRfbm9taW5hdGlvbl9wb29sc1BDb21taXNzaW9uQ2hhbmdlUmF0ZQQsQmxvY2tOdW1iZXIBEAAIATBtYXhfaW5jcmVhc2WsARxQZXJiaWxsAAEkbWluX2RlbGF5EAEsQmxvY2tOdW1iZXIAAEUEBBhPcHRpb24EBFQBSQQBCBBOb25lAAAAEFNvbWUEAEkEAAABAABJBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHNkQ29tbWlzc2lvbkNsYWltUGVybWlzc2lvbgQkQWNjb3VudElkAQABCDhQZXJtaXNzaW9ubGVzcwAAABxBY2NvdW50BAAAASRBY2NvdW50SWQAAQAATQQMTHBhbGxldF9mYXN0X3Vuc3Rha2UYcGFsbGV0EENhbGwEBFQAAQxUcmVnaXN0ZXJfZmFzdF91bnN0YWtlAABoiFJlZ2lzdGVyIG9uZXNlbGYgZm9yIGZhc3QtdW5zdGFrZS4ASCMjIERpc3BhdGNoIE9yaWdpbgBFAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgKnNpZ25lZCogYnkgd2hvZXZlciBpcyBwZXJtaXR0ZWQgdG8gY2FsbPB1bmJvbmQgZnVuZHMgYnkgdGhlIHN0YWtpbmcgc3lzdGVtLiBTZWUgW2BDb25maWc6OlN0YWtpbmdgXS4AKCMjIERldGFpbHMAOQFUaGUgc3Rhc2ggYXNzb2NpYXRlZCB3aXRoIHRoZSBvcmlnaW4gbXVzdCBoYXZlIG5vIG9uZ29pbmcgdW5sb2NraW5nIGNodW5rcy4gSWZdAXN1Y2Nlc3NmdWwsIHRoaXMgd2lsbCBmdWxseSB1bmJvbmQgYW5kIGNoaWxsIHRoZSBzdGFzaC4gVGhlbiwgaXQgd2lsbCBlbnF1ZXVlIHRoZSBzdGFzaIB0byBiZSBjaGVja2VkIGluIGZ1cnRoZXIgYmxvY2tzLgBRAUlmIGJ5IHRoZSB0aW1lIHRoaXMgaXMgY2FsbGVkLCB0aGUgc3Rhc2ggaXMgYWN0dWFsbHkgZWxpZ2libGUgZm9yIGZhc3QtdW5zdGFrZSwgdGhlbkUBdGhleSBhcmUgZ3VhcmFudGVlZCB0byByZW1haW4gZWxpZ2libGUsIGJlY2F1c2UgdGhlIGNhbGwgd2lsbCBjaGlsbCB0aGVtIGFzIHdlbGwuAD0BSWYgdGhlIGNoZWNrIHdvcmtzLCB0aGUgZW50aXJlIHN0YWtpbmcgZGF0YSBpcyByZW1vdmVkLCBpLmUuIHRoZSBzdGFzaCBpcyBmdWxseSR1bnN0YWtlZC4AXQFJZiB0aGUgY2hlY2sgZmFpbHMsIHRoZSBzdGFzaCByZW1haW5zIGNoaWxsZWQgYW5kIHdhaXRpbmcgZm9yIGJlaW5nIHVuYm9uZGVkIGFzIGluIHdpdGhhAXRoZSBub3JtYWwgc3Rha2luZyBzeXN0ZW0sIGJ1dCB0aGV5IGxvc2UgcGFydCBvZiB0aGVpciB1bmJvbmRpbmcgY2h1bmtzIGR1ZSB0byBjb25zdW1pbmdYdGhlIGNoYWluJ3MgcmVzb3VyY2VzLgAkIyMgRXZlbnRzAAkBU29tZSBldmVudHMgZnJvbSB0aGUgc3Rha2luZyBhbmQgY3VycmVuY3kgc3lzdGVtIG1pZ2h0IGJlIGVtaXR0ZWQuKGRlcmVnaXN0ZXIAAUikRGVyZWdpc3RlciBvbmVzZWxmIGZyb20gdGhlIGZhc3QtdW5zdGFrZS4ASCMjIERpc3BhdGNoIE9yaWdpbgBFAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgKnNpZ25lZCogYnkgd2hvZXZlciBpcyBwZXJtaXR0ZWQgdG8gY2FsbPB1bmJvbmQgZnVuZHMgYnkgdGhlIHN0YWtpbmcgc3lzdGVtLiBTZWUgW2BDb25maWc6OlN0YWtpbmdgXS4AKCMjIERldGFpbHMAYQFUaGlzIGlzIHVzZWZ1bCBpZiBvbmUgaXMgcmVnaXN0ZXJlZCwgdGhleSBhcmUgc3RpbGwgd2FpdGluZywgYW5kIHRoZXkgY2hhbmdlIHRoZWlyIG1pbmQuAFkBTm90ZSB0aGF0IHRoZSBhc3NvY2lhdGVkIHN0YXNoIGlzIHN0aWxsIGZ1bGx5IHVuYm9uZGVkIGFuZCBjaGlsbGVkIGFzIGEgY29uc2VxdWVuY2Ugb2ZZAWNhbGxpbmcgW2BQYWxsZXQ6OnJlZ2lzdGVyX2Zhc3RfdW5zdGFrZWBdLiBUaGVyZWZvcmUsIHRoaXMgc2hvdWxkIHByb2JhYmx5IGJlIGZvbGxvd2VksGJ5IGEgY2FsbCB0byBgcmVib25kYCBpbiB0aGUgc3Rha2luZyBzeXN0ZW0uACQjIyBFdmVudHMACQFTb21lIGV2ZW50cyBmcm9tIHRoZSBzdGFraW5nIGFuZCBjdXJyZW5jeSBzeXN0ZW0gbWlnaHQgYmUgZW1pdHRlZC4cY29udHJvbAQBNGVyYXNfdG9fY2hlY2sQASBFcmFJbmRleAACNJRDb250cm9sIHRoZSBvcGVyYXRpb24gb2YgdGhpcyBwYWxsZXQuAEgjIyBEaXNwYXRjaCBPcmlnaW4ADQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIFtgQ29uZmlnOjpDb250cm9sT3JpZ2luYF0uACgjIyBEZXRhaWxzAEEBQ2FuIHNldCB0aGUgbnVtYmVyIG9mIGVyYXMgdG8gY2hlY2sgcGVyIGJsb2NrLCBhbmQgcG90ZW50aWFsbHkgb3RoZXIgYWRtaW4gd29yay4AJCMjIEV2ZW50cwCkTm8gZXZlbnRzIGFyZSBlbWl0dGVkIGZyb20gdGhpcyBkaXNwYXRjaC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuUQQQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluczRjb25maWd1cmF0aW9uGHBhbGxldBBDYWxsBARUAAHAfHNldF92YWxpZGF0aW9uX3VwZ3JhZGVfY29vbGRvd24EAQxuZXcQAURCbG9ja051bWJlckZvcjxUPgAABJBTZXQgdGhlIHZhbGlkYXRpb24gdXBncmFkZSBjb29sZG93bi5wc2V0X3ZhbGlkYXRpb25fdXBncmFkZV9kZWxheQQBDG5ldxABREJsb2NrTnVtYmVyRm9yPFQ+AAEEhFNldCB0aGUgdmFsaWRhdGlvbiB1cGdyYWRlIGRlbGF5LmRzZXRfY29kZV9yZXRlbnRpb25fcGVyaW9kBAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4AAgTQU2V0IHRoZSBhY2NlcHRhbmNlIHBlcmlvZCBmb3IgYW4gaW5jbHVkZWQgY2FuZGlkYXRlLkRzZXRfbWF4X2NvZGVfc2l6ZQQBDG5ldxABDHUzMgADBNxTZXQgdGhlIG1heCB2YWxpZGF0aW9uIGNvZGUgc2l6ZSBmb3IgaW5jb21pbmcgdXBncmFkZXMuQHNldF9tYXhfcG92X3NpemUEAQxuZXcQAQx1MzIABATEU2V0IHRoZSBtYXggUE9WIGJsb2NrIHNpemUgZm9yIGluY29taW5nIHVwZ3JhZGVzLlhzZXRfbWF4X2hlYWRfZGF0YV9zaXplBAEMbmV3EAEMdTMyAAUElFNldCB0aGUgbWF4IGhlYWQgZGF0YSBzaXplIGZvciBwYXJhcy5Ic2V0X2NvcmV0aW1lX2NvcmVzBAEMbmV3EAEMdTMyAAYQrFNldCB0aGUgbnVtYmVyIG9mIGNvcmV0aW1lIGV4ZWN1dGlvbiBjb3Jlcy4AUQFOT1RFOiB0aGF0IHRoaXMgY29uZmlndXJhdGlvbiBpcyBtYW5hZ2VkIGJ5IHRoZSBjb3JldGltZSBjaGFpbi4gT25seSBtYW51YWxseSBjaGFuZ2WwdGhpcywgaWYgeW91IHJlYWxseSBrbm93IHdoYXQgeW91IGFyZSBkb2luZyF0c2V0X21heF9hdmFpbGFiaWxpdHlfdGltZW91dHMEAQxuZXcQAQx1MzIABwRBAVNldCB0aGUgbWF4IG51bWJlciBvZiB0aW1lcyBhIGNsYWltIG1heSB0aW1lb3V0IG9uIGEgY29yZSBiZWZvcmUgaXQgaXMgYWJhbmRvbmVkcHNldF9ncm91cF9yb3RhdGlvbl9mcmVxdWVuY3kEAQxuZXcQAURCbG9ja051bWJlckZvcjxUPgAIBNBTZXQgdGhlIHBhcmFjaGFpbiB2YWxpZGF0b3ItZ3JvdXAgcm90YXRpb24gZnJlcXVlbmN5dHNldF9wYXJhc19hdmFpbGFiaWxpdHlfcGVyaW9kBAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4ACQSYU2V0IHRoZSBhdmFpbGFiaWxpdHkgcGVyaW9kIGZvciBwYXJhcy5gc2V0X3NjaGVkdWxpbmdfbG9va2FoZWFkBAEMbmV3EAEMdTMyAAsEOQFTZXQgdGhlIHNjaGVkdWxpbmcgbG9va2FoZWFkLCBpbiBleHBlY3RlZCBudW1iZXIgb2YgYmxvY2tzIGF0IHBlYWsgdGhyb3VnaHB1dC5sc2V0X21heF92YWxpZGF0b3JzX3Blcl9jb3JlBAEMbmV3YQIBLE9wdGlvbjx1MzI+AAwE7FNldCB0aGUgbWF4aW11bSBudW1iZXIgb2YgdmFsaWRhdG9ycyB0byBhc3NpZ24gdG8gYW55IGNvcmUuSHNldF9tYXhfdmFsaWRhdG9ycwQBDG5ld2ECASxPcHRpb248dTMyPgANBA0BU2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB2YWxpZGF0b3JzIHRvIHVzZSBpbiBwYXJhY2hhaW4gY29uc2Vuc3VzLkhzZXRfZGlzcHV0ZV9wZXJpb2QEAQxuZXcQATBTZXNzaW9uSW5kZXgADgQNAVNldCB0aGUgZGlzcHV0ZSBwZXJpb2QsIGluIG51bWJlciBvZiBzZXNzaW9ucyB0byBrZWVwIGZvciBkaXNwdXRlcy60c2V0X2Rpc3B1dGVfcG9zdF9jb25jbHVzaW9uX2FjY2VwdGFuY2VfcGVyaW9kBAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4ADwTIU2V0IHRoZSBkaXNwdXRlIHBvc3QgY29uY2x1c2lvbiBhY2NlcHRhbmNlIHBlcmlvZC5Ec2V0X25vX3Nob3dfc2xvdHMEAQxuZXcQAQx1MzIAEgj4U2V0IHRoZSBubyBzaG93IHNsb3RzLCBpbiBudW1iZXIgb2YgbnVtYmVyIG9mIGNvbnNlbnN1cyBzbG90cy5MTXVzdCBiZSBhdCBsZWFzdCAxLlBzZXRfbl9kZWxheV90cmFuY2hlcwQBDG5ldxABDHUzMgATBJxTZXQgdGhlIHRvdGFsIG51bWJlciBvZiBkZWxheSB0cmFuY2hlcy54c2V0X3plcm90aF9kZWxheV90cmFuY2hlX3dpZHRoBAEMbmV3EAEMdTMyABQEjFNldCB0aGUgemVyb3RoIGRlbGF5IHRyYW5jaGUgd2lkdGguUHNldF9uZWVkZWRfYXBwcm92YWxzBAEMbmV3EAEMdTMyABUE3FNldCB0aGUgbnVtYmVyIG9mIHZhbGlkYXRvcnMgbmVlZGVkIHRvIGFwcHJvdmUgYSBibG9jay5wc2V0X3JlbGF5X3ZyZl9tb2R1bG9fc2FtcGxlcwQBDG5ldxABDHUzMgAWBFkBU2V0IHRoZSBudW1iZXIgb2Ygc2FtcGxlcyB0byBkbyBvZiB0aGUgYFJlbGF5VlJGTW9kdWxvYCBhcHByb3ZhbCBhc3NpZ25tZW50IGNyaXRlcmlvbi5oc2V0X21heF91cHdhcmRfcXVldWVfY291bnQEAQxuZXcQAQx1MzIAFwQtAVNldHMgdGhlIG1heGltdW0gaXRlbXMgdGhhdCBjYW4gcHJlc2VudCBpbiBhIHVwd2FyZCBkaXNwYXRjaCBxdWV1ZSBhdCBvbmNlLmRzZXRfbWF4X3Vwd2FyZF9xdWV1ZV9zaXplBAEMbmV3EAEMdTMyABgITQFTZXRzIHRoZSBtYXhpbXVtIHRvdGFsIHNpemUgb2YgaXRlbXMgdGhhdCBjYW4gcHJlc2VudCBpbiBhIHVwd2FyZCBkaXNwYXRjaCBxdWV1ZSBhdBRvbmNlLnRzZXRfbWF4X2Rvd253YXJkX21lc3NhZ2Vfc2l6ZQQBDG5ldxABDHUzMgAZBJxTZXQgdGhlIGNyaXRpY2FsIGRvd253YXJkIG1lc3NhZ2Ugc2l6ZS5sc2V0X21heF91cHdhcmRfbWVzc2FnZV9zaXplBAEMbmV3EAEMdTMyABsELQFTZXRzIHRoZSBtYXhpbXVtIHNpemUgb2YgYW4gdXB3YXJkIG1lc3NhZ2UgdGhhdCBjYW4gYmUgc2VudCBieSBhIGNhbmRpZGF0ZS6gc2V0X21heF91cHdhcmRfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZQQBDG5ldxABDHUzMgAcBAUBU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCBhIGNhbmRpZGF0ZSBjYW4gY29udGFpbi5kc2V0X2hybXBfb3Blbl9yZXF1ZXN0X3R0bAQBDG5ldxABDHUzMgAdBDUBU2V0cyB0aGUgbnVtYmVyIG9mIHNlc3Npb25zIGFmdGVyIHdoaWNoIGFuIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3QgZXhwaXJlcy5cc2V0X2hybXBfc2VuZGVyX2RlcG9zaXQEAQxuZXcYARxCYWxhbmNlAB4EUQFTZXRzIHRoZSBhbW91bnQgb2YgZnVuZHMgdGhhdCB0aGUgc2VuZGVyIHNob3VsZCBwcm92aWRlIGZvciBvcGVuaW5nIGFuIEhSTVAgY2hhbm5lbC5oc2V0X2hybXBfcmVjaXBpZW50X2RlcG9zaXQEAQxuZXcYARxCYWxhbmNlAB8IYQFTZXRzIHRoZSBhbW91bnQgb2YgZnVuZHMgdGhhdCB0aGUgcmVjaXBpZW50IHNob3VsZCBwcm92aWRlIGZvciBhY2NlcHRpbmcgb3BlbmluZyBhbiBIUk1QIGNoYW5uZWwudHNldF9ocm1wX2NoYW5uZWxfbWF4X2NhcGFjaXR5BAEMbmV3EAEMdTMyACAEHQFTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyBhbGxvd2VkIGluIGFuIEhSTVAgY2hhbm5lbCBhdCBvbmNlLnxzZXRfaHJtcF9jaGFubmVsX21heF90b3RhbF9zaXplBAEMbmV3EAEMdTMyACEEUQFTZXRzIHRoZSBtYXhpbXVtIHRvdGFsIHNpemUgb2YgbWVzc2FnZXMgaW4gYnl0ZXMgYWxsb3dlZCBpbiBhbiBIUk1QIGNoYW5uZWwgYXQgb25jZS6cc2V0X2hybXBfbWF4X3BhcmFjaGFpbl9pbmJvdW5kX2NoYW5uZWxzBAEMbmV3EAEMdTMyACIESQFTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpbmJvdW5kIEhSTVAgY2hhbm5lbHMgYSBwYXJhY2hhaW4gaXMgYWxsb3dlZCB0byBhY2NlcHQuhHNldF9ocm1wX2NoYW5uZWxfbWF4X21lc3NhZ2Vfc2l6ZQQBDG5ldxABDHUzMgAkBD0BU2V0cyB0aGUgbWF4aW11bSBzaXplIG9mIGEgbWVzc2FnZSB0aGF0IGNvdWxkIGV2ZXIgYmUgcHV0IGludG8gYW4gSFJNUCBjaGFubmVsLqBzZXRfaHJtcF9tYXhfcGFyYWNoYWluX291dGJvdW5kX2NoYW5uZWxzBAEMbmV3EAEMdTMyACUERQFTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBvdXRib3VuZCBIUk1QIGNoYW5uZWxzIGEgcGFyYWNoYWluIGlzIGFsbG93ZWQgdG8gb3Blbi6Yc2V0X2hybXBfbWF4X21lc3NhZ2VfbnVtX3Blcl9jYW5kaWRhdGUEAQxuZXcQAQx1MzIAJwQ1AVNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIG91dGJvdW5kIEhSTVAgbWVzc2FnZXMgY2FuIGJlIHNlbnQgYnkgYSBjYW5kaWRhdGUuSHNldF9wdmZfdm90aW5nX3R0bAQBDG5ldxABMFNlc3Npb25JbmRleAAqBFEBU2V0IHRoZSBudW1iZXIgb2Ygc2Vzc2lvbiBjaGFuZ2VzIGFmdGVyIHdoaWNoIGEgUFZGIHByZS1jaGVja2luZyB2b3RpbmcgaXMgcmVqZWN0ZWQukHNldF9taW5pbXVtX3ZhbGlkYXRpb25fdXBncmFkZV9kZWxheQQBDG5ldxABREJsb2NrTnVtYmVyRm9yPFQ+ACsQVQFTZXRzIHRoZSBtaW5pbXVtIGRlbGF5IGJldHdlZW4gYW5ub3VuY2luZyB0aGUgdXBncmFkZSBibG9jayBmb3IgYSBwYXJhY2hhaW4gdW50aWwgdGhlVHVwZ3JhZGUgdGFraW5nIHBsYWNlLgA5AVNlZSB0aGUgZmllbGQgZG9jdW1lbnRhdGlvbiBmb3IgaW5mb3JtYXRpb24gYW5kIGNvbnN0cmFpbnRzIGZvciB0aGUgbmV3IHZhbHVlLnBzZXRfYnlwYXNzX2NvbnNpc3RlbmN5X2NoZWNrBAEMbmV3IAEQYm9vbAAsCE0BU2V0dGluZyB0aGlzIHRvIHRydWUgd2lsbCBkaXNhYmxlIGNvbnNpc3RlbmN5IGNoZWNrcyBmb3IgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGVycy5EVXNlIHdpdGggY2F1dGlvbi5gc2V0X2FzeW5jX2JhY2tpbmdfcGFyYW1zBAEMbmV3VQQBSEFzeW5jQmFja2luZ1BhcmFtcwAtBKBTZXQgdGhlIGFzeW5jaHJvbm91cyBiYWNraW5nIHBhcmFtZXRlcnMuTHNldF9leGVjdXRvcl9wYXJhbXMEAQxuZXdZBAE4RXhlY3V0b3JQYXJhbXMALgRwU2V0IFBWRiBleGVjdXRvciBwYXJhbWV0ZXJzLlhzZXRfb25fZGVtYW5kX2Jhc2VfZmVlBAEMbmV3GAEcQmFsYW5jZQAvBKRTZXQgdGhlIG9uIGRlbWFuZCAocGFyYXRocmVhZHMpIGJhc2UgZmVlLnRzZXRfb25fZGVtYW5kX2ZlZV92YXJpYWJpbGl0eQQBDG5ld6wBHFBlcmJpbGwAMATAU2V0IHRoZSBvbiBkZW1hbmQgKHBhcmF0aHJlYWRzKSBmZWUgdmFyaWFiaWxpdHkucHNldF9vbl9kZW1hbmRfcXVldWVfbWF4X3NpemUEAQxuZXcQAQx1MzIAMQS8U2V0IHRoZSBvbiBkZW1hbmQgKHBhcmF0aHJlYWRzKSBxdWV1ZSBtYXggc2l6ZS6Yc2V0X29uX2RlbWFuZF90YXJnZXRfcXVldWVfdXRpbGl6YXRpb24EAQxuZXesARxQZXJiaWxsADIEwFNldCB0aGUgb24gZGVtYW5kIChwYXJhdGhyZWFkcykgZmVlIHZhcmlhYmlsaXR5LkRzZXRfb25fZGVtYW5kX3R0bAQBDG5ldxABREJsb2NrTnVtYmVyRm9yPFQ+ADME2FNldCB0aGUgb24gZGVtYW5kIChwYXJhdGhyZWFkcykgdHRsIGluIHRoZSBjbGFpbXF1ZXVlLmRzZXRfbWluaW11bV9iYWNraW5nX3ZvdGVzBAEMbmV3EAEMdTMyADQEoFNldCB0aGUgbWluaW11bSBiYWNraW5nIHZvdGVzIHRocmVzaG9sZC5Ac2V0X25vZGVfZmVhdHVyZQgBFGluZGV4CAEIdTgAARR2YWx1ZSABEGJvb2wANQRkU2V0L1Vuc2V0IGEgbm9kZSBmZWF0dXJlLmhzZXRfYXBwcm92YWxfdm90aW5nX3BhcmFtcwQBDG5ld20EAVBBcHByb3ZhbFZvdGluZ1BhcmFtcwA2BGxTZXQgYXBwcm92YWwtdm90aW5nLXBhcmFtcy5Qc2V0X3NjaGVkdWxlcl9wYXJhbXMEAQxuZXdxBAGIU2NoZWR1bGVyUGFyYW1zPEJsb2NrTnVtYmVyRm9yPFQ+PgA3BFRTZXQgc2NoZWR1bGVyLXBhcmFtcy4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuVQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc0YXN5bmNfYmFja2luZ0hBc3luY0JhY2tpbmdQYXJhbXMAAAgBTG1heF9jYW5kaWRhdGVfZGVwdGgQAQx1MzIAAVBhbGxvd2VkX2FuY2VzdHJ5X2xlbhABDHUzMgAAWQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc8ZXhlY3V0b3JfcGFyYW1zOEV4ZWN1dG9yUGFyYW1zAAAEAF0EAUhWZWM8RXhlY3V0b3JQYXJhbT4AAF0EAAACYQQAYQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc8ZXhlY3V0b3JfcGFyYW1zNEV4ZWN1dG9yUGFyYW0AARw4TWF4TWVtb3J5UGFnZXMEABABDHUzMgABADxTdGFja0xvZ2ljYWxNYXgEABABDHUzMgACADhTdGFja05hdGl2ZU1heAQAEAEMdTMyAAMAUFByZWNoZWNraW5nTWF4TWVtb3J5BAAwAQx1NjQABAA4UHZmUHJlcFRpbWVvdXQIAGUEASxQdmZQcmVwS2luZAAAMAEMdTY0AAUAOFB2ZkV4ZWNUaW1lb3V0CABpBAEsUHZmRXhlY0tpbmQAADABDHU2NAAGAERXYXNtRXh0QnVsa01lbW9yeQAHAABlBAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NyxQdmZQcmVwS2luZAABCCBQcmVjaGVjawAAABxQcmVwYXJlAAEAAGkEDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3LFB2ZkV4ZWNLaW5kAAEIHEJhY2tpbmcAAAAgQXBwcm92YWwAAQAAbQQMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdQQXBwcm92YWxWb3RpbmdQYXJhbXMAAAQBbG1heF9hcHByb3ZhbF9jb2FsZXNjZV9jb3VudBABDHUzMgAAcQQMTHBvbGthZG90X3ByaW1pdGl2ZXMgdnN0YWdpbmc8U2NoZWR1bGVyUGFyYW1zBCxCbG9ja051bWJlcgEQACwBYGdyb3VwX3JvdGF0aW9uX2ZyZXF1ZW5jeRABLEJsb2NrTnVtYmVyAAFkcGFyYXNfYXZhaWxhYmlsaXR5X3BlcmlvZBABLEJsb2NrTnVtYmVyAAFcbWF4X3ZhbGlkYXRvcnNfcGVyX2NvcmVhAgEsT3B0aW9uPHUzMj4AASRsb29rYWhlYWQQAQx1MzIAASRudW1fY29yZXMQAQx1MzIAAWRtYXhfYXZhaWxhYmlsaXR5X3RpbWVvdXRzEAEMdTMyAAFgb25fZGVtYW5kX3F1ZXVlX21heF9zaXplEAEMdTMyAAGIb25fZGVtYW5kX3RhcmdldF9xdWV1ZV91dGlsaXphdGlvbqwBHFBlcmJpbGwAAWRvbl9kZW1hbmRfZmVlX3ZhcmlhYmlsaXR5rAEcUGVyYmlsbAABSG9uX2RlbWFuZF9iYXNlX2ZlZRgBHEJhbGFuY2UAAQx0dGwQASxCbG9ja051bWJlcgAAdQQQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxhzaGFyZWQYcGFsbGV0EENhbGwEBFQAAQAEDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMueQQQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRpbmNsdXNpb24YcGFsbGV0EENhbGwEBFQAAQAEDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMufQQQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluczhwYXJhc19pbmhlcmVudBhwYWxsZXQQQ2FsbAQEVAABBBRlbnRlcgQBEGRhdGGBBAGQUGFyYWNoYWluc0luaGVyZW50RGF0YTxIZWFkZXJGb3I8VD4+AAAEMQFFbnRlciB0aGUgcGFyYXMgaW5oZXJlbnQuIFRoaXMgd2lsbCBwcm9jZXNzIGJpdGZpZWxkcyBhbmQgYmFja2VkIGNhbmRpZGF0ZXMuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLoEEDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3MEluaGVyZW50RGF0YQQMSERSAaEBABABJGJpdGZpZWxkc4UEAZBVbmNoZWNrZWRTaWduZWRBdmFpbGFiaWxpdHlCaXRmaWVsZHMAAURiYWNrZWRfY2FuZGlkYXRlc6EEAXxWZWM8QmFja2VkQ2FuZGlkYXRlPEhEUjo6SGFzaD4+AAEgZGlzcHV0ZXPlBAFgTXVsdGlEaXNwdXRlU3RhdGVtZW50U2V0AAE0cGFyZW50X2hlYWRlcqEBAQxIRFIAAIUEAAACiQQAiQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjcYc2lnbmVkPFVuY2hlY2tlZFNpZ25lZAgcUGF5bG9hZAGNBCxSZWFsUGF5bG9hZAGNBAAMARxwYXlsb2FkjQQBHFBheWxvYWQAATx2YWxpZGF0b3JfaW5kZXiZBAE4VmFsaWRhdG9ySW5kZXgAASRzaWduYXR1cmWdBAFIVmFsaWRhdG9yU2lnbmF0dXJlAACNBAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N1BBdmFpbGFiaWxpdHlCaXRmaWVsZAAABACRBAF8Qml0VmVjPHU4LCBiaXR2ZWM6Om9yZGVyOjpMc2IwPgAAkQQAAAcIlQQAlQQMGGJpdHZlYxRvcmRlchBMc2IwAAAAAJkEDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3OFZhbGlkYXRvckluZGV4AAAEABABDHUzMgAAnQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc0dmFsaWRhdG9yX2FwcCRTaWduYXR1cmUAAAQASQIBSHNyMjU1MTk6OlNpZ25hdHVyZQAAoQQAAAKlBAClBAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NzxCYWNrZWRDYW5kaWRhdGUEBEgBNAAMASRjYW5kaWRhdGWpBAFwQ29tbWl0dGVkQ2FuZGlkYXRlUmVjZWlwdDxIPgABOHZhbGlkaXR5X3ZvdGVz3QQBYFZlYzxWYWxpZGl0eUF0dGVzdGF0aW9uPgABRHZhbGlkYXRvcl9pbmRpY2VzkQQBfEJpdFZlYzx1OCwgYml0dmVjOjpvcmRlcjo6THNiMD4AAKkEDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3ZENvbW1pdHRlZENhbmRpZGF0ZVJlY2VpcHQEBEgBNAAIAShkZXNjcmlwdG9yrQQBWENhbmRpZGF0ZURlc2NyaXB0b3I8SD4AASxjb21taXRtZW50c70EAVBDYW5kaWRhdGVDb21taXRtZW50cwAArQQMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdMQ2FuZGlkYXRlRGVzY3JpcHRvcgQESAE0ACQBHHBhcmFfaWSNAgEISWQAATByZWxheV9wYXJlbnQ0AQRIAAEgY29sbGF0b3KxBAEoQ29sbGF0b3JJZAABeHBlcnNpc3RlZF92YWxpZGF0aW9uX2RhdGFfaGFzaDQBEEhhc2gAASBwb3ZfaGFzaDQBEEhhc2gAATBlcmFzdXJlX3Jvb3Q0ARBIYXNoAAEkc2lnbmF0dXJltQQBRENvbGxhdG9yU2lnbmF0dXJlAAEkcGFyYV9oZWFkNAEQSGFzaAABUHZhbGlkYXRpb25fY29kZV9oYXNouQQBSFZhbGlkYXRpb25Db2RlSGFzaAAAsQQQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjcwY29sbGF0b3JfYXBwGFB1YmxpYwAABAAEATxzcjI1NTE5OjpQdWJsaWMAALUEEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3MGNvbGxhdG9yX2FwcCRTaWduYXR1cmUAAAQASQIBSHNyMjU1MTk6OlNpZ25hdHVyZQAAuQQMdHBvbGthZG90X3BhcmFjaGFpbl9wcmltaXRpdmVzKHByaW1pdGl2ZXNIVmFsaWRhdGlvbkNvZGVIYXNoAAAEADQBEEhhc2gAAL0EDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3UENhbmRpZGF0ZUNvbW1pdG1lbnRzBAROARAAGAE8dXB3YXJkX21lc3NhZ2VzwQQBOFVwd2FyZE1lc3NhZ2VzAAFMaG9yaXpvbnRhbF9tZXNzYWdlc8UEAUhIb3Jpem9udGFsTWVzc2FnZXMAAUxuZXdfdmFsaWRhdGlvbl9jb2Rl0QQBWE9wdGlvbjxWYWxpZGF0aW9uQ29kZT4AASRoZWFkX2RhdGHZBAEgSGVhZERhdGEAAWxwcm9jZXNzZWRfZG93bndhcmRfbWVzc2FnZXMQAQx1MzIAAThocm1wX3dhdGVybWFyaxABBE4AAMEEDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBOARTAAAEAIUBARhWZWM8VD4AAMUEDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQByQQEUwAABADNBAEYVmVjPFQ+AADJBAhgcG9sa2Fkb3RfY29yZV9wcmltaXRpdmVzTE91dGJvdW5kSHJtcE1lc3NhZ2UECElkAY0CAAgBJHJlY2lwaWVudI0CAQhJZAABEGRhdGE4AVBzcF9zdGQ6OnZlYzo6VmVjPHU4PgAAzQQAAALJBADRBAQYT3B0aW9uBARUAdUEAQgQTm9uZQAAABBTb21lBADVBAAAAQAA1QQMdHBvbGthZG90X3BhcmFjaGFpbl9wcmltaXRpdmVzKHByaW1pdGl2ZXM4VmFsaWRhdGlvbkNvZGUAAAQAOAEcVmVjPHU4PgAA2QQMdHBvbGthZG90X3BhcmFjaGFpbl9wcmltaXRpdmVzKHByaW1pdGl2ZXMgSGVhZERhdGEAAAQAOAEcVmVjPHU4PgAA3QQAAALhBADhBAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N0xWYWxpZGl0eUF0dGVzdGF0aW9uAAEIIEltcGxpY2l0BACdBAFIVmFsaWRhdG9yU2lnbmF0dXJlAAEAIEV4cGxpY2l0BACdBAFIVmFsaWRhdG9yU2lnbmF0dXJlAAIAAOUEAAAC6QQA6QQMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdMRGlzcHV0ZVN0YXRlbWVudFNldAAADAE4Y2FuZGlkYXRlX2hhc2jtBAE0Q2FuZGlkYXRlSGFzaAABHHNlc3Npb24QATBTZXNzaW9uSW5kZXgAAShzdGF0ZW1lbnRz8QQB7FZlYzwoRGlzcHV0ZVN0YXRlbWVudCwgVmFsaWRhdG9ySW5kZXgsIFZhbGlkYXRvclNpZ25hdHVyZSk+AADtBAhgcG9sa2Fkb3RfY29yZV9wcmltaXRpdmVzNENhbmRpZGF0ZUhhc2gAAAQANAEQSGFzaAAA8QQAAAL1BAD1BAAABAz5BJkEnQQA+QQMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdARGlzcHV0ZVN0YXRlbWVudAABCBRWYWxpZAQA/QQBZFZhbGlkRGlzcHV0ZVN0YXRlbWVudEtpbmQAAAAcSW52YWxpZAQABQUBbEludmFsaWREaXNwdXRlU3RhdGVtZW50S2luZAABAAD9BAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N2RWYWxpZERpc3B1dGVTdGF0ZW1lbnRLaW5kAAEUIEV4cGxpY2l0AAAAPEJhY2tpbmdTZWNvbmRlZAQANAEQSGFzaAABADBCYWNraW5nVmFsaWQEADQBEEhhc2gAAgBAQXBwcm92YWxDaGVja2luZwADAIhBcHByb3ZhbENoZWNraW5nTXVsdGlwbGVDYW5kaWRhdGVzBAABBQFIVmVjPENhbmRpZGF0ZUhhc2g+AAQAAAEFAAAC7QQABQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdsSW52YWxpZERpc3B1dGVTdGF0ZW1lbnRLaW5kAAEEIEV4cGxpY2l0AAAAAAkFEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXMYcGFsbGV0EENhbGwEBFQAASRYZm9yY2Vfc2V0X2N1cnJlbnRfY29kZQgBEHBhcmGNAgEYUGFyYUlkAAEgbmV3X2NvZGXVBAE4VmFsaWRhdGlvbkNvZGUAAAT4U2V0IHRoZSBzdG9yYWdlIGZvciB0aGUgcGFyYWNoYWluIHZhbGlkYXRpb24gY29kZSBpbW1lZGlhdGVseS5YZm9yY2Vfc2V0X2N1cnJlbnRfaGVhZAgBEHBhcmGNAgEYUGFyYUlkAAEgbmV3X2hlYWTZBAEgSGVhZERhdGEAAQQBAVNldCB0aGUgc3RvcmFnZSBmb3IgdGhlIGN1cnJlbnQgcGFyYWNoYWluIGhlYWQgZGF0YSBpbW1lZGlhdGVseS5sZm9yY2Vfc2NoZWR1bGVfY29kZV91cGdyYWRlDAEQcGFyYY0CARhQYXJhSWQAASBuZXdfY29kZdUEAThWYWxpZGF0aW9uQ29kZQABTHJlbGF5X3BhcmVudF9udW1iZXIQAURCbG9ja051bWJlckZvcjxUPgACBC0BU2NoZWR1bGUgYW4gdXBncmFkZSBhcyBpZiBpdCB3YXMgc2NoZWR1bGVkIGluIHRoZSBnaXZlbiByZWxheSBwYXJlbnQgYmxvY2suTGZvcmNlX25vdGVfbmV3X2hlYWQIARBwYXJhjQIBGFBhcmFJZAABIG5ld19oZWFk2QQBIEhlYWREYXRhAAMEHQFOb3RlIGEgbmV3IGJsb2NrIGhlYWQgZm9yIHBhcmEgd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBjdXJyZW50IGJsb2NrLkhmb3JjZV9xdWV1ZV9hY3Rpb24EARBwYXJhjQIBGFBhcmFJZAAEDPhQdXQgYSBwYXJhY2hhaW4gZGlyZWN0bHkgaW50byB0aGUgbmV4dCBzZXNzaW9uJ3MgYWN0aW9uIHF1ZXVlLvRXZSBjYW4ndCBxdWV1ZSBpdCBhbnkgc29vbmVyIHRoYW4gdGhpcyB3aXRob3V0IGdvaW5nIGludG8gdGhlOGluaXRpYWxpemVyLi4ubGFkZF90cnVzdGVkX3ZhbGlkYXRpb25fY29kZQQBPHZhbGlkYXRpb25fY29kZdUEAThWYWxpZGF0aW9uQ29kZQAFOKBBZGRzIHRoZSB2YWxpZGF0aW9uIGNvZGUgdG8gdGhlIHN0b3JhZ2UuAFkBVGhlIGNvZGUgd2lsbCBub3QgYmUgYWRkZWQgaWYgaXQgaXMgYWxyZWFkeSBwcmVzZW50LiBBZGRpdGlvbmFsbHksIGlmIFBWRiBwcmUtY2hlY2tpbmfgaXMgcnVubmluZyBmb3IgdGhhdCBjb2RlLCBpdCB3aWxsIGJlIGluc3RhbnRseSBhY2NlcHRlZC4AUQFPdGhlcndpc2UsIHRoZSBjb2RlIHdpbGwgYmUgYWRkZWQgaW50byB0aGUgc3RvcmFnZS4gTm90ZSB0aGF0IHRoZSBjb2RlIHdpbGwgYmUgYWRkZWRhAWludG8gc3RvcmFnZSB3aXRoIHJlZmVyZW5jZSBjb3VudCAwLiBUaGlzIGlzIHRvIGFjY291bnQgdGhlIGZhY3QgdGhhdCB0aGVyZSBhcmUgbm8gdXNlcnNNAWZvciB0aGlzIGNvZGUgeWV0LiBUaGUgY2FsbGVyIHdpbGwgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGlzIGNvZGUgZXZlbnR1YWxseSBnZXRzSQF1c2VkIGJ5IHNvbWUgcGFyYWNoYWluIG9yIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmFnZSB0byBhdm9pZCBzdG9yYWdlIGxlYWtzLiBGb3IgdGhlSQFsYXR0ZXIgcHJlZmVyIHRvIHVzZSB0aGUgYHBva2VfdW51c2VkX3ZhbGlkYXRpb25fY29kZWAgZGlzcGF0Y2hhYmxlIHRvIHJhdyBzdG9yYWdlNG1hbmlwdWxhdGlvbi4AUQFUaGlzIGZ1bmN0aW9uIGlzIG1haW5seSBtZWFudCB0byBiZSB1c2VkIGZvciB1cGdyYWRpbmcgcGFyYWNoYWlucyB0aGF0IGRvIG5vdCBmb2xsb3cJAXRoZSBnby1haGVhZCBzaWduYWwgd2hpbGUgdGhlIFBWRiBwcmUtY2hlY2tpbmcgZmVhdHVyZSBpcyBlbmFibGVkLmxwb2tlX3VudXNlZF92YWxpZGF0aW9uX2NvZGUEAVB2YWxpZGF0aW9uX2NvZGVfaGFzaLkEAUhWYWxpZGF0aW9uQ29kZUhhc2gABhQlAVJlbW92ZSB0aGUgdmFsaWRhdGlvbiBjb2RlIGZyb20gdGhlIHN0b3JhZ2UgaWZmIHRoZSByZWZlcmVuY2UgY291bnQgaXMgMC4AWQFUaGlzIGlzIGJldHRlciB0aGFuIHJlbW92aW5nIHRoZSBzdG9yYWdlIGRpcmVjdGx5LCBiZWNhdXNlIGl0IHdpbGwgbm90IHJlbW92ZSB0aGUgY29kZUEBdGhhdCB3YXMgc3VkZGVubHkgZ290IHVzZWQgYnkgc29tZSBwYXJhY2hhaW4gd2hpbGUgdGhpcyBkaXNwYXRjaGFibGUgd2FzIHBlbmRpbmcwZGlzcGF0Y2hpbmcubGluY2x1ZGVfcHZmX2NoZWNrX3N0YXRlbWVudAgBEHN0bXQNBQFEUHZmQ2hlY2tTdGF0ZW1lbnQAASRzaWduYXR1cmWdBAFIVmFsaWRhdG9yU2lnbmF0dXJlAAcIVQFJbmNsdWRlcyBhIHN0YXRlbWVudCBmb3IgYSBQVkYgcHJlLWNoZWNraW5nIHZvdGUuIFBvdGVudGlhbGx5LCBmaW5hbGl6ZXMgdGhlIHZvdGUgYW5kQQFlbmFjdHMgdGhlIHJlc3VsdHMgaWYgdGhhdCB3YXMgdGhlIGxhc3Qgdm90ZSBiZWZvcmUgYWNoaWV2aW5nIHRoZSBzdXBlcm1ham9yaXR5LnRmb3JjZV9zZXRfbW9zdF9yZWNlbnRfY29udGV4dAgBEHBhcmGNAgEYUGFyYUlkAAEcY29udGV4dBABREJsb2NrTnVtYmVyRm9yPFQ+AAgEAQFTZXQgdGhlIHN0b3JhZ2UgZm9yIHRoZSBjdXJyZW50IHBhcmFjaGFpbiBoZWFkIGRhdGEgaW1tZWRpYXRlbHkuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLg0FDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3RFB2ZkNoZWNrU3RhdGVtZW50AAAQARhhY2NlcHQgARBib29sAAEcc3ViamVjdLkEAUhWYWxpZGF0aW9uQ29kZUhhc2gAATRzZXNzaW9uX2luZGV4EAEwU2Vzc2lvbkluZGV4AAE8dmFsaWRhdG9yX2luZGV4mQQBOFZhbGlkYXRvckluZGV4AAARBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zLGluaXRpYWxpemVyGHBhbGxldBBDYWxsBARUAAEENGZvcmNlX2FwcHJvdmUEARR1cF90bxABLEJsb2NrTnVtYmVyAAAMOQFJc3N1ZSBhIHNpZ25hbCB0byB0aGUgY29uc2Vuc3VzIGVuZ2luZSB0byBmb3JjaWJseSBhY3QgYXMgdGhvdWdoIGFsbCBwYXJhY2hhaW5RAWJsb2NrcyBpbiBhbGwgcmVsYXkgY2hhaW4gYmxvY2tzIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGdpdmVuIG51bWJlciBpbiB0aGUgY3VycmVudKBjaGFpbiBhcmUgdmFsaWQgYW5kIHNob3VsZCBiZSBmaW5hbGl6ZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLhUFEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMQaHJtcBhwYWxsZXQQQ2FsbAQEVAABLFhocm1wX2luaXRfb3Blbl9jaGFubmVsDAEkcmVjaXBpZW50jQIBGFBhcmFJZAABVHByb3Bvc2VkX21heF9jYXBhY2l0eRABDHUzMgABZHByb3Bvc2VkX21heF9tZXNzYWdlX3NpemUQAQx1MzIAAChNAUluaXRpYXRlIG9wZW5pbmcgYSBjaGFubmVsIGZyb20gYSBwYXJhY2hhaW4gdG8gYSBnaXZlbiByZWNpcGllbnQgd2l0aCBnaXZlbiBjaGFubmVsLHBhcmFtZXRlcnMuAFkBLSBgcHJvcG9zZWRfbWF4X2NhcGFjaXR5YCAtIHNwZWNpZmllcyBob3cgbWFueSBtZXNzYWdlcyBjYW4gYmUgaW4gdGhlIGNoYW5uZWwgYXQgb25jZS4tAS0gYHByb3Bvc2VkX21heF9tZXNzYWdlX3NpemVgIC0gc3BlY2lmaWVzIHRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIG1lc3NhZ2VzLgARAVRoZXNlIG51bWJlcnMgYXJlIGEgc3ViamVjdCB0byB0aGUgcmVsYXktY2hhaW4gY29uZmlndXJhdGlvbiBsaW1pdHMuAFEBVGhlIGNoYW5uZWwgY2FuIGJlIG9wZW5lZCBvbmx5IGFmdGVyIHRoZSByZWNpcGllbnQgY29uZmlybXMgaXQgYW5kIG9ubHkgb24gYSBzZXNzaW9uHGNoYW5nZS5gaHJtcF9hY2NlcHRfb3Blbl9jaGFubmVsBAEYc2VuZGVyjQIBGFBhcmFJZAABDPBBY2NlcHQgYSBwZW5kaW5nIG9wZW4gY2hhbm5lbCByZXF1ZXN0IGZyb20gdGhlIGdpdmVuIHNlbmRlci4A9FRoZSBjaGFubmVsIHdpbGwgYmUgb3BlbmVkIG9ubHkgb24gdGhlIG5leHQgc2Vzc2lvbiBib3VuZGFyeS5IaHJtcF9jbG9zZV9jaGFubmVsBAEoY2hhbm5lbF9pZBkFATRIcm1wQ2hhbm5lbElkAAIQVQFJbml0aWF0ZSB1bmlsYXRlcmFsIGNsb3Npbmcgb2YgYSBjaGFubmVsLiBUaGUgb3JpZ2luIG11c3QgYmUgZWl0aGVyIHRoZSBzZW5kZXIgb3IgdGhlmHJlY2lwaWVudCBpbiB0aGUgY2hhbm5lbCBiZWluZyBjbG9zZWQuAMBUaGUgY2xvc3VyZSBjYW4gb25seSBoYXBwZW4gb24gYSBzZXNzaW9uIGNoYW5nZS5AZm9yY2VfY2xlYW5faHJtcAwBEHBhcmGNAgEYUGFyYUlkAAEsbnVtX2luYm91bmQQAQx1MzIAATBudW1fb3V0Ym91bmQQAQx1MzIAAxxdAVRoaXMgZXh0cmluc2ljIHRyaWdnZXJzIHRoZSBjbGVhbnVwIG9mIGFsbCB0aGUgSFJNUCBzdG9yYWdlIGl0ZW1zIHRoYXQgYSBwYXJhIG1heSBoYXZlLkkBTm9ybWFsbHkgdGhpcyBoYXBwZW5zIG9uY2UgcGVyIHNlc3Npb24sIGJ1dCB0aGlzIGFsbG93cyB5b3UgdG8gdHJpZ2dlciB0aGUgY2xlYW51cJRpbW1lZGlhdGVseSBmb3IgYSBzcGVjaWZpYyBwYXJhY2hhaW4uAFEBTnVtYmVyIG9mIGluYm91bmQgYW5kIG91dGJvdW5kIGNoYW5uZWxzIGZvciBgcGFyYWAgbXVzdCBiZSBwcm92aWRlZCBhcyB3aXRuZXNzIGRhdGEuAJBPcmlnaW4gbXVzdCBiZSB0aGUgYENoYW5uZWxNYW5hZ2VyYC5cZm9yY2VfcHJvY2Vzc19ocm1wX29wZW4EASBjaGFubmVscxABDHUzMgAEIKRGb3JjZSBwcm9jZXNzIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3RzLgBVAUlmIHRoZXJlIGFyZSBwZW5kaW5nIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3RzLCB5b3UgY2FuIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIHByb2Nlc3OIYWxsIG9mIHRob3NlIHJlcXVlc3RzIGltbWVkaWF0ZWx5LgAJAVRvdGFsIG51bWJlciBvZiBvcGVuaW5nIGNoYW5uZWxzIG11c3QgYmUgcHJvdmlkZWQgYXMgd2l0bmVzcyBkYXRhLgCQT3JpZ2luIG11c3QgYmUgdGhlIGBDaGFubmVsTWFuYWdlcmAuYGZvcmNlX3Byb2Nlc3NfaHJtcF9jbG9zZQQBIGNoYW5uZWxzEAEMdTMyAAUgqEZvcmNlIHByb2Nlc3MgSFJNUCBjbG9zZSBjaGFubmVsIHJlcXVlc3RzLgBZAUlmIHRoZXJlIGFyZSBwZW5kaW5nIEhSTVAgY2xvc2UgY2hhbm5lbCByZXF1ZXN0cywgeW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvbiB0byBwcm9jZXNziGFsbCBvZiB0aG9zZSByZXF1ZXN0cyBpbW1lZGlhdGVseS4ACQFUb3RhbCBudW1iZXIgb2YgY2xvc2luZyBjaGFubmVscyBtdXN0IGJlIHByb3ZpZGVkIGFzIHdpdG5lc3MgZGF0YS4AkE9yaWdpbiBtdXN0IGJlIHRoZSBgQ2hhbm5lbE1hbmFnZXJgLmBocm1wX2NhbmNlbF9vcGVuX3JlcXVlc3QIAShjaGFubmVsX2lkGQUBNEhybXBDaGFubmVsSWQAATRvcGVuX3JlcXVlc3RzEAEMdTMyAAYgXQFUaGlzIGNhbmNlbHMgYSBwZW5kaW5nIG9wZW4gY2hhbm5lbCByZXF1ZXN0LiBJdCBjYW4gYmUgY2FuY2VsZWQgYnkgZWl0aGVyIG9mIHRoZSBzZW5kZXIZAW9yIHRoZSByZWNpcGllbnQgZm9yIHRoYXQgcmVxdWVzdC4gVGhlIG9yaWdpbiBtdXN0IGJlIGVpdGhlciBvZiB0aG9zZS4AXQFUaGUgY2FuY2VsbGF0aW9uIGhhcHBlbnMgaW1tZWRpYXRlbHkuIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBjYW5jZWwgdGhlIHJlcXVlc3QgaWYgaXQgaXNEYWxyZWFkeSBhY2NlcHRlZC4AWQFUb3RhbCBudW1iZXIgb2Ygb3BlbiByZXF1ZXN0cyAoaS5lLiBgSHJtcE9wZW5DaGFubmVsUmVxdWVzdHNMaXN0YCkgbXVzdCBiZSBwcm92aWRlZCBhczR3aXRuZXNzIGRhdGEuXGZvcmNlX29wZW5faHJtcF9jaGFubmVsEAEYc2VuZGVyjQIBGFBhcmFJZAABJHJlY2lwaWVudI0CARhQYXJhSWQAATBtYXhfY2FwYWNpdHkQAQx1MzIAAUBtYXhfbWVzc2FnZV9zaXplEAEMdTMyAAcgYQFPcGVuIGEgY2hhbm5lbCBmcm9tIGEgYHNlbmRlcmAgdG8gYSBgcmVjaXBpZW50YCBgUGFyYUlkYC4gQWx0aG91Z2ggb3BlbmVkIGJ5IGdvdmVybmFuY2UsQQF0aGUgYG1heF9jYXBhY2l0eWAgYW5kIGBtYXhfbWVzc2FnZV9zaXplYCBhcmUgc3RpbGwgc3ViamVjdCB0byB0aGUgUmVsYXkgQ2hhaW4nc0hjb25maWd1cmVkIGxpbWl0cy4ATQFFeHBlY3RlZCB1c2UgaXMgd2hlbiBvbmUgKGFuZCBvbmx5IG9uZSkgb2YgdGhlIGBQYXJhSWRgcyBpbnZvbHZlZCBpbiB0aGUgY2hhbm5lbCBpc8Bnb3Zlcm5lZCBieSB0aGUgc3lzdGVtLCBlLmcuIGEgc3lzdGVtIHBhcmFjaGFpbi4AkE9yaWdpbiBtdXN0IGJlIHRoZSBgQ2hhbm5lbE1hbmFnZXJgLmBlc3RhYmxpc2hfc3lzdGVtX2NoYW5uZWwIARhzZW5kZXKNAgEYUGFyYUlkAAEkcmVjaXBpZW50jQIBGFBhcmFJZAAIMFEBRXN0YWJsaXNoIGFuIEhSTVAgY2hhbm5lbCBiZXR3ZWVuIHR3byBzeXN0ZW0gY2hhaW5zLiBJZiB0aGUgY2hhbm5lbCBkb2VzIG5vdCBhbHJlYWR5UQFleGlzdCwgdGhlIHRyYW5zYWN0aW9uIGZlZXMgd2lsbCBiZSByZWZ1bmRlZCB0byB0aGUgY2FsbGVyLiBUaGUgc3lzdGVtIGRvZXMgbm90IHRha2VZAWRlcG9zaXRzIGZvciBjaGFubmVscyBiZXR3ZWVuIHN5c3RlbSBjaGFpbnMsIGFuZCBhdXRvbWF0aWNhbGx5IHNldHMgdGhlIG1lc3NhZ2UgbnVtYmVyGQFhbmQgc2l6ZSBsaW1pdHMgdG8gdGhlIG1heGltdW0gYWxsb3dlZCBieSB0aGUgbmV0d29yaydzIGNvbmZpZ3VyYXRpb24uAChBcmd1bWVudHM6AJQtIGBzZW5kZXJgOiBBIHN5c3RlbSBjaGFpbiwgYFBhcmFJZGAuoC0gYHJlY2lwaWVudGA6IEEgc3lzdGVtIGNoYWluLCBgUGFyYUlkYC4AVQFBbnkgc2lnbmVkIG9yaWdpbiBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLCBidXQgX2JvdGhfIGlucHV0cyBNVVNUIGJlIHN5c3RlbSBjaGFpbnMuIElmwHRoZSBjaGFubmVsIGRvZXMgbm90IGV4aXN0IHlldCwgdGhlcmUgaXMgbm8gZmVlLlRwb2tlX2NoYW5uZWxfZGVwb3NpdHMIARhzZW5kZXKNAgEYUGFyYUlkAAEkcmVjaXBpZW50jQIBGFBhcmFJZAAJJFEBVXBkYXRlIHRoZSBkZXBvc2l0cyBoZWxkIGZvciBhbiBIUk1QIGNoYW5uZWwgdG8gdGhlIGxhdGVzdCBgQ29uZmlndXJhdGlvbmAuIENoYW5uZWxzsHdpdGggc3lzdGVtIGNoYWlucyBkbyBub3QgcmVxdWlyZSBhIGRlcG9zaXQuAChBcmd1bWVudHM6AHgtIGBzZW5kZXJgOiBBIGNoYWluLCBgUGFyYUlkYC6ELSBgcmVjaXBpZW50YDogQSBjaGFpbiwgYFBhcmFJZGAuAKRBbnkgc2lnbmVkIG9yaWdpbiBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLnRlc3RhYmxpc2hfY2hhbm5lbF93aXRoX3N5c3RlbQQBTHRhcmdldF9zeXN0ZW1fY2hhaW6NAgEYUGFyYUlkAAocOQFFc3RhYmxpc2ggYSBiaWRpcmVjdGlvbmFsIEhSTVAgY2hhbm5lbCBiZXR3ZWVuIGEgcGFyYWNoYWluIGFuZCBhIHN5c3RlbSBjaGFpbi4AKEFyZ3VtZW50czoAyC0gYHRhcmdldF9zeXN0ZW1fY2hhaW5gOiBBIHN5c3RlbSBjaGFpbiwgYFBhcmFJZGAuALBUaGUgb3JpZ2luIG5lZWRzIHRvIGJlIHRoZSBwYXJhY2hhaW4gb3JpZ2luLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy4ZBQx0cG9sa2Fkb3RfcGFyYWNoYWluX3ByaW1pdGl2ZXMocHJpbWl0aXZlczRIcm1wQ2hhbm5lbElkAAAIARhzZW5kZXKNAgEISWQAASRyZWNpcGllbnSNAgEISWQAAB0FEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMYcGFsbGV0EENhbGwEBFQAAQQ4Zm9yY2VfdW5mcmVlemUAAAAEDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuIQUUbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBkaXNwdXRlcyBzbGFzaGluZxhwYWxsZXQQQ2FsbAQEVAABBHByZXBvcnRfZGlzcHV0ZV9sb3N0X3Vuc2lnbmVkCAE0ZGlzcHV0ZV9wcm9vZiUFAURCb3g8RGlzcHV0ZVByb29mPgABPGtleV9vd25lcl9wcm9vZq0BAUBUOjpLZXlPd25lclByb29mAAAABA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLiUFEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3IHNsYXNoaW5nMERpc3B1dGVQcm9vZgAAEAEkdGltZV9zbG90KQUBQERpc3B1dGVzVGltZVNsb3QAARBraW5kLQUBTFNsYXNoaW5nT2ZmZW5jZUtpbmQAATx2YWxpZGF0b3JfaW5kZXiZBAE4VmFsaWRhdG9ySW5kZXgAATB2YWxpZGF0b3JfaWQdAgEsVmFsaWRhdG9ySWQAACkFEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3IHNsYXNoaW5nQERpc3B1dGVzVGltZVNsb3QAAAgBNHNlc3Npb25faW5kZXgQATBTZXNzaW9uSW5kZXgAAThjYW5kaWRhdGVfaGFzaO0EATRDYW5kaWRhdGVIYXNoAAAtBRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NyBzbGFzaGluZ0xTbGFzaGluZ09mZmVuY2VLaW5kAAEIKEZvckludmFsaWQAAAAwQWdhaW5zdFZhbGlkAAEAADEFEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnNIYXNzaWduZXJfb25fZGVtYW5kGHBhbGxldBBDYWxsBARUAAEIXHBsYWNlX29yZGVyX2FsbG93X2RlYXRoCAEobWF4X2Ftb3VudBgBMEJhbGFuY2VPZjxUPgABHHBhcmFfaWSNAgEYUGFyYUlkAAA8lENyZWF0ZSBhIHNpbmdsZSBvbiBkZW1hbmQgY29yZSBvcmRlci5JAVdpbGwgdXNlIHRoZSBzcG90IHByaWNlIGZvciB0aGUgY3VycmVudCBibG9jayBhbmQgd2lsbCByZWFwIHRoZSBhY2NvdW50IGlmIG5lZWRlZC4ALFBhcmFtZXRlcnM6OQEtIGBvcmlnaW5gOiBUaGUgc2VuZGVyIG9mIHRoZSBjYWxsLCBmdW5kcyB3aWxsIGJlIHdpdGhkcmF3biBmcm9tIHRoaXMgYWNjb3VudC5JAS0gYG1heF9hbW91bnRgOiBUaGUgbWF4aW11bSBiYWxhbmNlIHRvIHdpdGhkcmF3IGZyb20gdGhlIG9yaWdpbiB0byBwbGFjZSBhbiBvcmRlci4NAS0gYHBhcmFfaWRgOiBBIGBQYXJhSWRgIHRoZSBvcmlnaW4gd2FudHMgdG8gcHJvdmlkZSBibG9ja3NwYWNlIGZvci4AHEVycm9yczrkLSBgSW5zdWZmaWNpZW50QmFsYW5jZWA6IGZyb20gdGhlIEN1cnJlbmN5IGltcGxlbWVudGF0aW9uNC0gYFF1ZXVlRnVsbGCALSBgU3BvdFByaWNlSGlnaGVyVGhhbk1heEFtb3VudGAAHEV2ZW50czpcLSBgT25EZW1hbmRPcmRlclBsYWNlZGBYcGxhY2Vfb3JkZXJfa2VlcF9hbGl2ZQgBKG1heF9hbW91bnQYATBCYWxhbmNlT2Y8VD4AARxwYXJhX2lkjQIBGFBhcmFJZAABPGEBU2FtZSBhcyB0aGUgW2BwbGFjZV9vcmRlcl9hbGxvd19kZWF0aGBdKFNlbGY6OnBsYWNlX29yZGVyX2FsbG93X2RlYXRoKSBjYWxsICwgYnV0IHdpdGggYdxjaGVjayB0aGF0IHBsYWNpbmcgdGhlIG9yZGVyIHdpbGwgbm90IHJlYXAgdGhlIGFjY291bnQuACxQYXJhbWV0ZXJzOjkBLSBgb3JpZ2luYDogVGhlIHNlbmRlciBvZiB0aGUgY2FsbCwgZnVuZHMgd2lsbCBiZSB3aXRoZHJhd24gZnJvbSB0aGlzIGFjY291bnQuSQEtIGBtYXhfYW1vdW50YDogVGhlIG1heGltdW0gYmFsYW5jZSB0byB3aXRoZHJhdyBmcm9tIHRoZSBvcmlnaW4gdG8gcGxhY2UgYW4gb3JkZXIuDQEtIGBwYXJhX2lkYDogQSBgUGFyYUlkYCB0aGUgb3JpZ2luIHdhbnRzIHRvIHByb3ZpZGUgYmxvY2tzcGFjZSBmb3IuABxFcnJvcnM65C0gYEluc3VmZmljaWVudEJhbGFuY2VgOiBmcm9tIHRoZSBDdXJyZW5jeSBpbXBsZW1lbnRhdGlvbjQtIGBRdWV1ZUZ1bGxggC0gYFNwb3RQcmljZUhpZ2hlclRoYW5NYXhBbW91bnRgABxFdmVudHM6XC0gYE9uRGVtYW5kT3JkZXJQbGFjZWRgBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLjUFEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIYcGFsbGV0EENhbGwEBFQAASQgcmVnaXN0ZXIMAQhpZI0CARhQYXJhSWQAATBnZW5lc2lzX2hlYWTZBAEgSGVhZERhdGEAATx2YWxpZGF0aW9uX2NvZGXVBAE4VmFsaWRhdGlvbkNvZGUAAFD4UmVnaXN0ZXIgaGVhZCBkYXRhIGFuZCB2YWxpZGF0aW9uIGNvZGUgZm9yIGEgcmVzZXJ2ZWQgUGFyYSBJZC4AMCMjIEFyZ3VtZW50c8AtIGBvcmlnaW5gOiBNdXN0IGJlIGNhbGxlZCBieSBhIGBTaWduZWRgIG9yaWdpbi4tAS0gYGlkYDogVGhlIHBhcmEgSUQuIE11c3QgYmUgb3duZWQvbWFuYWdlZCBieSB0aGUgYG9yaWdpbmAgc2lnbmluZyBhY2NvdW50LgEBLSBgZ2VuZXNpc19oZWFkYDogVGhlIGdlbmVzaXMgaGVhZCBkYXRhIG9mIHRoZSBwYXJhY2hhaW4vdGhyZWFkLiUBLSBgdmFsaWRhdGlvbl9jb2RlYDogVGhlIGluaXRpYWwgdmFsaWRhdGlvbiBjb2RlIG9mIHRoZSBwYXJhY2hhaW4vdGhyZWFkLgBAIyMgRGVwb3NpdHMvRmVlcwkBVGhlIGFjY291bnQgd2l0aCB0aGUgb3JpZ2luYXRpbmcgc2lnbmF0dXJlIG11c3QgcmVzZXJ2ZSBhIGRlcG9zaXQuAE0BVGhlIGRlcG9zaXQgaXMgcmVxdWlyZWQgdG8gY292ZXIgdGhlIGNvc3RzIGFzc29jaWF0ZWQgd2l0aCBzdG9yaW5nIHRoZSBnZW5lc2lzIGhlYWR0ZGF0YSBhbmQgdGhlIHZhbGlkYXRpb24gY29kZS4xAVRoaXMgYWNjb3VudHMgZm9yIHRoZSBwb3RlbnRpYWwgdG8gc3RvcmUgdmFsaWRhdGlvbiBjb2RlIG9mIGEgc2l6ZSB1cCB0byB0aGXcYG1heF9jb2RlX3NpemVgLCBhcyBkZWZpbmVkIGluIHRoZSBjb25maWd1cmF0aW9uIHBhbGxldAAdAUFueXRoaW5nIGFscmVhZHkgcmVzZXJ2ZWQgcHJldmlvdXNseSBmb3IgdGhpcyBwYXJhIElEIGlzIGFjY291bnRlZCBmb3IuACQjIyBFdmVudHPUVGhlIGBSZWdpc3RlcmVkYCBldmVudCBpcyBlbWl0dGVkIGluIGNhc2Ugb2Ygc3VjY2Vzcy44Zm9yY2VfcmVnaXN0ZXIUAQx3aG8AATBUOjpBY2NvdW50SWQAARxkZXBvc2l0GAEwQmFsYW5jZU9mPFQ+AAEIaWSNAgEYUGFyYUlkAAEwZ2VuZXNpc19oZWFk2QQBIEhlYWREYXRhAAE8dmFsaWRhdGlvbl9jb2Rl1QQBOFZhbGlkYXRpb25Db2RlAAEY3EZvcmNlIHRoZSByZWdpc3RyYXRpb24gb2YgYSBQYXJhIElkIG9uIHRoZSByZWxheSBjaGFpbi4AuFRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYnkgYSBSb290IG9yaWdpbi4AGQFUaGUgZGVwb3NpdCB0YWtlbiBjYW4gYmUgc3BlY2lmaWVkIGZvciB0aGlzIHJlZ2lzdHJhdGlvbi4gQW55IGBQYXJhSWRgGQFjYW4gYmUgcmVnaXN0ZXJlZCwgaW5jbHVkaW5nIHN1Yi0xMDAwIElEcyB3aGljaCBhcmUgU3lzdGVtIFBhcmFjaGFpbnMuKGRlcmVnaXN0ZXIEAQhpZI0CARhQYXJhSWQAAhAFAURlcmVnaXN0ZXIgYSBQYXJhIElkLCBmcmVlaW5nIGFsbCBkYXRhIGFuZCByZXR1cm5pbmcgYW55IGRlcG9zaXQuAFEBVGhlIGNhbGxlciBtdXN0IGJlIFJvb3QsIHRoZSBgcGFyYWAgb3duZXIsIG9yIHRoZSBgcGFyYWAgaXRzZWxmLiBUaGUgcGFyYSBtdXN0IGJlIGFuUG9uLWRlbWFuZCBwYXJhY2hhaW4uEHN3YXAIAQhpZI0CARhQYXJhSWQAARRvdGhlco0CARhQYXJhSWQAAzBBAVN3YXAgYSBsZWFzZSBob2xkaW5nIHBhcmFjaGFpbiB3aXRoIGFub3RoZXIgcGFyYWNoYWluLCBlaXRoZXIgb24tZGVtYW5kIG9yIGxlYXNlIGhvbGRpbmcuAAEBVGhlIG9yaWdpbiBtdXN0IGJlIFJvb3QsIHRoZSBgcGFyYWAgb3duZXIsIG9yIHRoZSBgcGFyYWAgaXRzZWxmLgBhAVRoZSBzd2FwIHdpbGwgaGFwcGVuIG9ubHkgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBvcHBvc2l0ZSBzd2FwIHBlbmRpbmcuIElmIHRoZXJlIGlzIG5vdCxZAXRoZSBzd2FwIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBwZW5kaW5nIHN3YXBzIG1hcCwgcmVhZHkgZm9yIGEgbGF0ZXIgY29uZmlybWF0b3J5IHN3YXAuAF0BVGhlIGBQYXJhSWRgcyByZW1haW4gbWFwcGVkIHRvIHRoZSBzYW1lIGhlYWQgZGF0YSBhbmQgY29kZSBzbyBleHRlcm5hbCBjb2RlIGNhbiByZWx5IG9uPQFgUGFyYUlkYCB0byBiZSBhIGxvbmctdGVybSBpZGVudGlmaWVyIG9mIGEgbm90aW9uYWwgInBhcmFjaGFpbiIuIEhvd2V2ZXIsIHRoZWlyNQFzY2hlZHVsaW5nIGluZm8gKGkuZS4gd2hldGhlciB0aGV5J3JlIGFuIG9uLWRlbWFuZCBwYXJhY2hhaW4gb3IgbGVhc2UgaG9sZGluZxUBcGFyYWNoYWluKSwgYXVjdGlvbiBpbmZvcm1hdGlvbiBhbmQgdGhlIGF1Y3Rpb24gZGVwb3NpdCBhcmUgc3dpdGNoZWQuLHJlbW92ZV9sb2NrBAEQcGFyYY0CARhQYXJhSWQABBANAVJlbW92ZSBhIG1hbmFnZXIgbG9jayBmcm9tIGEgcGFyYS4gVGhpcyB3aWxsIGFsbG93IHRoZSBtYW5hZ2VyIG9mIGE1AXByZXZpb3VzbHkgbG9ja2VkIHBhcmEgdG8gZGVyZWdpc3RlciBvciBzd2FwIGEgcGFyYSB3aXRob3V0IHVzaW5nIGdvdmVybmFuY2UuANxDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIFJvb3Qgb3JpZ2luIG9yIHRoZSBwYXJhY2hhaW4uHHJlc2VydmUABUSUUmVzZXJ2ZSBhIFBhcmEgSWQgb24gdGhlIHJlbGF5IGNoYWluLgBNAVRoaXMgZnVuY3Rpb24gd2lsbCByZXNlcnZlIGEgbmV3IFBhcmEgSWQgdG8gYmUgb3duZWQvbWFuYWdlZCBieSB0aGUgb3JpZ2luIGFjY291bnQuYQFUaGUgb3JpZ2luIGFjY291bnQgaXMgYWJsZSB0byByZWdpc3RlciBoZWFkIGRhdGEgYW5kIHZhbGlkYXRpb24gY29kZSB1c2luZyBgcmVnaXN0ZXJgIHRvWQFjcmVhdGUgYW4gb24tZGVtYW5kIHBhcmFjaGFpbi4gVXNpbmcgdGhlIFNsb3RzIHBhbGxldCwgYW4gb24tZGVtYW5kIHBhcmFjaGFpbiBjYW4gdGhlbqRiZSB1cGdyYWRlZCB0byBhIGxlYXNlIGhvbGRpbmcgcGFyYWNoYWluLgAwIyMgQXJndW1lbnRzVQEtIGBvcmlnaW5gOiBNdXN0IGJlIGNhbGxlZCBieSBhIGBTaWduZWRgIG9yaWdpbi4gQmVjb21lcyB0aGUgbWFuYWdlci9vd25lciBvZiB0aGUgbmV3KCAgcGFyYSBJRC4AQCMjIERlcG9zaXRzL0ZlZXMhAVRoZSBvcmlnaW4gbXVzdCByZXNlcnZlIGEgZGVwb3NpdCBvZiBgUGFyYURlcG9zaXRgIGZvciB0aGUgcmVnaXN0cmF0aW9uLgAkIyMgRXZlbnRzWQFUaGUgYFJlc2VydmVkYCBldmVudCBpcyBlbWl0dGVkIGluIGNhc2Ugb2Ygc3VjY2Vzcywgd2hpY2ggcHJvdmlkZXMgdGhlIElEIHJlc2VydmVkIGZvchB1c2UuIGFkZF9sb2NrBAEQcGFyYY0CARhQYXJhSWQABhQJAUFkZCBhIG1hbmFnZXIgbG9jayBmcm9tIGEgcGFyYS4gVGhpcyB3aWxsIHByZXZlbnQgdGhlIG1hbmFnZXIgb2YgYYhwYXJhIHRvIGRlcmVnaXN0ZXIgb3Igc3dhcCBhIHBhcmEuAEkBQ2FuIGJlIGNhbGxlZCBieSBSb290LCB0aGUgcGFyYWNoYWluLCBvciB0aGUgcGFyYWNoYWluIG1hbmFnZXIgaWYgdGhlIHBhcmFjaGFpbiBpcyR1bmxvY2tlZC5Uc2NoZWR1bGVfY29kZV91cGdyYWRlCAEQcGFyYY0CARhQYXJhSWQAASBuZXdfY29kZdUEAThWYWxpZGF0aW9uQ29kZQAHLHRTY2hlZHVsZSBhIHBhcmFjaGFpbiB1cGdyYWRlLgBVAVRoaXMgd2lsbCBraWNrIG9mZiBhIGNoZWNrIG9mIGBuZXdfY29kZWAgYnkgYWxsIHZhbGlkYXRvcnMuIEFmdGVyIHRoZSBtYWpvcml0eSBvZiB0aGVVAXZhbGlkYXRvcnMgaGF2ZSByZXBvcnRlZCBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIGNvZGUsIHRoZSBjb2RlIHdpbGwgZWl0aGVyIGJlIGVuYWN0ZWRVAW9yIHRoZSB1cGdyYWRlIHdpbGwgYmUgcmVqZWN0ZWQuIElmIHRoZSBjb2RlIHdpbGwgYmUgZW5hY3RlZCwgdGhlIGN1cnJlbnQgY29kZSBvZiB0aGVdAXBhcmFjaGFpbiB3aWxsIGJlIG92ZXJ3cml0dGVuIGRpcmVjdGx5LiBUaGlzIG1lYW5zIHRoYXQgYW55IFBvViB3aWxsIGJlIGNoZWNrZWQgYnkgdGhpc10BbmV3IGNvZGUuIFRoZSBwYXJhY2hhaW4gaXRzZWxmIHdpbGwgbm90IGJlIGluZm9ybWVkIGV4cGxpY2l0bHkgdGhhdCB0aGUgdmFsaWRhdGlvbiBjb2RlMGhhcyBjaGFuZ2VkLgBJAUNhbiBiZSBjYWxsZWQgYnkgUm9vdCwgdGhlIHBhcmFjaGFpbiwgb3IgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyIGlmIHRoZSBwYXJhY2hhaW4gaXMkdW5sb2NrZWQuQHNldF9jdXJyZW50X2hlYWQIARBwYXJhjQIBGFBhcmFJZAABIG5ld19oZWFk2QQBIEhlYWREYXRhAAgQhFNldCB0aGUgcGFyYWNoYWluJ3MgY3VycmVudCBoZWFkLgBJAUNhbiBiZSBjYWxsZWQgYnkgUm9vdCwgdGhlIHBhcmFjaGFpbiwgb3IgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyIGlmIHRoZSBwYXJhY2hhaW4gaXMkdW5sb2NrZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLjkFEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhRzbG90cxhwYWxsZXQQQ2FsbAQEVAABDCxmb3JjZV9sZWFzZRQBEHBhcmGNAgEYUGFyYUlkAAEYbGVhc2VyAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEwcGVyaW9kX2JlZ2luEAFATGVhc2VQZXJpb2RPZjxUPgABMHBlcmlvZF9jb3VudBABQExlYXNlUGVyaW9kT2Y8VD4AABBNAUp1c3QgYSBjb25uZWN0IGludG8gdGhlIGBsZWFzZV9vdXRgIGNhbGwsIGluIGNhc2UgUm9vdCB3YW50cyB0byBmb3JjZSBzb21lIGxlYXNlIHRv/GhhcHBlbiBpbmRlcGVuZGVudGx5IG9mIGFueSBvdGhlciBvbi1jaGFpbiBtZWNoYW5pc20gdG8gdXNlIGl0LgD4VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgbWF0Y2ggYFQ6OkZvcmNlT3JpZ2luYC5AY2xlYXJfYWxsX2xlYXNlcwQBEHBhcmGNAgEYUGFyYUlkAAEMTQFDbGVhciBhbGwgbGVhc2VzIGZvciBhIFBhcmEgSWQsIHJlZnVuZGluZyBhbnkgZGVwb3NpdHMgYmFjayB0byB0aGUgb3JpZ2luYWwgb3duZXJzLgD4VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgbWF0Y2ggYFQ6OkZvcmNlT3JpZ2luYC48dHJpZ2dlcl9vbmJvYXJkBAEQcGFyYY0CARhQYXJhSWQAAhwlAVRyeSB0byBvbmJvYXJkIGEgcGFyYWNoYWluIHRoYXQgaGFzIGEgbGVhc2UgZm9yIHRoZSBjdXJyZW50IGxlYXNlIHBlcmlvZC4ARQFUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgaWYgdGhlcmUgd2FzIHNvbWUgc3RhdGUgaXNzdWUgd2l0aCBhIHBhcmEgdGhhdCBzaG91bGQ5AWhhdmUgb25ib2FyZGVkLCBidXQgd2FzIHVuYWJsZSB0by4gQXMgbG9uZyBhcyB0aGV5IGhhdmUgYSBsZWFzZSBwZXJpb2QsIHdlIGNhbmxsZXQgdGhlbSBvbmJvYXJkIGZyb20gaGVyZS4AzE9yaWdpbiBtdXN0IGJlIHNpZ25lZCwgYnV0IGNhbiBiZSBjYWxsZWQgYnkgYW55b25lLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy49BRBccG9sa2Fkb3RfcnVudGltZV9jb21tb24gYXVjdGlvbnMYcGFsbGV0EENhbGwEBFQAAQwsbmV3X2F1Y3Rpb24IASBkdXJhdGlvbuwBREJsb2NrTnVtYmVyRm9yPFQ+AAFIbGVhc2VfcGVyaW9kX2luZGV47AFATGVhc2VQZXJpb2RPZjxUPgAAFFRDcmVhdGUgYSBuZXcgYXVjdGlvbi4AUQFUaGlzIGNhbiBvbmx5IGhhcHBlbiB3aGVuIHRoZXJlIGlzbid0IGFscmVhZHkgYW4gYXVjdGlvbiBpbiBwcm9ncmVzcyBhbmQgbWF5IG9ubHkgYmUlAWNhbGxlZCBieSB0aGUgcm9vdCBvcmlnaW4uIEFjY2VwdHMgdGhlIGBkdXJhdGlvbmAgb2YgdGhpcyBhdWN0aW9uIGFuZCB0aGVZAWBsZWFzZV9wZXJpb2RfaW5kZXhgIG9mIHRoZSBpbml0aWFsIGxlYXNlIHBlcmlvZCBvZiB0aGUgZm91ciB0aGF0IGFyZSB0byBiZSBhdWN0aW9uZWQuDGJpZBQBEHBhcmFBBQEYUGFyYUlkAAE0YXVjdGlvbl9pbmRleOwBMEF1Y3Rpb25JbmRleAABKGZpcnN0X3Nsb3TsAUBMZWFzZVBlcmlvZE9mPFQ+AAEkbGFzdF9zbG907AFATGVhc2VQZXJpb2RPZjxUPgABGGFtb3VudPwBMEJhbGFuY2VPZjxUPgABQEkBTWFrZSBhIG5ldyBiaWQgZnJvbSBhbiBhY2NvdW50IChpbmNsdWRpbmcgYSBwYXJhY2hhaW4gYWNjb3VudCkgZm9yIGRlcGxveWluZyBhIG5ldyhwYXJhY2hhaW4uAFkBTXVsdGlwbGUgc2ltdWx0YW5lb3VzIGJpZHMgZnJvbSB0aGUgc2FtZSBiaWRkZXIgYXJlIGFsbG93ZWQgb25seSBhcyBsb25nIGFzIGFsbCBhY3RpdmU9AWJpZHMgb3ZlcmxhcCBlYWNoIG90aGVyIChpLmUuIGFyZSBtdXR1YWxseSBleGNsdXNpdmUpLiBCaWRzIGNhbm5vdCBiZSByZWRhY3RlZC4AVQEtIGBzdWJgIGlzIHRoZSBzdWItYmlkZGVyIElELCBhbGxvd2luZyBmb3IgbXVsdGlwbGUgY29tcGV0aW5nIGJpZHMgdG8gYmUgbWFkZSBieSAoYW5kcGZ1bmRlZCBieSkgdGhlIHNhbWUgYWNjb3VudC5NAS0gYGF1Y3Rpb25faW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgYXVjdGlvbiB0byBiaWQgb24uIFNob3VsZCBqdXN0IGJlIHRoZSBwcmVzZW50aHZhbHVlIG9mIGBBdWN0aW9uQ291bnRlcmAuSQEtIGBmaXJzdF9zbG90YCBpcyB0aGUgZmlyc3QgbGVhc2UgcGVyaW9kIGluZGV4IG9mIHRoZSByYW5nZSB0byBiaWQgb24uIFRoaXMgaXMgdGhlCQFhYnNvbHV0ZSBsZWFzZSBwZXJpb2QgaW5kZXggdmFsdWUsIG5vdCBhbiBhdWN0aW9uLXNwZWNpZmljIG9mZnNldC5BAS0gYGxhc3Rfc2xvdGAgaXMgdGhlIGxhc3QgbGVhc2UgcGVyaW9kIGluZGV4IG9mIHRoZSByYW5nZSB0byBiaWQgb24uIFRoaXMgaXMgdGhlCQFhYnNvbHV0ZSBsZWFzZSBwZXJpb2QgaW5kZXggdmFsdWUsIG5vdCBhbiBhdWN0aW9uLXNwZWNpZmljIG9mZnNldC5JAS0gYGFtb3VudGAgaXMgdGhlIGFtb3VudCB0byBiaWQgdG8gYmUgaGVsZCBhcyBkZXBvc2l0IGZvciB0aGUgcGFyYWNoYWluIHNob3VsZCB0aGXIYmlkIHdpbi4gVGhpcyBhbW91bnQgaXMgaGVsZCB0aHJvdWdob3V0IHRoZSByYW5nZS44Y2FuY2VsX2F1Y3Rpb24AAgx4Q2FuY2VsIGFuIGluLXByb2dyZXNzIGF1Y3Rpb24uAIhDYW4gb25seSBiZSBjYWxsZWQgYnkgUm9vdCBvcmlnaW4uBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLkEFAAAGjQIARQUQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uJGNyb3dkbG9hbhhwYWxsZXQQQ2FsbAQEVAABJBhjcmVhdGUYARRpbmRleEEFARhQYXJhSWQAAQxjYXD8ATBCYWxhbmNlT2Y8VD4AATBmaXJzdF9wZXJpb2TsAUBMZWFzZVBlcmlvZE9mPFQ+AAEsbGFzdF9wZXJpb2TsAUBMZWFzZVBlcmlvZE9mPFQ+AAEMZW5k7AFEQmxvY2tOdW1iZXJGb3I8VD4AASB2ZXJpZmllckkFAUxPcHRpb248TXVsdGlTaWduZXI+AAAUTQFDcmVhdGUgYSBuZXcgY3Jvd2Rsb2FuaW5nIGNhbXBhaWduIGZvciBhIHBhcmFjaGFpbiBzbG90IHdpdGggdGhlIGdpdmVuIGxlYXNlIHBlcmlvZBhyYW5nZS4AXQFUaGlzIGFwcGxpZXMgYSBsb2NrIHRvIHlvdXIgcGFyYWNoYWluIGNvbmZpZ3VyYXRpb24sIGVuc3VyaW5nIHRoYXQgaXQgY2Fubm90IGJlIGNoYW5nZWRkYnkgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyLihjb250cmlidXRlDAEUaW5kZXhBBQEYUGFyYUlkAAEUdmFsdWX8ATBCYWxhbmNlT2Y8VD4AASRzaWduYXR1cmVRBQFYT3B0aW9uPE11bHRpU2lnbmF0dXJlPgABCFEBQ29udHJpYnV0ZSB0byBhIGNyb3dkIHNhbGUuIFRoaXMgd2lsbCB0cmFuc2ZlciBzb21lIGJhbGFuY2Ugb3ZlciB0byBmdW5kIGEgcGFyYWNoYWluUQFzbG90LiBJdCB3aWxsIGJlIHdpdGhkcmF3YWJsZSB3aGVuIHRoZSBjcm93ZGxvYW4gaGFzIGVuZGVkIGFuZCB0aGUgZnVuZHMgYXJlIHVudXNlZC4gd2l0aGRyYXcIAQx3aG8AATBUOjpBY2NvdW50SWQAARRpbmRleEEFARhQYXJhSWQAAkTAV2l0aGRyYXcgZnVsbCBiYWxhbmNlIG9mIGEgc3BlY2lmaWMgY29udHJpYnV0b3IuAMBPcmlnaW4gbXVzdCBiZSBzaWduZWQsIGJ1dCBjYW4gY29tZSBmcm9tIGFueW9uZS4AXQFUaGUgZnVuZCBtdXN0IGJlIGVpdGhlciBpbiwgb3IgcmVhZHkgZm9yLCByZXRpcmVtZW50LiBGb3IgYSBmdW5kIHRvIGJlICppbiogcmV0aXJlbWVudCxJAXRoZW4gdGhlIHJldGlyZW1lbnQgZmxhZyBtdXN0IGJlIHNldC4gRm9yIGEgZnVuZCB0byBiZSByZWFkeSBmb3IgcmV0aXJlbWVudCwgdGhlbjqcLSBpdCBtdXN0IG5vdCBhbHJlYWR5IGJlIGluIHJldGlyZW1lbnQ7TQEtIHRoZSBhbW91bnQgb2YgcmFpc2VkIGZ1bmRzIG11c3QgYmUgYmlnZ2VyIHRoYW4gdGhlIF9mcmVlXyBiYWxhbmNlIG9mIHRoZSBhY2NvdW50OzQtIGFuZCBlaXRoZXI6vCAgLSB0aGUgYmxvY2sgbnVtYmVyIG11c3QgYmUgYXQgbGVhc3QgYGVuZGA7IG9yLQEgIC0gdGhlIGN1cnJlbnQgbGVhc2UgcGVyaW9kIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBmdW5kJ3MgYGxhc3RfcGVyaW9kYC4AVQFJbiB0aGlzIGNhc2UsIHRoZSBmdW5kJ3MgcmV0aXJlbWVudCBmbGFnIGlzIHNldCBhbmQgaXRzIGBlbmRgIGlzIHJlc2V0IHRvIHRoZSBjdXJyZW50NGJsb2NrIG51bWJlci4A8C0gYHdob2A6IFRoZSBhY2NvdW50IHdob3NlIGNvbnRyaWJ1dGlvbiBzaG91bGQgYmUgd2l0aGRyYXduLhkBLSBgaW5kZXhgOiBUaGUgcGFyYWNoYWluIHRvIHdob3NlIGNyb3dkbG9hbiB0aGUgY29udHJpYnV0aW9uIHdhcyBtYWRlLhhyZWZ1bmQEARRpbmRleEEFARhQYXJhSWQAAxTgQXV0b21hdGljYWxseSByZWZ1bmQgY29udHJpYnV0b3JzIG9mIGFuIGVuZGVkIGNyb3dkbG9hbi4hAUR1ZSB0byB3ZWlnaHQgcmVzdHJpY3Rpb25zLCB0aGlzIGZ1bmN0aW9uIG1heSBuZWVkIHRvIGJlIGNhbGxlZCBtdWx0aXBsZUkBdGltZXMgdG8gZnVsbHkgcmVmdW5kIGFsbCB1c2Vycy4gV2Ugd2lsbCByZWZ1bmQgYFJlbW92ZUtleXNMaW1pdGAgdXNlcnMgYXQgYSB0aW1lLgDAT3JpZ2luIG11c3QgYmUgc2lnbmVkLCBidXQgY2FuIGNvbWUgZnJvbSBhbnlvbmUuIGRpc3NvbHZlBAEUaW5kZXhBBQEYUGFyYUlkAAQEVQFSZW1vdmUgYSBmdW5kIGFmdGVyIHRoZSByZXRpcmVtZW50IHBlcmlvZCBoYXMgZW5kZWQgYW5kIGFsbCBmdW5kcyBoYXZlIGJlZW4gcmV0dXJuZWQuEGVkaXQYARRpbmRleEEFARhQYXJhSWQAAQxjYXD8ATBCYWxhbmNlT2Y8VD4AATBmaXJzdF9wZXJpb2TsAUBMZWFzZVBlcmlvZE9mPFQ+AAEsbGFzdF9wZXJpb2TsAUBMZWFzZVBlcmlvZE9mPFQ+AAEMZW5k7AFEQmxvY2tOdW1iZXJGb3I8VD4AASB2ZXJpZmllckkFAUxPcHRpb248TXVsdGlTaWduZXI+AAUM0EVkaXQgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIGFuIGluLXByb2dyZXNzIGNyb3dkbG9hbi4AiENhbiBvbmx5IGJlIGNhbGxlZCBieSBSb290IG9yaWdpbi4gYWRkX21lbW8IARRpbmRleI0CARhQYXJhSWQAARBtZW1vOAEcVmVjPHU4PgAGDOxBZGQgYW4gb3B0aW9uYWwgbWVtbyB0byBhbiBleGlzdGluZyBjcm93ZGxvYW4gY29udHJpYnV0aW9uLgAtAU9yaWdpbiBtdXN0IGJlIFNpZ25lZCwgYW5kIHRoZSB1c2VyIG11c3QgaGF2ZSBjb250cmlidXRlZCB0byB0aGUgY3Jvd2Rsb2FuLhBwb2tlBAEUaW5kZXiNAgEYUGFyYUlkAAcMdFBva2UgdGhlIGZ1bmQgaW50byBgTmV3UmFpc2VgANxPcmlnaW4gbXVzdCBiZSBTaWduZWQsIGFuZCB0aGUgZnVuZCBoYXMgbm9uLXplcm8gcmFpc2UuOGNvbnRyaWJ1dGVfYWxsCAEUaW5kZXhBBQEYUGFyYUlkAAEkc2lnbmF0dXJlUQUBWE9wdGlvbjxNdWx0aVNpZ25hdHVyZT4ACAxhAUNvbnRyaWJ1dGUgeW91ciBlbnRpcmUgYmFsYW5jZSB0byBhIGNyb3dkIHNhbGUuIFRoaXMgd2lsbCB0cmFuc2ZlciB0aGUgZW50aXJlIGJhbGFuY2Ugb2ZRAWEgdXNlciBvdmVyIHRvIGZ1bmQgYSBwYXJhY2hhaW4gc2xvdC4gSXQgd2lsbCBiZSB3aXRoZHJhd2FibGUgd2hlbiB0aGUgY3Jvd2Rsb2FuIGhhc3xlbmRlZCBhbmQgdGhlIGZ1bmRzIGFyZSB1bnVzZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLkkFBBhPcHRpb24EBFQBTQUBCBBOb25lAAAAEFNvbWUEAE0FAAABAABNBQgoc3BfcnVudGltZSxNdWx0aVNpZ25lcgABDBxFZDI1NTE5BAAEATxlZDI1NTE5OjpQdWJsaWMAAAAcU3IyNTUxOQQABAE8c3IyNTUxOTo6UHVibGljAAEAFEVjZHNhBAAtAgE0ZWNkc2E6OlB1YmxpYwACAABRBQQYT3B0aW9uBARUAVUFAQgQTm9uZQAAABBTb21lBABVBQAAAQAAVQUIKHNwX3J1bnRpbWU4TXVsdGlTaWduYXR1cmUAAQwcRWQyNTUxOQQASQIBSGVkMjU1MTk6OlNpZ25hdHVyZQAAABxTcjI1NTE5BABJAgFIc3IyNTUxOTo6U2lnbmF0dXJlAAEAFEVjZHNhBADZAgFAZWNkc2E6OlNpZ25hdHVyZQACAABZBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zIGNvcmV0aW1lGHBhbGxldBBDYWxsBARUAAEMSHJlcXVlc3RfY29yZV9jb3VudAQBFGNvdW50bQEBDHUxNgABGFEBUmVxdWVzdCB0aGUgY29uZmlndXJhdGlvbiB0byBiZSB1cGRhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgY29yZXMuIFdhcm5pbmc6UQFTaW5jZSB0aGlzIG9ubHkgc2NoZWR1bGVzIGEgY29uZmlndXJhdGlvbiB1cGRhdGUsIGl0IHRha2VzIHR3byBzZXNzaW9ucyB0byBjb21lIGludG8cZWZmZWN0LgCYLSBgb3JpZ2luYDogUm9vdCBvciB0aGUgQ29yZXRpbWUgQ2hhaW6ALSBgY291bnRgOiB0b3RhbCBudW1iZXIgb2YgY29yZXNIcmVxdWVzdF9yZXZlbnVlX2F0BAEQd2hlbhABLEJsb2NrTnVtYmVyAAIQYQFSZXF1ZXN0IHRvIGNsYWltIHRoZSBpbnN0YW50YW5lb3VzIGNvcmV0aW1lIHNhbGVzIHJldmVudWUgc3RhcnRpbmcgZnJvbSB0aGUgYmxvY2sgaXQgd2FzXQFsYXN0IGNsYWltZWQgdW50aWwgYW5kIHVwIHRvIHRoZSBibG9jayBzcGVjaWZpZWQuIFRoZSBjbGFpbWVkIGFtb3VudCB2YWx1ZSBpcyBzZW50IGJhY2tRAXRvIHRoZSBDb3JldGltZSBjaGFpbiBpbiBhIGBub3RpZnlfcmV2ZW51ZWAgbWVzc2FnZS4gQXQgdGhlIHNhbWUgdGltZSwgdGhlIGFtb3VudCBpc4R0ZWxlcG9ydGVkIHRvIHRoZSBDb3JldGltZSBjaGFpbi4sYXNzaWduX2NvcmUQARBjb3JlbQEBPEJyb2tlckNvcmVJbmRleAABFGJlZ2luEAFEQmxvY2tOdW1iZXJGb3I8VD4AAShhc3NpZ25tZW50XQUBjFZlYzwoQ29yZUFzc2lnbm1lbnQsIFBhcnRzT2Y1NzYwMCk+AAEgZW5kX2hpbnRhAgFkT3B0aW9uPEJsb2NrTnVtYmVyRm9yPFQ+PgAEJFkBUmVjZWl2ZSBpbnN0cnVjdGlvbnMgZnJvbSB0aGUgYEV4dGVybmFsQnJva2VyT3JpZ2luYCwgZGV0YWlsaW5nIGhvdyBhIHNwZWNpZmljIGNvcmUgaXMsdG8gYmUgdXNlZC4ALFBhcmFtZXRlcnM6IQEtYG9yaWdpbmA6IFRoZSBgRXh0ZXJuYWxCcm9rZXJPcmlnaW5gLCBhc3N1bWVkIHRvIGJlIHRoZSBjb3JldGltZSBjaGFpbi6sLWBjb3JlYDogVGhlIGNvcmUgdGhhdCBzaG91bGQgYmUgc2NoZWR1bGVkLtgtYGJlZ2luYDogVGhlIHN0YXJ0aW5nIGJsb2NraGVpZ2h0IG9mIHRoZSBpbnN0cnVjdGlvbi7ULWBhc3NpZ25tZW50YDogSG93IHRoZSBibG9ja3NwYWNlIHNob3VsZCBiZSB1dGlsaXNlZC5ZAS1gZW5kX2hpbnRgOiBBbiBvcHRpb25hbCBoaW50IGFzIHRvIHdoZW4gdGhpcyBwYXJ0aWN1bGFyIHNldCBvZiBpbnN0cnVjdGlvbnMgd2lsbCBlbmQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLl0FAAACYQUAYQUAAAQIZQVpBQBlBQw0cGFsbGV0X2Jyb2tlckhjb3JldGltZV9pbnRlcmZhY2U4Q29yZUFzc2lnbm1lbnQAAQwQSWRsZQAAABBQb29sAAEAEFRhc2sEABABGFRhc2tJZAACAABpBQxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zRGFzc2lnbmVyX2NvcmV0aW1lMFBhcnRzT2Y1NzYwMAAABABtAQEMdTE2AABtBQxscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uGHBhbGxldBBDYWxsBARUAAEYWGNvbnRyb2xfYXV0b19taWdyYXRpb24EATBtYXliZV9jb25maWdxBQFcT3B0aW9uPE1pZ3JhdGlvbkxpbWl0cz4AAAyAQ29udHJvbCB0aGUgYXV0b21hdGljIG1pZ3JhdGlvbi4ADQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIFtgQ29uZmlnOjpDb250cm9sT3JpZ2luYF0uQGNvbnRpbnVlX21pZ3JhdGUMARhsaW1pdHN1BQE8TWlncmF0aW9uTGltaXRzAAE8cmVhbF9zaXplX3VwcGVyEAEMdTMyAAEwd2l0bmVzc190YXNreQUBQE1pZ3JhdGlvblRhc2s8VD4AAVS4Q29udGludWUgdGhlIG1pZ3JhdGlvbiBmb3IgdGhlIGdpdmVuIGBsaW1pdHNgLgDsVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgY2FuIGJlIGFueSBzaWduZWQgYWNjb3VudC4AXQFUaGlzIHRyYW5zYWN0aW9uIGhhcyBOTyBNT05FVEFSWSBJTkNFTlRJVkVTLiBjYWxsaW5nIGl0IHdpbGwgbm90IHJld2FyZCBhbnlvbmUuIEFsYmVpdCzsVXBvbiBzdWNjZXNzZnVsIGV4ZWN1dGlvbiwgdGhlIHRyYW5zYWN0aW9uIGZlZSBpcyByZXR1cm5lZC4AQQFUaGUgKHBvdGVudGlhbGx5IG92ZXItZXN0aW1hdGVkKSBvZiB0aGUgYnl0ZSBsZW5ndGggb2YgYWxsIHRoZSBkYXRhIHJlYWQgbXVzdCBiZVkBcHJvdmlkZWQgZm9yIHVwLWZyb250IGZlZS1wYXltZW50IGFuZCB3ZWlnaGluZy4gSW4gZXNzZW5jZSwgdGhlIGNhbGxlciBpcyBndWFyYW50ZWVpbmdJAXRoYXQgZXhlY3V0aW5nIHRoZSBjdXJyZW50IGBNaWdyYXRpb25UYXNrYCB3aXRoIHRoZSBnaXZlbiBgbGltaXRzYCB3aWxsIG5vdCBleGNlZWSUYHJlYWxfc2l6ZV91cHBlcmAgYnl0ZXMgb2YgcmVhZCBkYXRhLgBFAVRoZSBgd2l0bmVzc190YXNrYCBpcyBtZXJlbHkgYSBoZWxwZXIgdG8gcHJldmVudCB0aGUgY2FsbGVyIGZyb20gYmVpbmcgc2xhc2hlZCBvcl0BZ2VuZXJhbGx5IHRyaWdnZXIgYSBtaWdyYXRpb24gdGhhdCB0aGV5IGRvIG5vdCBpbnRlbmQuIFRoaXMgcGFyYW1ldGVyIGlzIGp1c3QgYSBtZXNzYWdlPQFmcm9tIGNhbGxlciwgc2F5aW5nIHRoYXQgdGhleSBiZWxpZXZlZCBgd2l0bmVzc190YXNrYCB3YXMgdGhlIGxhc3Qgc3RhdGUgb2YgdGhlWQFtaWdyYXRpb24sIGFuZCB0aGV5IG9ubHkgd2lzaCBmb3IgdGhlaXIgdHJhbnNhY3Rpb24gdG8gZG8gYW55dGhpbmcsIGlmIHRoaXMgYXNzdW1wdGlvbhEBaG9sZHMuIEluIGNhc2UgYHdpdG5lc3NfdGFza2AgZG9lcyBub3QgbWF0Y2gsIHRoZSB0cmFuc2FjdGlvbiBmYWlscy4AOQFCYXNlZCBvbiB0aGUgZG9jdW1lbnRhdGlvbiBvZiBbYE1pZ3JhdGlvblRhc2s6Om1pZ3JhdGVfdW50aWxfZXhoYXVzdGlvbmBdLCB0aGVNAXJlY29tbWVuZGVkIHdheSBvZiBkb2luZyB0aGlzIGlzIHRvIHBhc3MgYSBgbGltaXRgIHRoYXQgb25seSBib3VuZHMgYGNvdW50YCwgYXMgdGhlnGBzaXplYCBsaW1pdCBjYW4gYWx3YXlzIGJlIG92ZXJ3cml0dGVuLkhtaWdyYXRlX2N1c3RvbV90b3AIARBrZXlzhQEBMFZlYzxWZWM8dTg+PgABMHdpdG5lc3Nfc2l6ZRABDHUzMgACEAkBTWlncmF0ZSB0aGUgbGlzdCBvZiB0b3Aga2V5cyBieSBpdGVyYXRpbmcgZWFjaCBvZiB0aGVtIG9uZSBieSBvbmUuAFUBVGhpcyBkb2VzIG5vdCBhZmZlY3QgdGhlIGdsb2JhbCBtaWdyYXRpb24gcHJvY2VzcyB0cmFja2VyIChbYE1pZ3JhdGlvblByb2Nlc3NgXSksIGFuZPxzaG91bGQgb25seSBiZSB1c2VkIGluIGNhc2UgYW55IGtleXMgYXJlIGxlZnRvdmVyIGR1ZSB0byBhIGJ1Zy5QbWlncmF0ZV9jdXN0b21fY2hpbGQMARByb290OAEcVmVjPHU4PgABKGNoaWxkX2tleXOFAQEwVmVjPFZlYzx1OD4+AAEodG90YWxfc2l6ZRABDHUzMgADGBEBTWlncmF0ZSB0aGUgbGlzdCBvZiBjaGlsZCBrZXlzIGJ5IGl0ZXJhdGluZyBlYWNoIG9mIHRoZW0gb25lIGJ5IG9uZS4ADQFBbGwgb2YgdGhlIGdpdmVuIGNoaWxkIGtleXMgbXVzdCBiZSBwcmVzZW50IHVuZGVyIG9uZSBgY2hpbGRfcm9vdGAuAFUBVGhpcyBkb2VzIG5vdCBhZmZlY3QgdGhlIGdsb2JhbCBtaWdyYXRpb24gcHJvY2VzcyB0cmFja2VyIChbYE1pZ3JhdGlvblByb2Nlc3NgXSksIGFuZPxzaG91bGQgb25seSBiZSB1c2VkIGluIGNhc2UgYW55IGtleXMgYXJlIGxlZnRvdmVyIGR1ZSB0byBhIGJ1Zy5Uc2V0X3NpZ25lZF9tYXhfbGltaXRzBAEYbGltaXRzdQUBPE1pZ3JhdGlvbkxpbWl0cwAEBLhTZXQgdGhlIG1heGltdW0gbGltaXQgb2YgdGhlIHNpZ25lZCBtaWdyYXRpb24uSGZvcmNlX3NldF9wcm9ncmVzcwgBMHByb2dyZXNzX3RvcH0FATRQcm9ncmVzc09mPFQ+AAE4cHJvZ3Jlc3NfY2hpbGR9BQE0UHJvZ3Jlc3NPZjxUPgAFJMhGb3JjZWZ1bGx5IHNldCB0aGUgcHJvZ3Jlc3MgdGhlIHJ1bm5pbmcgbWlncmF0aW9uLgBdAVRoaXMgaXMgb25seSB1c2VmdWwgaW4gb25lIGNhc2U6IHRoZSBuZXh0IGtleSB0byBtaWdyYXRlIGlzIHRvbyBiaWcgdG8gYmUgbWlncmF0ZWQgd2l0aFUBYSBzaWduZWQgYWNjb3VudCwgaW4gYSBwYXJhY2hhaW4gY29udGV4dCwgYW5kIHdlIHNpbXBseSB3YW50IHRvIHNraXAgaXQuIEEgcmVhc29uYWJsZWEBZXhhbXBsZSBvZiB0aGlzIHdvdWxkIGJlIGA6Y29kZTpgLCB3aGljaCBpcyBib3RoIHZlcnkgZXhwZW5zaXZlIHRvIG1pZ3JhdGUsIGFuZCBjb21tb25seaR1c2VkLCBzbyBwcm9iYWJseSBpdCBpcyBhbHJlYWR5IG1pZ3JhdGVkLgBdAUluIGNhc2UgeW91IG1lc3MgdGhpbmdzIHVwLCB5b3UgY2FuIGFsc28sIGluIHByaW5jaXBsZSwgdXNlIHRoaXMgdG8gcmVzZXQgdGhlIG1pZ3JhdGlvbiBwcm9jZXNzLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy5xBQQYT3B0aW9uBARUAXUFAQgQTm9uZQAAABBTb21lBAB1BQAAAQAAdQUMbHBhbGxldF9zdGF0ZV90cmllX21pZ3JhdGlvbhhwYWxsZXQ8TWlncmF0aW9uTGltaXRzAAAIARBzaXplEAEMdTMyAAEQaXRlbRABDHUzMgAAeQUMbHBhbGxldF9zdGF0ZV90cmllX21pZ3JhdGlvbhhwYWxsZXQ0TWlncmF0aW9uVGFzawQEVAAAFAEwcHJvZ3Jlc3NfdG9wfQUBNFByb2dyZXNzT2Y8VD4AAThwcm9ncmVzc19jaGlsZH0FATRQcm9ncmVzc09mPFQ+AAEQc2l6ZRABDHUzMgABJHRvcF9pdGVtcxABDHUzMgABLGNoaWxkX2l0ZW1zEAEMdTMyAAB9BQxscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uGHBhbGxldCBQcm9ncmVzcwQkTWF4S2V5TGVuAAEMHFRvU3RhcnQAAAAcTGFzdEtleQQAgQUBZEJvdW5kZWRWZWM8dTgsIE1heEtleUxlbj4AAQAgQ29tcGxldGUAAgAAgQUMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEIBFMAAAQAOAEYVmVjPFQ+AACFBQwocGFsbGV0X3hjbRhwYWxsZXQQQ2FsbAQEVAABOBBzZW5kCAEQZGVzdEUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEcbWVzc2FnZYkFAVRCb3g8VmVyc2lvbmVkWGNtPCgpPj4AAAA8dGVsZXBvcnRfYXNzZXRzEAEQZGVzdEUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEsYmVuZWZpY2lhcnlFAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c4kGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABOGZlZV9hc3NldF9pdGVtEAEMdTMyAAFIEQFUZWxlcG9ydCBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byBzb21lIGRlc3RpbmF0aW9uIGNoYWluLgAdASoqVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkOiBVc2UgYGxpbWl0ZWRfdGVsZXBvcnRfYXNzZXRzYCBpbnN0ZWFkLioqAFEBRmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9mYQFpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLiBUaGUgd2VpZ2h0IGxpbWl0IGZvciBmZWVzIGlzIG5vdCBwcm92aWRlZCBhbmQgdGh1cyBpcyB1bmxpbWl0ZWQstHdpdGggYWxsIGZlZXMgdGFrZW4gYXMgbmVlZGVkIGZyb20gdGhlIGFzc2V0LgApAS0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00uJQEtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFtQYXJlbnQsYQEgIFBhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb20gcGFyYWNoYWluIHRvIHBhcmFjaGFpbiwgb3IgYFtQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tVCAgcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGVoICBmZWUgb24gdGhlIGBkZXN0YCBjaGFpbi5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy5ccmVzZXJ2ZV90cmFuc2Zlcl9hc3NldHMQARBkZXN0RQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AASxiZW5lZmljaWFyeUUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEYYXNzZXRziQYBUEJveDxWZXJzaW9uZWRBc3NldHM+AAE4ZmVlX2Fzc2V0X2l0ZW0QAQx1MzIAAnhdAVRyYW5zZmVyIHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiB0aHJvdWdoIHRoZWlyIGxvY2FsLHhkZXN0aW5hdGlvbiBvciByZW1vdGUgcmVzZXJ2ZS4APQFgYXNzZXRzYCBtdXN0IGhhdmUgc2FtZSByZXNlcnZlIGxvY2F0aW9uIGFuZCBtYXkgbm90IGJlIHRlbGVwb3J0YWJsZSB0byBgZGVzdGAuTQEgLSBgYXNzZXRzYCBoYXZlIGxvY2FsIHJlc2VydmU6IHRyYW5zZmVyIGFzc2V0cyB0byBzb3ZlcmVpZ24gYWNjb3VudCBvZiBkZXN0aW5hdGlvbk0BICAgY2hhaW4gYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gWENNIHRvIGBkZXN0YCB0byBtaW50IGFuZCBkZXBvc2l0IHJlc2VydmUtYmFzZWRsICAgYXNzZXRzIHRvIGBiZW5lZmljaWFyeWAuVQEgLSBgYXNzZXRzYCBoYXZlIGRlc3RpbmF0aW9uIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIHRvWQEgICBgZGVzdGAgY2hhaW4gdG8gd2l0aGRyYXcgdGhlIHJlc2VydmUgYXNzZXRzIGZyb20gdGhpcyBjaGFpbidzIHNvdmVyZWlnbiBhY2NvdW50IGFuZIQgICBkZXBvc2l0IHRoZW0gdG8gYGJlbmVmaWNpYXJ5YC5hASAtIGBhc3NldHNgIGhhdmUgcmVtb3RlIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byByZXNlcnZlIGNoYWluIHRvIG1vdmVhASAgIHJlc2VydmVzIGZyb20gdGhpcyBjaGFpbidzIFNBIHRvIGBkZXN0YCBjaGFpbidzIFNBLCBhbmQgZm9yd2FyZCBhbm90aGVyIFhDTSB0byBgZGVzdGD0ICAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLgA9ASoqVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkOiBVc2UgYGxpbWl0ZWRfcmVzZXJ2ZV90cmFuc2Zlcl9hc3NldHNgIGluc3RlYWQuKioAUQFGZWUgcGF5bWVudCBvbiB0aGUgZGVzdGluYXRpb24gc2lkZSBpcyBtYWRlIGZyb20gdGhlIGFzc2V0IGluIHRoZSBgYXNzZXRzYCB2ZWN0b3Igb2ZhAWluZGV4IGBmZWVfYXNzZXRfaXRlbWAuIFRoZSB3ZWlnaHQgbGltaXQgZm9yIGZlZXMgaXMgbm90IHByb3ZpZGVkIGFuZCB0aHVzIGlzIHVubGltaXRlZCy0d2l0aCBhbGwgZmVlcyB0YWtlbiBhcyBuZWVkZWQgZnJvbSB0aGUgYXNzZXQuACkBLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS4lAS0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgW1BhcmVudCxhASAgUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbSBwYXJhY2hhaW4gdG8gcGFyYWNoYWluLCBvciBgW1BhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb21UICByZWxheSB0byBwYXJhY2hhaW4uVQEtIGBiZW5lZmljaWFyeWA6IEEgYmVuZWZpY2lhcnkgbG9jYXRpb24gZm9yIHRoZSBhc3NldHMgaW4gdGhlIGNvbnRleHQgb2YgYGRlc3RgLiBXaWxsmCAgZ2VuZXJhbGx5IGJlIGFuIGBBY2NvdW50SWQzMmAgdmFsdWUuWQEtIGBhc3NldHNgOiBUaGUgYXNzZXRzIHRvIGJlIHdpdGhkcmF3bi4gVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgYXNzZXRzIHVzZWQgdG8gcGF5IHRoZcggIGZlZSBvbiB0aGUgYGRlc3RgIChhbmQgcG9zc2libHkgcmVzZXJ2ZSkgY2hhaW5zLk0BLSBgZmVlX2Fzc2V0X2l0ZW1gOiBUaGUgaW5kZXggaW50byBgYXNzZXRzYCBvZiB0aGUgaXRlbSB3aGljaCBzaG91bGQgYmUgdXNlZCB0byBwYXkcICBmZWVzLhxleGVjdXRlCAEcbWVzc2FnZY0GAbRCb3g8VmVyc2lvbmVkWGNtPDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPj4AAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AAMg0EV4ZWN1dGUgYW4gWENNIG1lc3NhZ2UgZnJvbSBhIGxvY2FsLCBzaWduZWQsIG9yaWdpbi4ATQFBbiBldmVudCBpcyBkZXBvc2l0ZWQgaW5kaWNhdGluZyB3aGV0aGVyIGBtc2dgIGNvdWxkIGJlIGV4ZWN1dGVkIGNvbXBsZXRlbHkgb3Igb25seShwYXJ0aWFsbHkuAF0BTm8gbW9yZSB0aGFuIGBtYXhfd2VpZ2h0YCB3aWxsIGJlIHVzZWQgaW4gaXRzIGF0dGVtcHRlZCBleGVjdXRpb24uIElmIHRoaXMgaXMgbGVzcyB0aGFuQQF0aGUgbWF4aW11bSBhbW91bnQgb2Ygd2VpZ2h0IHRoYXQgdGhlIG1lc3NhZ2UgY291bGQgdGFrZSB0byBiZSBleGVjdXRlZCwgdGhlbiBub3xleGVjdXRpb24gYXR0ZW1wdCB3aWxsIGJlIG1hZGUuRGZvcmNlX3hjbV92ZXJzaW9uCAEgbG9jYXRpb24NAQE0Qm94PExvY2F0aW9uPgABHHZlcnNpb24QAShYY21WZXJzaW9uAAQYSQFFeHRvbGwgdGhhdCBhIHBhcnRpY3VsYXIgZGVzdGluYXRpb24gY2FuIGJlIGNvbW11bmljYXRlZCB3aXRoIHRocm91Z2ggYSBwYXJ0aWN1bGFyPHZlcnNpb24gb2YgWENNLgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLtgtIGBsb2NhdGlvbmA6IFRoZSBkZXN0aW5hdGlvbiB0aGF0IGlzIGJlaW5nIGRlc2NyaWJlZC4RAS0gYHhjbV92ZXJzaW9uYDogVGhlIGxhdGVzdCB2ZXJzaW9uIG9mIFhDTSB0aGF0IGBsb2NhdGlvbmAgc3VwcG9ydHMuZGZvcmNlX2RlZmF1bHRfeGNtX3ZlcnNpb24EAURtYXliZV94Y21fdmVyc2lvbmECAUhPcHRpb248WGNtVmVyc2lvbj4ABRRZAVNldCBhIHNhZmUgWENNIHZlcnNpb24gKHRoZSB2ZXJzaW9uIHRoYXQgWENNIHNob3VsZCBiZSBlbmNvZGVkIHdpdGggaWYgdGhlIG1vc3QgcmVjZW50tHZlcnNpb24gYSBkZXN0aW5hdGlvbiBjYW4gYWNjZXB0IGlzIHVua25vd24pLgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLjkBLSBgbWF5YmVfeGNtX3ZlcnNpb25gOiBUaGUgZGVmYXVsdCBYQ00gZW5jb2RpbmcgdmVyc2lvbiwgb3IgYE5vbmVgIHRvIGRpc2FibGUueGZvcmNlX3N1YnNjcmliZV92ZXJzaW9uX25vdGlmeQQBIGxvY2F0aW9uRQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4ABhA5AUFzayBhIGxvY2F0aW9uIHRvIG5vdGlmeSB1cyByZWdhcmRpbmcgdGhlaXIgWENNIHZlcnNpb24gYW5kIGFueSBjaGFuZ2VzIHRvIGl0LgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLlkBLSBgbG9jYXRpb25gOiBUaGUgbG9jYXRpb24gdG8gd2hpY2ggd2Ugc2hvdWxkIHN1YnNjcmliZSBmb3IgWENNIHZlcnNpb24gbm90aWZpY2F0aW9ucy6AZm9yY2VfdW5zdWJzY3JpYmVfdmVyc2lvbl9ub3RpZnkEASBsb2NhdGlvbkUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAcYSQFSZXF1aXJlIHRoYXQgYSBwYXJ0aWN1bGFyIGRlc3RpbmF0aW9uIHNob3VsZCBubyBsb25nZXIgbm90aWZ5IHVzIHJlZ2FyZGluZyBhbnkgWENNQHZlcnNpb24gY2hhbmdlcy4A3C0gYG9yaWdpbmA6IE11c3QgYmUgYW4gb3JpZ2luIHNwZWNpZmllZCBieSBBZG1pbk9yaWdpbi49AS0gYGxvY2F0aW9uYDogVGhlIGxvY2F0aW9uIHRvIHdoaWNoIHdlIGFyZSBjdXJyZW50bHkgc3Vic2NyaWJlZCBmb3IgWENNIHZlcnNpb26oICBub3RpZmljYXRpb25zIHdoaWNoIHdlIG5vIGxvbmdlciBkZXNpcmUufGxpbWl0ZWRfcmVzZXJ2ZV90cmFuc2Zlcl9hc3NldHMUARBkZXN0RQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AASxiZW5lZmljaWFyeUUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEYYXNzZXRziQYBUEJveDxWZXJzaW9uZWRBc3NldHM+AAE4ZmVlX2Fzc2V0X2l0ZW0QAQx1MzIAATB3ZWlnaHRfbGltaXQ9BgEsV2VpZ2h0TGltaXQACHhdAVRyYW5zZmVyIHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiB0aHJvdWdoIHRoZWlyIGxvY2FsLHhkZXN0aW5hdGlvbiBvciByZW1vdGUgcmVzZXJ2ZS4APQFgYXNzZXRzYCBtdXN0IGhhdmUgc2FtZSByZXNlcnZlIGxvY2F0aW9uIGFuZCBtYXkgbm90IGJlIHRlbGVwb3J0YWJsZSB0byBgZGVzdGAuTQEgLSBgYXNzZXRzYCBoYXZlIGxvY2FsIHJlc2VydmU6IHRyYW5zZmVyIGFzc2V0cyB0byBzb3ZlcmVpZ24gYWNjb3VudCBvZiBkZXN0aW5hdGlvbk0BICAgY2hhaW4gYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gWENNIHRvIGBkZXN0YCB0byBtaW50IGFuZCBkZXBvc2l0IHJlc2VydmUtYmFzZWRsICAgYXNzZXRzIHRvIGBiZW5lZmljaWFyeWAuVQEgLSBgYXNzZXRzYCBoYXZlIGRlc3RpbmF0aW9uIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIHRvWQEgICBgZGVzdGAgY2hhaW4gdG8gd2l0aGRyYXcgdGhlIHJlc2VydmUgYXNzZXRzIGZyb20gdGhpcyBjaGFpbidzIHNvdmVyZWlnbiBhY2NvdW50IGFuZIQgICBkZXBvc2l0IHRoZW0gdG8gYGJlbmVmaWNpYXJ5YC5hASAtIGBhc3NldHNgIGhhdmUgcmVtb3RlIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byByZXNlcnZlIGNoYWluIHRvIG1vdmVhASAgIHJlc2VydmVzIGZyb20gdGhpcyBjaGFpbidzIFNBIHRvIGBkZXN0YCBjaGFpbidzIFNBLCBhbmQgZm9yd2FyZCBhbm90aGVyIFhDTSB0byBgZGVzdGD0ICAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLgBRAUZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZmEBaW5kZXggYGZlZV9hc3NldF9pdGVtYCwgdXAgdG8gZW5vdWdoIHRvIHBheSBmb3IgYHdlaWdodF9saW1pdGAgb2Ygd2VpZ2h0LiBJZiBtb3JlIHdlaWdodFkBaXMgbmVlZGVkIHRoYW4gYHdlaWdodF9saW1pdGAsIHRoZW4gdGhlIG9wZXJhdGlvbiB3aWxsIGZhaWwgYW5kIHRoZSBzZW50IGFzc2V0cyBtYXkgYmUgYXQgcmlzay4AKQEtIGBvcmlnaW5gOiBNdXN0IGJlIGNhcGFibGUgb2Ygd2l0aGRyYXdpbmcgdGhlIGBhc3NldHNgIGFuZCBleGVjdXRpbmcgWENNLiUBLSBgZGVzdGA6IERlc3RpbmF0aW9uIGNvbnRleHQgZm9yIHRoZSBhc3NldHMuIFdpbGwgdHlwaWNhbGx5IGJlIGBbUGFyZW50LGEBICBQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBbUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbVQgIHJlbGF5IHRvIHBhcmFjaGFpbi5VAS0gYGJlbmVmaWNpYXJ5YDogQSBiZW5lZmljaWFyeSBsb2NhdGlvbiBmb3IgdGhlIGFzc2V0cyBpbiB0aGUgY29udGV4dCBvZiBgZGVzdGAuIFdpbGyYICBnZW5lcmFsbHkgYmUgYW4gYEFjY291bnRJZDMyYCB2YWx1ZS5ZAS0gYGFzc2V0c2A6IFRoZSBhc3NldHMgdG8gYmUgd2l0aGRyYXduLiBUaGlzIHNob3VsZCBpbmNsdWRlIHRoZSBhc3NldHMgdXNlZCB0byBwYXkgdGhlyCAgZmVlIG9uIHRoZSBgZGVzdGAgKGFuZCBwb3NzaWJseSByZXNlcnZlKSBjaGFpbnMuTQEtIGBmZWVfYXNzZXRfaXRlbWA6IFRoZSBpbmRleCBpbnRvIGBhc3NldHNgIG9mIHRoZSBpdGVtIHdoaWNoIHNob3VsZCBiZSB1c2VkIHRvIHBheRwgIGZlZXMuRQEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgcmVtb3RlLXNpZGUgd2VpZ2h0IGxpbWl0LCBpZiBhbnksIGZvciB0aGUgWENNIGZlZSBwdXJjaGFzZS5cbGltaXRlZF90ZWxlcG9ydF9hc3NldHMUARBkZXN0RQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AASxiZW5lZmljaWFyeUUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEYYXNzZXRziQYBUEJveDxWZXJzaW9uZWRBc3NldHM+AAE4ZmVlX2Fzc2V0X2l0ZW0QAQx1MzIAATB3ZWlnaHRfbGltaXQ9BgEsV2VpZ2h0TGltaXQACUgRAVRlbGVwb3J0IHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHNvbWUgZGVzdGluYXRpb24gY2hhaW4uAFEBRmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9mYQFpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLCB1cCB0byBlbm91Z2ggdG8gcGF5IGZvciBgd2VpZ2h0X2xpbWl0YCBvZiB3ZWlnaHQuIElmIG1vcmUgd2VpZ2h0WQFpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIHNlbnQgYXNzZXRzIG1heSBiZSBhdCByaXNrLgApAS0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00uJQEtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFtQYXJlbnQsYQEgIFBhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb20gcGFyYWNoYWluIHRvIHBhcmFjaGFpbiwgb3IgYFtQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tVCAgcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGVoICBmZWUgb24gdGhlIGBkZXN0YCBjaGFpbi5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy5FAS0gYHdlaWdodF9saW1pdGA6IFRoZSByZW1vdGUtc2lkZSB3ZWlnaHQgbGltaXQsIGlmIGFueSwgZm9yIHRoZSBYQ00gZmVlIHB1cmNoYXNlLkBmb3JjZV9zdXNwZW5zaW9uBAEkc3VzcGVuZGVkIAEQYm9vbAAKEPRTZXQgb3IgdW5zZXQgdGhlIGdsb2JhbCBzdXNwZW5zaW9uIHN0YXRlIG9mIHRoZSBYQ00gZXhlY3V0b3IuANwtIGBvcmlnaW5gOiBNdXN0IGJlIGFuIG9yaWdpbiBzcGVjaWZpZWQgYnkgQWRtaW5PcmlnaW4u0C0gYHN1c3BlbmRlZGA6IGB0cnVlYCB0byBzdXNwZW5kLCBgZmFsc2VgIHRvIHJlc3VtZS48dHJhbnNmZXJfYXNzZXRzFAEQZGVzdEUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEsYmVuZWZpY2lhcnlFAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c4kGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABOGZlZV9hc3NldF9pdGVtEAEMdTMyAAEwd2VpZ2h0X2xpbWl0PQYBLFdlaWdodExpbWl0AAuEXQFUcmFuc2ZlciBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byB0aGUgZGVzdGluYXRpb24gY2hhaW4gdGhyb3VnaCB0aGVpciBsb2NhbCzQZGVzdGluYXRpb24gb3IgcmVtb3RlIHJlc2VydmUsIG9yIHRocm91Z2ggdGVsZXBvcnRzLgBRAUZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZjUBaW5kZXggYGZlZV9hc3NldF9pdGVtYCAoaGVuY2UgcmVmZXJyZWQgdG8gYXMgYGZlZXNgKSwgdXAgdG8gZW5vdWdoIHRvIHBheSBmb3JBAWB3ZWlnaHRfbGltaXRgIG9mIHdlaWdodC4gSWYgbW9yZSB3ZWlnaHQgaXMgbmVlZGVkIHRoYW4gYHdlaWdodF9saW1pdGAsIHRoZW4gdGhl3G9wZXJhdGlvbiB3aWxsIGZhaWwgYW5kIHRoZSBzZW50IGFzc2V0cyBtYXkgYmUgYXQgcmlzay4AYQFgYXNzZXRzYCAoZXhjbHVkaW5nIGBmZWVzYCkgbXVzdCBoYXZlIHNhbWUgcmVzZXJ2ZSBsb2NhdGlvbiBvciBvdGhlcndpc2UgYmUgdGVsZXBvcnRhYmxlsHRvIGBkZXN0YCwgbm8gbGltaXRhdGlvbnMgaW1wb3NlZCBvbiBgZmVlc2AuTQEgLSBmb3IgbG9jYWwgcmVzZXJ2ZTogdHJhbnNmZXIgYXNzZXRzIHRvIHNvdmVyZWlnbiBhY2NvdW50IG9mIGRlc3RpbmF0aW9uIGNoYWluIGFuZE0BICAgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiBYQ00gdG8gYGRlc3RgIHRvIG1pbnQgYW5kIGRlcG9zaXQgcmVzZXJ2ZS1iYXNlZCBhc3NldHMgdG9EICAgYGJlbmVmaWNpYXJ5YC5hASAtIGZvciBkZXN0aW5hdGlvbiByZXNlcnZlOiBidXJuIGxvY2FsIGFzc2V0cyBhbmQgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiB0byBgZGVzdGAgY2hhaW5ZASAgIHRvIHdpdGhkcmF3IHRoZSByZXNlcnZlIGFzc2V0cyBmcm9tIHRoaXMgY2hhaW4ncyBzb3ZlcmVpZ24gYWNjb3VudCBhbmQgZGVwb3NpdCB0aGVtUCAgIHRvIGBiZW5lZmljaWFyeWAuXQEgLSBmb3IgcmVtb3RlIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byByZXNlcnZlIGNoYWluIHRvIG1vdmUgcmVzZXJ2ZXNdASAgIGZyb20gdGhpcyBjaGFpbidzIFNBIHRvIGBkZXN0YCBjaGFpbidzIFNBLCBhbmQgZm9yd2FyZCBhbm90aGVyIFhDTSB0byBgZGVzdGAgdG8gbWludNQgICBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLlEBIC0gZm9yIHRlbGVwb3J0czogYnVybiBsb2NhbCBhc3NldHMgYW5kIGZvcndhcmQgWENNIHRvIGBkZXN0YCBjaGFpbiB0byBtaW50L3RlbGVwb3J0sCAgIGFzc2V0cyBhbmQgZGVwb3NpdCB0aGVtIHRvIGBiZW5lZmljaWFyeWAuACkBLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS4tAS0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgWDIoUGFyZW50LFUBICBQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZCBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBYMShQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZGggIGZyb20gcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGXIICBmZWUgb24gdGhlIGBkZXN0YCAoYW5kIHBvc3NpYmx5IHJlc2VydmUpIGNoYWlucy5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy5FAS0gYHdlaWdodF9saW1pdGA6IFRoZSByZW1vdGUtc2lkZSB3ZWlnaHQgbGltaXQsIGlmIGFueSwgZm9yIHRoZSBYQ00gZmVlIHB1cmNoYXNlLjBjbGFpbV9hc3NldHMIARhhc3NldHOJBgFQQm94PFZlcnNpb25lZEFzc2V0cz4AASxiZW5lZmljaWFyeUUBAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAwYVQFDbGFpbXMgYXNzZXRzIHRyYXBwZWQgb24gdGhpcyBwYWxsZXQgYmVjYXVzZSBvZiBsZWZ0b3ZlciBhc3NldHMgZHVyaW5nIFhDTSBleGVjdXRpb24uAKwtIGBvcmlnaW5gOiBBbnlvbmUgY2FuIGNhbGwgdGhpcyBleHRyaW5zaWMuXQEtIGBhc3NldHNgOiBUaGUgZXhhY3QgYXNzZXRzIHRoYXQgd2VyZSB0cmFwcGVkLiBVc2UgdGhlIHZlcnNpb24gdG8gc3BlY2lmeSB3aGF0IHZlcnNpb26Yd2FzIHRoZSBsYXRlc3Qgd2hlbiB0aGV5IHdlcmUgdHJhcHBlZC5FAS0gYGJlbmVmaWNpYXJ5YDogVGhlIGxvY2F0aW9uL2FjY291bnQgd2hlcmUgdGhlIGNsYWltZWQgYXNzZXRzIHdpbGwgYmUgZGVwb3NpdGVkLox0cmFuc2Zlcl9hc3NldHNfdXNpbmdfdHlwZV9hbmRfdGhlbhwBEGRlc3RFAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c4kGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABUGFzc2V0c190cmFuc2Zlcl90eXBluQYBREJveDxUcmFuc2ZlclR5cGU+AAE4cmVtb3RlX2ZlZXNfaWS9BgFUQm94PFZlcnNpb25lZEFzc2V0SWQ+AAFIZmVlc190cmFuc2Zlcl90eXBluQYBREJveDxUcmFuc2ZlclR5cGU+AAFIY3VzdG9tX3hjbV9vbl9kZXN0iQUBVEJveDxWZXJzaW9uZWRYY208KCk+PgABMHdlaWdodF9saW1pdD0GASxXZWlnaHRMaW1pdAANwFUBVHJhbnNmZXIgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiB1c2luZyBleHBsaWNpdCB0cmFuc2Zlcmh0eXBlcyBmb3IgYXNzZXRzIGFuZCBmZWVzLgBZAWBhc3NldHNgIG11c3QgaGF2ZSBzYW1lIHJlc2VydmUgbG9jYXRpb24gb3IgbWF5IGJlIHRlbGVwb3J0YWJsZSB0byBgZGVzdGAuIENhbGxlciBtdXN07HByb3ZpZGUgdGhlIGBhc3NldHNfdHJhbnNmZXJfdHlwZWAgdG8gYmUgdXNlZCBmb3IgYGFzc2V0c2A6UQEgLSBgVHJhbnNmZXJUeXBlOjpMb2NhbFJlc2VydmVgOiB0cmFuc2ZlciBhc3NldHMgdG8gc292ZXJlaWduIGFjY291bnQgb2YgZGVzdGluYXRpb25NASAgIGNoYWluIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIFhDTSB0byBgZGVzdGAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkbCAgIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLlkBIC0gYFRyYW5zZmVyVHlwZTo6RGVzdGluYXRpb25SZXNlcnZlYDogYnVybiBsb2NhbCBhc3NldHMgYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gdG9ZASAgIGBkZXN0YCBjaGFpbiB0byB3aXRoZHJhdyB0aGUgcmVzZXJ2ZSBhc3NldHMgZnJvbSB0aGlzIGNoYWluJ3Mgc292ZXJlaWduIGFjY291bnQgYW5khCAgIGRlcG9zaXQgdGhlbSB0byBgYmVuZWZpY2lhcnlgLlkBIC0gYFRyYW5zZmVyVHlwZTo6UmVtb3RlUmVzZXJ2ZShyZXNlcnZlKWA6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byBgcmVzZXJ2ZWBhASAgIGNoYWluIHRvIG1vdmUgcmVzZXJ2ZXMgZnJvbSB0aGlzIGNoYWluJ3MgU0EgdG8gYGRlc3RgIGNoYWluJ3MgU0EsIGFuZCBmb3J3YXJkIGFub3RoZXJVASAgIFhDTSB0byBgZGVzdGAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLiBUeXBpY2FsbHmUICAgdGhlIHJlbW90ZSBgcmVzZXJ2ZWAgaXMgQXNzZXQgSHViLkUBIC0gYFRyYW5zZmVyVHlwZTo6VGVsZXBvcnRgOiBidXJuIGxvY2FsIGFzc2V0cyBhbmQgZm9yd2FyZCBYQ00gdG8gYGRlc3RgIGNoYWluIHRv6CAgIG1pbnQvdGVsZXBvcnQgYXNzZXRzIGFuZCBkZXBvc2l0IHRoZW0gdG8gYGJlbmVmaWNpYXJ5YC4AVQFPbiB0aGUgZGVzdGluYXRpb24gY2hhaW4sIGFzIHdlbGwgYXMgYW55IGludGVybWVkaWFyeSBob3BzLCBgQnV5RXhlY3V0aW9uYCBpcyB1c2VkIHRvIQFidXkgZXhlY3V0aW9uIHVzaW5nIHRyYW5zZmVycmVkIGBhc3NldHNgIGlkZW50aWZpZWQgYnkgYHJlbW90ZV9mZWVzX2lkYC5ZAU1ha2Ugc3VyZSBlbm91Z2ggb2YgdGhlIHNwZWNpZmllZCBgcmVtb3RlX2ZlZXNfaWRgIGFzc2V0IGlzIGluY2x1ZGVkIGluIHRoZSBnaXZlbiBsaXN0YQFvZiBgYXNzZXRzYC4gYHJlbW90ZV9mZWVzX2lkYCBzaG91bGQgYmUgZW5vdWdoIHRvIHBheSBmb3IgYHdlaWdodF9saW1pdGAuIElmIG1vcmUgd2VpZ2h0WQFpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIHNlbnQgYXNzZXRzIG1heSBiZSBhdCByaXNrLgBFAWByZW1vdGVfZmVlc19pZGAgbWF5IHVzZSBkaWZmZXJlbnQgdHJhbnNmZXIgdHlwZSB0aGFuIHJlc3Qgb2YgYGFzc2V0c2AgYW5kIGNhbiBiZZxzcGVjaWZpZWQgdGhyb3VnaCBgZmVlc190cmFuc2Zlcl90eXBlYC4AYQFUaGUgY2FsbGVyIG5lZWRzIHRvIHNwZWNpZnkgd2hhdCBzaG91bGQgaGFwcGVuIHRvIHRoZSB0cmFuc2ZlcnJlZCBhc3NldHMgb25jZSB0aGV5IHJlYWNoQQF0aGUgYGRlc3RgIGNoYWluLiBUaGlzIGlzIGRvbmUgdGhyb3VnaCB0aGUgYGN1c3RvbV94Y21fb25fZGVzdGAgcGFyYW1ldGVyLCB3aGljaPxjb250YWlucyB0aGUgaW5zdHJ1Y3Rpb25zIHRvIGV4ZWN1dGUgb24gYGRlc3RgIGFzIGEgZmluYWwgc3RlcC58ICBUaGlzIGlzIHVzdWFsbHkgYXMgc2ltcGxlIGFzOlEBICBgWGNtKHZlYyFbRGVwb3NpdEFzc2V0IHsgYXNzZXRzOiBXaWxkKEFsbENvdW50ZWQoYXNzZXRzLmxlbigpKSksIGJlbmVmaWNpYXJ5IH1dKWAsMQEgIGJ1dCBjb3VsZCBiZSBzb21ldGhpbmcgbW9yZSBleG90aWMgbGlrZSBzZW5kaW5nIHRoZSBgYXNzZXRzYCBldmVuIGZ1cnRoZXIuACkBLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS4lAS0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgW1BhcmVudCxhASAgUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbSBwYXJhY2hhaW4gdG8gcGFyYWNoYWluLCBvciBgW1BhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb209ASAgcmVsYXkgdG8gcGFyYWNoYWluLCBvciBgKHBhcmVudHM6IDIsIChHbG9iYWxDb25zZW5zdXMoLi4pLCAuLikpYCB0byBzZW5kIGZyb230ICBwYXJhY2hhaW4gYWNyb3NzIGEgYnJpZGdlIHRvIGFub3RoZXIgZWNvc3lzdGVtIGRlc3RpbmF0aW9uLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGXIICBmZWUgb24gdGhlIGBkZXN0YCAoYW5kIHBvc3NpYmx5IHJlc2VydmUpIGNoYWlucy49AS0gYGFzc2V0c190cmFuc2Zlcl90eXBlYDogVGhlIFhDTSBgVHJhbnNmZXJUeXBlYCB1c2VkIHRvIHRyYW5zZmVyIHRoZSBgYXNzZXRzYC4hAS0gYHJlbW90ZV9mZWVzX2lkYDogT25lIG9mIHRoZSBpbmNsdWRlZCBgYXNzZXRzYCB0byBiZSB1c2VkIHRvIHBheSBmZWVzLkkBLSBgZmVlc190cmFuc2Zlcl90eXBlYDogVGhlIFhDTSBgVHJhbnNmZXJUeXBlYCB1c2VkIHRvIHRyYW5zZmVyIHRoZSBgZmVlc2AgYXNzZXRzLlkBLSBgY3VzdG9tX3hjbV9vbl9kZXN0YDogVGhlIFhDTSB0byBiZSBleGVjdXRlZCBvbiBgZGVzdGAgY2hhaW4gYXMgdGhlIGxhc3Qgc3RlcCBvZiB0aGVZASAgdHJhbnNmZXIsIHdoaWNoIGFsc28gZGV0ZXJtaW5lcyB3aGF0IGhhcHBlbnMgdG8gdGhlIGFzc2V0cyBvbiB0aGUgZGVzdGluYXRpb24gY2hhaW4uRQEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgcmVtb3RlLXNpZGUgd2VpZ2h0IGxpbWl0LCBpZiBhbnksIGZvciB0aGUgWENNIGZlZSBwdXJjaGFzZS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuiQUIDHhjbTBWZXJzaW9uZWRYY20ELFJ1bnRpbWVDYWxsAAEMCFYyBACNBQFQdjI6OlhjbTxSdW50aW1lQ2FsbD4AAgAIVjMEAN0FAVB2Mzo6WGNtPFJ1bnRpbWVDYWxsPgADAAhWNAQAQQYBUHY0OjpYY208UnVudGltZUNhbGw+AAQAAI0FDAx4Y20IdjIMWGNtBCxSdW50aW1lQ2FsbAAABACRBQF0VmVjPEluc3RydWN0aW9uPFJ1bnRpbWVDYWxsPj4AAJEFAAAClQUAlQUMDHhjbQh2MixJbnN0cnVjdGlvbgQsUnVudGltZUNhbGwAAXA0V2l0aGRyYXdBc3NldAQAmQUBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQAmQUBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAJkFASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlDAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2W1BQEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0LAEMdTY0AAMANFRyYW5zZmVyQXNzZXQIARhhc3NldHOZBQEsTXVsdGlBc3NldHMAASxiZW5lZmljaWFyeUkBATRNdWx0aUxvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzmQUBLE11bHRpQXNzZXRzAAEQZGVzdEkBATRNdWx0aUxvY2F0aW9uAAEMeGNtjQUBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fdHlwZcUFAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCwBDHU2NAABEGNhbGzJBQFoRG91YmxlRW5jb2RlZDxSdW50aW1lQ2FsbD4ABgBkSHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdAwBGHNlbmRlcuwBDHUzMgABQG1heF9tZXNzYWdlX3NpemXsAQx1MzIAATBtYXhfY2FwYWNpdHnsAQx1MzIABwBMSHJtcENoYW5uZWxBY2NlcHRlZAQBJHJlY2lwaWVudOwBDHUzMgAIAEhIcm1wQ2hhbm5lbENsb3NpbmcMASRpbml0aWF0b3LsAQx1MzIAARhzZW5kZXLsAQx1MzIAASRyZWNpcGllbnTsAQx1MzIACQAsQ2xlYXJPcmlnaW4ACgA0RGVzY2VuZE9yaWdpbgQATQEBVEludGVyaW9yTXVsdGlMb2NhdGlvbgALACxSZXBvcnRFcnJvcgwBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQADAAwRGVwb3NpdEFzc2V0DAEYYXNzZXRzzQUBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz7AEMdTMyAAEsYmVuZWZpY2lhcnlJAQE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0EAEYYXNzZXRzzQUBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz7AEMdTMyAAEQZGVzdEkBATRNdWx0aUxvY2F0aW9uAAEMeGNtjQUBHFhjbTwoKT4ADgA0RXhjaGFuZ2VBc3NldAgBEGdpdmXNBQFATXVsdGlBc3NldEZpbHRlcgABHHJlY2VpdmWZBQEsTXVsdGlBc3NldHMADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHPNBQFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmVJAQE0TXVsdGlMb2NhdGlvbgABDHhjbY0FARxYY208KCk+ABAAQEluaXRpYXRlVGVsZXBvcnQMARhhc3NldHPNBQFATXVsdGlBc3NldEZpbHRlcgABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABDHhjbY0FARxYY208KCk+ABEAMFF1ZXJ5SG9sZGluZxABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABGGFzc2V0c80FAUBNdWx0aUFzc2V0RmlsdGVyAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCwBDHU2NAASADBCdXlFeGVjdXRpb24IARBmZWVzoQUBKE11bHRpQXNzZXQAATB3ZWlnaHRfbGltaXTZBQEsV2VpZ2h0TGltaXQAEwA0UmVmdW5kU3VycGx1cwAUADxTZXRFcnJvckhhbmRsZXIEAI0FAUBYY208UnVudGltZUNhbGw+ABUALFNldEFwcGVuZGl4BACNBQFAWGNtPFJ1bnRpbWVDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHOZBQEsTXVsdGlBc3NldHMAARh0aWNrZXRJAQE0TXVsdGlMb2NhdGlvbgAYABBUcmFwBAAsAQx1NjQAGQBAU3Vic2NyaWJlVmVyc2lvbggBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQAGgBIVW5zdWJzY3JpYmVWZXJzaW9uABsAAJkFEAx4Y20IdjIobXVsdGlhc3NldCxNdWx0aUFzc2V0cwAABACdBQE8VmVjPE11bHRpQXNzZXQ+AACdBQAAAqEFAKEFEAx4Y20IdjIobXVsdGlhc3NldChNdWx0aUFzc2V0AAAIAQhpZKUFARxBc3NldElkAAEMZnVuqQUBLEZ1bmdpYmlsaXR5AAClBRAMeGNtCHYyKG11bHRpYXNzZXQcQXNzZXRJZAABCCBDb25jcmV0ZQQASQEBNE11bHRpTG9jYXRpb24AAAAgQWJzdHJhY3QEADgBHFZlYzx1OD4AAQAAqQUQDHhjbQh2MihtdWx0aWFzc2V0LEZ1bmdpYmlsaXR5AAEIIEZ1bmdpYmxlBAD8ARB1MTI4AAAALE5vbkZ1bmdpYmxlBACtBQE0QXNzZXRJbnN0YW5jZQABAACtBRAMeGNtCHYyKG11bHRpYXNzZXQ0QXNzZXRJbnN0YW5jZQABHCRVbmRlZmluZWQAAAAUSW5kZXgEAPwBEHUxMjgAAQAYQXJyYXk0BABIARxbdTg7IDRdAAIAGEFycmF5OAQAsQUBHFt1ODsgOF0AAwAcQXJyYXkxNgQAwAEgW3U4OyAxNl0ABAAcQXJyYXkzMgQABAEgW3U4OyAzMl0ABQAQQmxvYgQAOAEcVmVjPHU4PgAGAACxBQAAAwgAAAAIALUFDAx4Y20IdjIgUmVzcG9uc2UAARAQTnVsbAAAABhBc3NldHMEAJkFASxNdWx0aUFzc2V0cwABADxFeGVjdXRpb25SZXN1bHQEALkFAVBPcHRpb248KHUzMiwgRXJyb3IpPgACABxWZXJzaW9uBAAQAThzdXBlcjo6VmVyc2lvbgADAAC5BQQYT3B0aW9uBARUAb0FAQgQTm9uZQAAABBTb21lBAC9BQAAAQAAvQUAAAQIEMEFAMEFEAx4Y20IdjIYdHJhaXRzFEVycm9yAAFoIE92ZXJmbG93AAAANFVuaW1wbGVtZW50ZWQAAQBgVW50cnVzdGVkUmVzZXJ2ZUxvY2F0aW9uAAIAZFVudHJ1c3RlZFRlbGVwb3J0TG9jYXRpb24AAwBETXVsdGlMb2NhdGlvbkZ1bGwABABoTXVsdGlMb2NhdGlvbk5vdEludmVydGlibGUABQAkQmFkT3JpZ2luAAYAPEludmFsaWRMb2NhdGlvbgAHADRBc3NldE5vdEZvdW5kAAgAVEZhaWxlZFRvVHJhbnNhY3RBc3NldAAJADxOb3RXaXRoZHJhd2FibGUACgBITG9jYXRpb25DYW5ub3RIb2xkAAsAVEV4Y2VlZHNNYXhNZXNzYWdlU2l6ZQAMAFhEZXN0aW5hdGlvblVuc3VwcG9ydGVkAA0AJFRyYW5zcG9ydAAOAChVbnJvdXRhYmxlAA8AMFVua25vd25DbGFpbQAQADhGYWlsZWRUb0RlY29kZQARAEBNYXhXZWlnaHRJbnZhbGlkABIAOE5vdEhvbGRpbmdGZWVzABMAMFRvb0V4cGVuc2l2ZQAUABBUcmFwBAAwAQx1NjQAFQBMVW5oYW5kbGVkWGNtVmVyc2lvbgAWAEhXZWlnaHRMaW1pdFJlYWNoZWQEADABGFdlaWdodAAXABxCYXJyaWVyABgATFdlaWdodE5vdENvbXB1dGFibGUAGQAAxQUMDHhjbQh2MihPcmlnaW5LaW5kAAEQGE5hdGl2ZQAAAEBTb3ZlcmVpZ25BY2NvdW50AAEAJFN1cGVydXNlcgACAAxYY20AAwAAyQUMDHhjbThkb3VibGVfZW5jb2RlZDREb3VibGVFbmNvZGVkBARUAAAEARxlbmNvZGVkOAEcVmVjPHU4PgAAzQUQDHhjbQh2MihtdWx0aWFzc2V0QE11bHRpQXNzZXRGaWx0ZXIAAQggRGVmaW5pdGUEAJkFASxNdWx0aUFzc2V0cwAAABBXaWxkBADRBQE4V2lsZE11bHRpQXNzZXQAAQAA0QUQDHhjbQh2MihtdWx0aWFzc2V0OFdpbGRNdWx0aUFzc2V0AAEIDEFsbAAAABRBbGxPZggBCGlkpQUBHEFzc2V0SWQAAQxmdW7VBQE8V2lsZEZ1bmdpYmlsaXR5AAEAANUFEAx4Y20IdjIobXVsdGlhc3NldDxXaWxkRnVuZ2liaWxpdHkAAQggRnVuZ2libGUAAAAsTm9uRnVuZ2libGUAAQAA2QUMDHhjbQh2MixXZWlnaHRMaW1pdAABCCRVbmxpbWl0ZWQAAAAcTGltaXRlZAQALAEMdTY0AAEAAN0FDAx4Y20IdjMMWGNtBBBDYWxsAAAEAOEFAVhWZWM8SW5zdHJ1Y3Rpb248Q2FsbD4+AADhBQAAAuUFAOUFDAx4Y20IdjMsSW5zdHJ1Y3Rpb24EEENhbGwAAcA0V2l0aGRyYXdBc3NldAQA6QUBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQA6QUBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAOkFASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlEAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2X9BQEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AAEccXVlcmllciUGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AAwA0VHJhbnNmZXJBc3NldAgBGGFzc2V0c+kFASxNdWx0aUFzc2V0cwABLGJlbmVmaWNpYXJ54AE0TXVsdGlMb2NhdGlvbgAEAFBUcmFuc2ZlclJlc2VydmVBc3NldAwBGGFzc2V0c+kFASxNdWx0aUFzc2V0cwABEGRlc3TgATRNdWx0aUxvY2F0aW9uAAEMeGNt3QUBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fa2luZCkGAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCgBGFdlaWdodAABEGNhbGzJBQFMRG91YmxlRW5jb2RlZDxDYWxsPgAGAGRIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0DAEYc2VuZGVy7AEMdTMyAAFAbWF4X21lc3NhZ2Vfc2l6ZewBDHUzMgABMG1heF9jYXBhY2l0eewBDHUzMgAHAExIcm1wQ2hhbm5lbEFjY2VwdGVkBAEkcmVjaXBpZW507AEMdTMyAAgASEhybXBDaGFubmVsQ2xvc2luZwwBJGluaXRpYXRvcuwBDHUzMgABGHNlbmRlcuwBDHUzMgABJHJlY2lwaWVudOwBDHUzMgAJACxDbGVhck9yaWdpbgAKADREZXNjZW5kT3JpZ2luBADkAVRJbnRlcmlvck11bHRpTG9jYXRpb24ACwAsUmVwb3J0RXJyb3IEAC0GAURRdWVyeVJlc3BvbnNlSW5mbwAMADBEZXBvc2l0QXNzZXQIARhhc3NldHMxBgFATXVsdGlBc3NldEZpbHRlcgABLGJlbmVmaWNpYXJ54AE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0DAEYYXNzZXRzMQYBQE11bHRpQXNzZXRGaWx0ZXIAARBkZXN04AE0TXVsdGlMb2NhdGlvbgABDHhjbd0FARxYY208KCk+AA4ANEV4Y2hhbmdlQXNzZXQMARBnaXZlMQYBQE11bHRpQXNzZXRGaWx0ZXIAARB3YW506QUBLE11bHRpQXNzZXRzAAEcbWF4aW1hbCABEGJvb2wADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHMxBgFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmXgATRNdWx0aUxvY2F0aW9uAAEMeGNt3QUBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0czEGAUBNdWx0aUFzc2V0RmlsdGVyAAEQZGVzdOABNE11bHRpTG9jYXRpb24AAQx4Y23dBQEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mby0GAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0czEGAUBNdWx0aUFzc2V0RmlsdGVyABIAMEJ1eUV4ZWN1dGlvbggBEGZlZXPxBQEoTXVsdGlBc3NldAABMHdlaWdodF9saW1pdD0GASxXZWlnaHRMaW1pdAATADRSZWZ1bmRTdXJwbHVzABQAPFNldEVycm9ySGFuZGxlcgQA3QUBJFhjbTxDYWxsPgAVACxTZXRBcHBlbmRpeAQA3QUBJFhjbTxDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHPpBQEsTXVsdGlBc3NldHMAARh0aWNrZXTgATRNdWx0aUxvY2F0aW9uABgAEFRyYXAEACwBDHU2NAAZAEBTdWJzY3JpYmVWZXJzaW9uCAEgcXVlcnlfaWQsARxRdWVyeUlkAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCgBGFdlaWdodAAaAEhVbnN1YnNjcmliZVZlcnNpb24AGwAkQnVybkFzc2V0BADpBQEsTXVsdGlBc3NldHMAHAAsRXhwZWN0QXNzZXQEAOkFASxNdWx0aUFzc2V0cwAdADBFeHBlY3RPcmlnaW4EACUGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AHgAsRXhwZWN0RXJyb3IEAAEGAVBPcHRpb248KHUzMiwgRXJyb3IpPgAfAFBFeHBlY3RUcmFuc2FjdFN0YXR1cwQAHQYBOE1heWJlRXJyb3JDb2RlACAALFF1ZXJ5UGFsbGV0CAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAE0cmVzcG9uc2VfaW5mby0GAURRdWVyeVJlc3BvbnNlSW5mbwAhADBFeHBlY3RQYWxsZXQUARRpbmRleOwBDHUzMgABEG5hbWU4ARxWZWM8dTg+AAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAEsY3JhdGVfbWFqb3LsAQx1MzIAATxtaW5fY3JhdGVfbWlub3LsAQx1MzIAIgBQUmVwb3J0VHJhbnNhY3RTdGF0dXMEAC0GAURRdWVyeVJlc3BvbnNlSW5mbwAjAExDbGVhclRyYW5zYWN0U3RhdHVzACQAPFVuaXZlcnNhbE9yaWdpbgQA6AEgSnVuY3Rpb24AJQA0RXhwb3J0TWVzc2FnZQwBHG5ldHdvcmv0ASROZXR3b3JrSWQAASxkZXN0aW5hdGlvbuQBVEludGVyaW9yTXVsdGlMb2NhdGlvbgABDHhjbd0FARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V08QUBKE11bHRpQXNzZXQAASB1bmxvY2tlcuABNE11bHRpTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldPEFAShNdWx0aUFzc2V0AAEYdGFyZ2V04AE0TXVsdGlMb2NhdGlvbgAoADhOb3RlVW5sb2NrYWJsZQgBFGFzc2V08QUBKE11bHRpQXNzZXQAARRvd25lcuABNE11bHRpTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V08QUBKE11bHRpQXNzZXQAARhsb2NrZXLgATRNdWx0aUxvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQA4AE0TXVsdGlMb2NhdGlvbgAuADxVbnBhaWRFeGVjdXRpb24IATB3ZWlnaHRfbGltaXQ9BgEsV2VpZ2h0TGltaXQAATBjaGVja19vcmlnaW4lBgFUT3B0aW9uPE11bHRpTG9jYXRpb24+AC8AAOkFEAx4Y20IdjMobXVsdGlhc3NldCxNdWx0aUFzc2V0cwAABADtBQE8VmVjPE11bHRpQXNzZXQ+AADtBQAAAvEFAPEFEAx4Y20IdjMobXVsdGlhc3NldChNdWx0aUFzc2V0AAAIAQhpZAkBARxBc3NldElkAAEMZnVu9QUBLEZ1bmdpYmlsaXR5AAD1BRAMeGNtCHYzKG11bHRpYXNzZXQsRnVuZ2liaWxpdHkAAQggRnVuZ2libGUEAPwBEHUxMjgAAAAsTm9uRnVuZ2libGUEAPkFATRBc3NldEluc3RhbmNlAAEAAPkFEAx4Y20IdjMobXVsdGlhc3NldDRBc3NldEluc3RhbmNlAAEYJFVuZGVmaW5lZAAAABRJbmRleAQA/AEQdTEyOAABABhBcnJheTQEAEgBHFt1ODsgNF0AAgAYQXJyYXk4BACxBQEcW3U4OyA4XQADABxBcnJheTE2BADAASBbdTg7IDE2XQAEABxBcnJheTMyBAAEASBbdTg7IDMyXQAFAAD9BQwMeGNtCHYzIFJlc3BvbnNlAAEYEE51bGwAAAAYQXNzZXRzBADpBQEsTXVsdGlBc3NldHMAAQA8RXhlY3V0aW9uUmVzdWx0BAABBgFQT3B0aW9uPCh1MzIsIEVycm9yKT4AAgAcVmVyc2lvbgQAEAE4c3VwZXI6OlZlcnNpb24AAwAsUGFsbGV0c0luZm8EAA0GAZhCb3VuZGVkVmVjPFBhbGxldEluZm8sIE1heFBhbGxldHNJbmZvPgAEADhEaXNwYXRjaFJlc3VsdAQAHQYBOE1heWJlRXJyb3JDb2RlAAUAAAEGBBhPcHRpb24EBFQBBQYBCBBOb25lAAAAEFNvbWUEAAUGAAABAAAFBgAABAgQCQYACQYQDHhjbQh2Mxh0cmFpdHMURXJyb3IAAaAgT3ZlcmZsb3cAAAA0VW5pbXBsZW1lbnRlZAABAGBVbnRydXN0ZWRSZXNlcnZlTG9jYXRpb24AAgBkVW50cnVzdGVkVGVsZXBvcnRMb2NhdGlvbgADADBMb2NhdGlvbkZ1bGwABABUTG9jYXRpb25Ob3RJbnZlcnRpYmxlAAUAJEJhZE9yaWdpbgAGADxJbnZhbGlkTG9jYXRpb24ABwA0QXNzZXROb3RGb3VuZAAIAFRGYWlsZWRUb1RyYW5zYWN0QXNzZXQACQA8Tm90V2l0aGRyYXdhYmxlAAoASExvY2F0aW9uQ2Fubm90SG9sZAALAFRFeGNlZWRzTWF4TWVzc2FnZVNpemUADABYRGVzdGluYXRpb25VbnN1cHBvcnRlZAANACRUcmFuc3BvcnQADgAoVW5yb3V0YWJsZQAPADBVbmtub3duQ2xhaW0AEAA4RmFpbGVkVG9EZWNvZGUAEQBATWF4V2VpZ2h0SW52YWxpZAASADhOb3RIb2xkaW5nRmVlcwATADBUb29FeHBlbnNpdmUAFAAQVHJhcAQAMAEMdTY0ABUAQEV4cGVjdGF0aW9uRmFsc2UAFgA4UGFsbGV0Tm90Rm91bmQAFwAwTmFtZU1pc21hdGNoABgATFZlcnNpb25JbmNvbXBhdGlibGUAGQBQSG9sZGluZ1dvdWxkT3ZlcmZsb3cAGgAsRXhwb3J0RXJyb3IAGwA4UmVhbmNob3JGYWlsZWQAHAAYTm9EZWFsAB0AKEZlZXNOb3RNZXQAHgAkTG9ja0Vycm9yAB8AME5vUGVybWlzc2lvbgAgAChVbmFuY2hvcmVkACEAOE5vdERlcG9zaXRhYmxlACIATFVuaGFuZGxlZFhjbVZlcnNpb24AIwBIV2VpZ2h0TGltaXRSZWFjaGVkBAAoARhXZWlnaHQAJAAcQmFycmllcgAlAExXZWlnaHROb3RDb21wdXRhYmxlACYAREV4Y2VlZHNTdGFja0xpbWl0ACcAAA0GDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBEQYEUwAABAAZBgEYVmVjPFQ+AAARBgwMeGNtCHYzKFBhbGxldEluZm8AABgBFGluZGV47AEMdTMyAAEQbmFtZRUGAYBCb3VuZGVkVmVjPHU4LCBNYXhQYWxsZXROYW1lTGVuPgABLG1vZHVsZV9uYW1lFQYBgEJvdW5kZWRWZWM8dTgsIE1heFBhbGxldE5hbWVMZW4+AAEUbWFqb3LsAQx1MzIAARRtaW5vcuwBDHUzMgABFHBhdGNo7AEMdTMyAAAVBgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AABkGAAACEQYAHQYMDHhjbQh2MzhNYXliZUVycm9yQ29kZQABDBxTdWNjZXNzAAAAFEVycm9yBAAhBgGMQm91bmRlZFZlYzx1OCwgTWF4RGlzcGF0Y2hFcnJvckxlbj4AAQA4VHJ1bmNhdGVkRXJyb3IEACEGAYxCb3VuZGVkVmVjPHU4LCBNYXhEaXNwYXRjaEVycm9yTGVuPgACAAAhBgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AACUGBBhPcHRpb24EBFQB4AEIEE5vbmUAAAAQU29tZQQA4AAAAQAAKQYMDHhjbQh2MyhPcmlnaW5LaW5kAAEQGE5hdGl2ZQAAAEBTb3ZlcmVpZ25BY2NvdW50AAEAJFN1cGVydXNlcgACAAxYY20AAwAALQYMDHhjbQh2M0RRdWVyeVJlc3BvbnNlSW5mbwAADAEsZGVzdGluYXRpb27gATRNdWx0aUxvY2F0aW9uAAEgcXVlcnlfaWQsARxRdWVyeUlkAAEobWF4X3dlaWdodCgBGFdlaWdodAAAMQYQDHhjbQh2MyhtdWx0aWFzc2V0QE11bHRpQXNzZXRGaWx0ZXIAAQggRGVmaW5pdGUEAOkFASxNdWx0aUFzc2V0cwAAABBXaWxkBAA1BgE4V2lsZE11bHRpQXNzZXQAAQAANQYQDHhjbQh2MyhtdWx0aWFzc2V0OFdpbGRNdWx0aUFzc2V0AAEQDEFsbAAAABRBbGxPZggBCGlkCQEBHEFzc2V0SWQAAQxmdW45BgE8V2lsZEZ1bmdpYmlsaXR5AAEAKEFsbENvdW50ZWQEAOwBDHUzMgACADBBbGxPZkNvdW50ZWQMAQhpZAkBARxBc3NldElkAAEMZnVuOQYBPFdpbGRGdW5naWJpbGl0eQABFGNvdW507AEMdTMyAAMAADkGEAx4Y20IdjMobXVsdGlhc3NldDxXaWxkRnVuZ2liaWxpdHkAAQggRnVuZ2libGUAAAAsTm9uRnVuZ2libGUAAQAAPQYMDHhjbQh2MyxXZWlnaHRMaW1pdAABCCRVbmxpbWl0ZWQAAAAcTGltaXRlZAQAKAEYV2VpZ2h0AAEAAEEGDCxzdGFnaW5nX3hjbQh2NAxYY20EEENhbGwAAAQARQYBWFZlYzxJbnN0cnVjdGlvbjxDYWxsPj4AAEUGAAACSQYASQYMLHN0YWdpbmdfeGNtCHY0LEluc3RydWN0aW9uBBBDYWxsAAHANFdpdGhkcmF3QXNzZXQEAE0GARhBc3NldHMAAABUUmVzZXJ2ZUFzc2V0RGVwb3NpdGVkBABNBgEYQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAE0GARhBc3NldHMAAgA0UXVlcnlSZXNwb25zZRABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABIHJlc3BvbnNlYQYBIFJlc3BvbnNlAAEobWF4X3dlaWdodCgBGFdlaWdodAABHHF1ZXJpZXJ1BgFAT3B0aW9uPExvY2F0aW9uPgADADRUcmFuc2ZlckFzc2V0CAEYYXNzZXRzTQYBGEFzc2V0cwABLGJlbmVmaWNpYXJ5DQEBIExvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzTQYBGEFzc2V0cwABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgAFACBUcmFuc2FjdAwBLG9yaWdpbl9raW5kKQYBKE9yaWdpbktpbmQAAVhyZXF1aXJlX3dlaWdodF9hdF9tb3N0KAEYV2VpZ2h0AAEQY2FsbMkFAUxEb3VibGVFbmNvZGVkPENhbGw+AAYAZEhybXBOZXdDaGFubmVsT3BlblJlcXVlc3QMARhzZW5kZXLsAQx1MzIAAUBtYXhfbWVzc2FnZV9zaXpl7AEMdTMyAAEwbWF4X2NhcGFjaXR57AEMdTMyAAcATEhybXBDaGFubmVsQWNjZXB0ZWQEASRyZWNpcGllbnTsAQx1MzIACABISHJtcENoYW5uZWxDbG9zaW5nDAEkaW5pdGlhdG9y7AEMdTMyAAEYc2VuZGVy7AEMdTMyAAEkcmVjaXBpZW507AEMdTMyAAkALENsZWFyT3JpZ2luAAoANERlc2NlbmRPcmlnaW4EABEBAUBJbnRlcmlvckxvY2F0aW9uAAsALFJlcG9ydEVycm9yBAB5BgFEUXVlcnlSZXNwb25zZUluZm8ADAAwRGVwb3NpdEFzc2V0CAEYYXNzZXRzfQYBLEFzc2V0RmlsdGVyAAEsYmVuZWZpY2lhcnkNAQEgTG9jYXRpb24ADQBMRGVwb3NpdFJlc2VydmVBc3NldAwBGGFzc2V0c30GASxBc3NldEZpbHRlcgABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgAOADRFeGNoYW5nZUFzc2V0DAEQZ2l2ZX0GASxBc3NldEZpbHRlcgABEHdhbnRNBgEYQXNzZXRzAAEcbWF4aW1hbCABEGJvb2wADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHN9BgEsQXNzZXRGaWx0ZXIAARxyZXNlcnZlDQEBIExvY2F0aW9uAAEMeGNtQQYBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0c30GASxBc3NldEZpbHRlcgABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mb3kGAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0c30GASxBc3NldEZpbHRlcgASADBCdXlFeGVjdXRpb24IARBmZWVzVQYBFEFzc2V0AAEwd2VpZ2h0X2xpbWl0PQYBLFdlaWdodExpbWl0ABMANFJlZnVuZFN1cnBsdXMAFAA8U2V0RXJyb3JIYW5kbGVyBABBBgEkWGNtPENhbGw+ABUALFNldEFwcGVuZGl4BABBBgEkWGNtPENhbGw+ABYAKENsZWFyRXJyb3IAFwAoQ2xhaW1Bc3NldAgBGGFzc2V0c00GARhBc3NldHMAARh0aWNrZXQNAQEgTG9jYXRpb24AGAAQVHJhcAQALAEMdTY0ABkAQFN1YnNjcmliZVZlcnNpb24IASBxdWVyeV9pZCwBHFF1ZXJ5SWQAAUxtYXhfcmVzcG9uc2Vfd2VpZ2h0KAEYV2VpZ2h0ABoASFVuc3Vic2NyaWJlVmVyc2lvbgAbACRCdXJuQXNzZXQEAE0GARhBc3NldHMAHAAsRXhwZWN0QXNzZXQEAE0GARhBc3NldHMAHQAwRXhwZWN0T3JpZ2luBAB1BgFAT3B0aW9uPExvY2F0aW9uPgAeACxFeHBlY3RFcnJvcgQAAQYBUE9wdGlvbjwodTMyLCBFcnJvcik+AB8AUEV4cGVjdFRyYW5zYWN0U3RhdHVzBAAdBgE4TWF5YmVFcnJvckNvZGUAIAAsUXVlcnlQYWxsZXQIASxtb2R1bGVfbmFtZTgBHFZlYzx1OD4AATRyZXNwb25zZV9pbmZveQYBRFF1ZXJ5UmVzcG9uc2VJbmZvACEAMEV4cGVjdFBhbGxldBQBFGluZGV47AEMdTMyAAEQbmFtZTgBHFZlYzx1OD4AASxtb2R1bGVfbmFtZTgBHFZlYzx1OD4AASxjcmF0ZV9tYWpvcuwBDHUzMgABPG1pbl9jcmF0ZV9taW5vcuwBDHUzMgAiAFBSZXBvcnRUcmFuc2FjdFN0YXR1cwQAeQYBRFF1ZXJ5UmVzcG9uc2VJbmZvACMATENsZWFyVHJhbnNhY3RTdGF0dXMAJAA8VW5pdmVyc2FsT3JpZ2luBAAZAQEgSnVuY3Rpb24AJQA0RXhwb3J0TWVzc2FnZQwBHG5ldHdvcmshAQEkTmV0d29ya0lkAAEsZGVzdGluYXRpb24RAQFASW50ZXJpb3JMb2NhdGlvbgABDHhjbUEGARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V0VQYBFEFzc2V0AAEgdW5sb2NrZXINAQEgTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldFUGARRBc3NldAABGHRhcmdldA0BASBMb2NhdGlvbgAoADhOb3RlVW5sb2NrYWJsZQgBFGFzc2V0VQYBFEFzc2V0AAEUb3duZXINAQEgTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V0VQYBFEFzc2V0AAEYbG9ja2VyDQEBIExvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQADQEBIExvY2F0aW9uAC4APFVucGFpZEV4ZWN1dGlvbggBMHdlaWdodF9saW1pdD0GASxXZWlnaHRMaW1pdAABMGNoZWNrX29yaWdpbnUGAUBPcHRpb248TG9jYXRpb24+AC8AAE0GECxzdGFnaW5nX3hjbQh2NBRhc3NldBhBc3NldHMAAAQAUQYBKFZlYzxBc3NldD4AAFEGAAACVQYAVQYQLHN0YWdpbmdfeGNtCHY0FGFzc2V0FEFzc2V0AAAIAQhpZEEBARxBc3NldElkAAEMZnVuWQYBLEZ1bmdpYmlsaXR5AABZBhAsc3RhZ2luZ194Y20IdjQUYXNzZXQsRnVuZ2liaWxpdHkAAQggRnVuZ2libGUEAPwBEHUxMjgAAAAsTm9uRnVuZ2libGUEAF0GATRBc3NldEluc3RhbmNlAAEAAF0GECxzdGFnaW5nX3hjbQh2NBRhc3NldDRBc3NldEluc3RhbmNlAAEYJFVuZGVmaW5lZAAAABRJbmRleAQA/AEQdTEyOAABABhBcnJheTQEAEgBHFt1ODsgNF0AAgAYQXJyYXk4BACxBQEcW3U4OyA4XQADABxBcnJheTE2BADAASBbdTg7IDE2XQAEABxBcnJheTMyBAAEASBbdTg7IDMyXQAFAABhBgwsc3RhZ2luZ194Y20IdjQgUmVzcG9uc2UAARgQTnVsbAAAABhBc3NldHMEAE0GARhBc3NldHMAAQA8RXhlY3V0aW9uUmVzdWx0BAABBgFQT3B0aW9uPCh1MzIsIEVycm9yKT4AAgAcVmVyc2lvbgQAEAE4c3VwZXI6OlZlcnNpb24AAwAsUGFsbGV0c0luZm8EAGUGAZhCb3VuZGVkVmVjPFBhbGxldEluZm8sIE1heFBhbGxldHNJbmZvPgAEADhEaXNwYXRjaFJlc3VsdAQAHQYBOE1heWJlRXJyb3JDb2RlAAUAAGUGDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBaQYEUwAABABxBgEYVmVjPFQ+AABpBgwsc3RhZ2luZ194Y20IdjQoUGFsbGV0SW5mbwAAGAEUaW5kZXjsAQx1MzIAARBuYW1lbQYBgEJvdW5kZWRWZWM8dTgsIE1heFBhbGxldE5hbWVMZW4+AAEsbW9kdWxlX25hbWVtBgGAQm91bmRlZFZlYzx1OCwgTWF4UGFsbGV0TmFtZUxlbj4AARRtYWpvcuwBDHUzMgABFG1pbm9y7AEMdTMyAAEUcGF0Y2jsAQx1MzIAAG0GDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAcQYAAAJpBgB1BgQYT3B0aW9uBARUAQ0BAQgQTm9uZQAAABBTb21lBAANAQAAAQAAeQYMLHN0YWdpbmdfeGNtCHY0RFF1ZXJ5UmVzcG9uc2VJbmZvAAAMASxkZXN0aW5hdGlvbg0BASBMb2NhdGlvbgABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABKG1heF93ZWlnaHQoARhXZWlnaHQAAH0GECxzdGFnaW5nX3hjbQh2NBRhc3NldCxBc3NldEZpbHRlcgABCCBEZWZpbml0ZQQATQYBGEFzc2V0cwAAABBXaWxkBACBBgEkV2lsZEFzc2V0AAEAAIEGECxzdGFnaW5nX3hjbQh2NBRhc3NldCRXaWxkQXNzZXQAARAMQWxsAAAAFEFsbE9mCAEIaWRBAQEcQXNzZXRJZAABDGZ1boUGATxXaWxkRnVuZ2liaWxpdHkAAQAoQWxsQ291bnRlZAQA7AEMdTMyAAIAMEFsbE9mQ291bnRlZAwBCGlkQQEBHEFzc2V0SWQAAQxmdW6FBgE8V2lsZEZ1bmdpYmlsaXR5AAEUY291bnTsAQx1MzIAAwAAhQYQLHN0YWdpbmdfeGNtCHY0FGFzc2V0PFdpbGRGdW5naWJpbGl0eQABCCBGdW5naWJsZQAAACxOb25GdW5naWJsZQABAACJBggMeGNtPFZlcnNpb25lZEFzc2V0cwABDAhWMgQAmQUBPHYyOjpNdWx0aUFzc2V0cwABAAhWMwQA6QUBPHYzOjpNdWx0aUFzc2V0cwADAAhWNAQATQYBKHY0OjpBc3NldHMABAAAjQYIDHhjbTBWZXJzaW9uZWRYY20ELFJ1bnRpbWVDYWxsAAEMCFYyBACRBgFQdjI6OlhjbTxSdW50aW1lQ2FsbD4AAgAIVjMEAKEGAVB2Mzo6WGNtPFJ1bnRpbWVDYWxsPgADAAhWNAQArQYBUHY0OjpYY208UnVudGltZUNhbGw+AAQAAJEGDAx4Y20IdjIMWGNtBCxSdW50aW1lQ2FsbAAABACVBgF0VmVjPEluc3RydWN0aW9uPFJ1bnRpbWVDYWxsPj4AAJUGAAACmQYAmQYMDHhjbQh2MixJbnN0cnVjdGlvbgQsUnVudGltZUNhbGwAAXA0V2l0aGRyYXdBc3NldAQAmQUBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQAmQUBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAJkFASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlDAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2W1BQEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0LAEMdTY0AAMANFRyYW5zZmVyQXNzZXQIARhhc3NldHOZBQEsTXVsdGlBc3NldHMAASxiZW5lZmljaWFyeUkBATRNdWx0aUxvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzmQUBLE11bHRpQXNzZXRzAAEQZGVzdEkBATRNdWx0aUxvY2F0aW9uAAEMeGNtjQUBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fdHlwZcUFAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCwBDHU2NAABEGNhbGydBgFoRG91YmxlRW5jb2RlZDxSdW50aW1lQ2FsbD4ABgBkSHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdAwBGHNlbmRlcuwBDHUzMgABQG1heF9tZXNzYWdlX3NpemXsAQx1MzIAATBtYXhfY2FwYWNpdHnsAQx1MzIABwBMSHJtcENoYW5uZWxBY2NlcHRlZAQBJHJlY2lwaWVudOwBDHUzMgAIAEhIcm1wQ2hhbm5lbENsb3NpbmcMASRpbml0aWF0b3LsAQx1MzIAARhzZW5kZXLsAQx1MzIAASRyZWNpcGllbnTsAQx1MzIACQAsQ2xlYXJPcmlnaW4ACgA0RGVzY2VuZE9yaWdpbgQATQEBVEludGVyaW9yTXVsdGlMb2NhdGlvbgALACxSZXBvcnRFcnJvcgwBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQADAAwRGVwb3NpdEFzc2V0DAEYYXNzZXRzzQUBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz7AEMdTMyAAEsYmVuZWZpY2lhcnlJAQE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0EAEYYXNzZXRzzQUBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz7AEMdTMyAAEQZGVzdEkBATRNdWx0aUxvY2F0aW9uAAEMeGNtjQUBHFhjbTwoKT4ADgA0RXhjaGFuZ2VBc3NldAgBEGdpdmXNBQFATXVsdGlBc3NldEZpbHRlcgABHHJlY2VpdmWZBQEsTXVsdGlBc3NldHMADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHPNBQFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmVJAQE0TXVsdGlMb2NhdGlvbgABDHhjbY0FARxYY208KCk+ABAAQEluaXRpYXRlVGVsZXBvcnQMARhhc3NldHPNBQFATXVsdGlBc3NldEZpbHRlcgABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABDHhjbY0FARxYY208KCk+ABEAMFF1ZXJ5SG9sZGluZxABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3RJAQE0TXVsdGlMb2NhdGlvbgABGGFzc2V0c80FAUBNdWx0aUFzc2V0RmlsdGVyAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCwBDHU2NAASADBCdXlFeGVjdXRpb24IARBmZWVzoQUBKE11bHRpQXNzZXQAATB3ZWlnaHRfbGltaXTZBQEsV2VpZ2h0TGltaXQAEwA0UmVmdW5kU3VycGx1cwAUADxTZXRFcnJvckhhbmRsZXIEAJEGAUBYY208UnVudGltZUNhbGw+ABUALFNldEFwcGVuZGl4BACRBgFAWGNtPFJ1bnRpbWVDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHOZBQEsTXVsdGlBc3NldHMAARh0aWNrZXRJAQE0TXVsdGlMb2NhdGlvbgAYABBUcmFwBAAsAQx1NjQAGQBAU3Vic2NyaWJlVmVyc2lvbggBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQAGgBIVW5zdWJzY3JpYmVWZXJzaW9uABsAAJ0GDAx4Y204ZG91YmxlX2VuY29kZWQ0RG91YmxlRW5jb2RlZAQEVAAABAEcZW5jb2RlZDgBHFZlYzx1OD4AAKEGDAx4Y20IdjMMWGNtBBBDYWxsAAAEAKUGAVhWZWM8SW5zdHJ1Y3Rpb248Q2FsbD4+AAClBgAAAqkGAKkGDAx4Y20IdjMsSW5zdHJ1Y3Rpb24EEENhbGwAAcA0V2l0aGRyYXdBc3NldAQA6QUBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQA6QUBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAOkFASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlEAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2X9BQEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AAEccXVlcmllciUGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AAwA0VHJhbnNmZXJBc3NldAgBGGFzc2V0c+kFASxNdWx0aUFzc2V0cwABLGJlbmVmaWNpYXJ54AE0TXVsdGlMb2NhdGlvbgAEAFBUcmFuc2ZlclJlc2VydmVBc3NldAwBGGFzc2V0c+kFASxNdWx0aUFzc2V0cwABEGRlc3TgATRNdWx0aUxvY2F0aW9uAAEMeGNt3QUBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fa2luZCkGAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCgBGFdlaWdodAABEGNhbGydBgFMRG91YmxlRW5jb2RlZDxDYWxsPgAGAGRIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0DAEYc2VuZGVy7AEMdTMyAAFAbWF4X21lc3NhZ2Vfc2l6ZewBDHUzMgABMG1heF9jYXBhY2l0eewBDHUzMgAHAExIcm1wQ2hhbm5lbEFjY2VwdGVkBAEkcmVjaXBpZW507AEMdTMyAAgASEhybXBDaGFubmVsQ2xvc2luZwwBJGluaXRpYXRvcuwBDHUzMgABGHNlbmRlcuwBDHUzMgABJHJlY2lwaWVudOwBDHUzMgAJACxDbGVhck9yaWdpbgAKADREZXNjZW5kT3JpZ2luBADkAVRJbnRlcmlvck11bHRpTG9jYXRpb24ACwAsUmVwb3J0RXJyb3IEAC0GAURRdWVyeVJlc3BvbnNlSW5mbwAMADBEZXBvc2l0QXNzZXQIARhhc3NldHMxBgFATXVsdGlBc3NldEZpbHRlcgABLGJlbmVmaWNpYXJ54AE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0DAEYYXNzZXRzMQYBQE11bHRpQXNzZXRGaWx0ZXIAARBkZXN04AE0TXVsdGlMb2NhdGlvbgABDHhjbd0FARxYY208KCk+AA4ANEV4Y2hhbmdlQXNzZXQMARBnaXZlMQYBQE11bHRpQXNzZXRGaWx0ZXIAARB3YW506QUBLE11bHRpQXNzZXRzAAEcbWF4aW1hbCABEGJvb2wADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHMxBgFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmXgATRNdWx0aUxvY2F0aW9uAAEMeGNt3QUBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0czEGAUBNdWx0aUFzc2V0RmlsdGVyAAEQZGVzdOABNE11bHRpTG9jYXRpb24AAQx4Y23dBQEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mby0GAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0czEGAUBNdWx0aUFzc2V0RmlsdGVyABIAMEJ1eUV4ZWN1dGlvbggBEGZlZXPxBQEoTXVsdGlBc3NldAABMHdlaWdodF9saW1pdD0GASxXZWlnaHRMaW1pdAATADRSZWZ1bmRTdXJwbHVzABQAPFNldEVycm9ySGFuZGxlcgQAoQYBJFhjbTxDYWxsPgAVACxTZXRBcHBlbmRpeAQAoQYBJFhjbTxDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHPpBQEsTXVsdGlBc3NldHMAARh0aWNrZXTgATRNdWx0aUxvY2F0aW9uABgAEFRyYXAEACwBDHU2NAAZAEBTdWJzY3JpYmVWZXJzaW9uCAEgcXVlcnlfaWQsARxRdWVyeUlkAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCgBGFdlaWdodAAaAEhVbnN1YnNjcmliZVZlcnNpb24AGwAkQnVybkFzc2V0BADpBQEsTXVsdGlBc3NldHMAHAAsRXhwZWN0QXNzZXQEAOkFASxNdWx0aUFzc2V0cwAdADBFeHBlY3RPcmlnaW4EACUGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AHgAsRXhwZWN0RXJyb3IEAAEGAVBPcHRpb248KHUzMiwgRXJyb3IpPgAfAFBFeHBlY3RUcmFuc2FjdFN0YXR1cwQAHQYBOE1heWJlRXJyb3JDb2RlACAALFF1ZXJ5UGFsbGV0CAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAE0cmVzcG9uc2VfaW5mby0GAURRdWVyeVJlc3BvbnNlSW5mbwAhADBFeHBlY3RQYWxsZXQUARRpbmRleOwBDHUzMgABEG5hbWU4ARxWZWM8dTg+AAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAEsY3JhdGVfbWFqb3LsAQx1MzIAATxtaW5fY3JhdGVfbWlub3LsAQx1MzIAIgBQUmVwb3J0VHJhbnNhY3RTdGF0dXMEAC0GAURRdWVyeVJlc3BvbnNlSW5mbwAjAExDbGVhclRyYW5zYWN0U3RhdHVzACQAPFVuaXZlcnNhbE9yaWdpbgQA6AEgSnVuY3Rpb24AJQA0RXhwb3J0TWVzc2FnZQwBHG5ldHdvcmv0ASROZXR3b3JrSWQAASxkZXN0aW5hdGlvbuQBVEludGVyaW9yTXVsdGlMb2NhdGlvbgABDHhjbd0FARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V08QUBKE11bHRpQXNzZXQAASB1bmxvY2tlcuABNE11bHRpTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldPEFAShNdWx0aUFzc2V0AAEYdGFyZ2V04AE0TXVsdGlMb2NhdGlvbgAoADhOb3RlVW5sb2NrYWJsZQgBFGFzc2V08QUBKE11bHRpQXNzZXQAARRvd25lcuABNE11bHRpTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V08QUBKE11bHRpQXNzZXQAARhsb2NrZXLgATRNdWx0aUxvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQA4AE0TXVsdGlMb2NhdGlvbgAuADxVbnBhaWRFeGVjdXRpb24IATB3ZWlnaHRfbGltaXQ9BgEsV2VpZ2h0TGltaXQAATBjaGVja19vcmlnaW4lBgFUT3B0aW9uPE11bHRpTG9jYXRpb24+AC8AAK0GDCxzdGFnaW5nX3hjbQh2NAxYY20EEENhbGwAAAQAsQYBWFZlYzxJbnN0cnVjdGlvbjxDYWxsPj4AALEGAAACtQYAtQYMLHN0YWdpbmdfeGNtCHY0LEluc3RydWN0aW9uBBBDYWxsAAHANFdpdGhkcmF3QXNzZXQEAE0GARhBc3NldHMAAABUUmVzZXJ2ZUFzc2V0RGVwb3NpdGVkBABNBgEYQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAE0GARhBc3NldHMAAgA0UXVlcnlSZXNwb25zZRABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABIHJlc3BvbnNlYQYBIFJlc3BvbnNlAAEobWF4X3dlaWdodCgBGFdlaWdodAABHHF1ZXJpZXJ1BgFAT3B0aW9uPExvY2F0aW9uPgADADRUcmFuc2ZlckFzc2V0CAEYYXNzZXRzTQYBGEFzc2V0cwABLGJlbmVmaWNpYXJ5DQEBIExvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzTQYBGEFzc2V0cwABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgAFACBUcmFuc2FjdAwBLG9yaWdpbl9raW5kKQYBKE9yaWdpbktpbmQAAVhyZXF1aXJlX3dlaWdodF9hdF9tb3N0KAEYV2VpZ2h0AAEQY2FsbJ0GAUxEb3VibGVFbmNvZGVkPENhbGw+AAYAZEhybXBOZXdDaGFubmVsT3BlblJlcXVlc3QMARhzZW5kZXLsAQx1MzIAAUBtYXhfbWVzc2FnZV9zaXpl7AEMdTMyAAEwbWF4X2NhcGFjaXR57AEMdTMyAAcATEhybXBDaGFubmVsQWNjZXB0ZWQEASRyZWNpcGllbnTsAQx1MzIACABISHJtcENoYW5uZWxDbG9zaW5nDAEkaW5pdGlhdG9y7AEMdTMyAAEYc2VuZGVy7AEMdTMyAAEkcmVjaXBpZW507AEMdTMyAAkALENsZWFyT3JpZ2luAAoANERlc2NlbmRPcmlnaW4EABEBAUBJbnRlcmlvckxvY2F0aW9uAAsALFJlcG9ydEVycm9yBAB5BgFEUXVlcnlSZXNwb25zZUluZm8ADAAwRGVwb3NpdEFzc2V0CAEYYXNzZXRzfQYBLEFzc2V0RmlsdGVyAAEsYmVuZWZpY2lhcnkNAQEgTG9jYXRpb24ADQBMRGVwb3NpdFJlc2VydmVBc3NldAwBGGFzc2V0c30GASxBc3NldEZpbHRlcgABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgAOADRFeGNoYW5nZUFzc2V0DAEQZ2l2ZX0GASxBc3NldEZpbHRlcgABEHdhbnRNBgEYQXNzZXRzAAEcbWF4aW1hbCABEGJvb2wADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHN9BgEsQXNzZXRGaWx0ZXIAARxyZXNlcnZlDQEBIExvY2F0aW9uAAEMeGNtQQYBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0c30GASxBc3NldEZpbHRlcgABEGRlc3QNAQEgTG9jYXRpb24AAQx4Y21BBgEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mb3kGAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0c30GASxBc3NldEZpbHRlcgASADBCdXlFeGVjdXRpb24IARBmZWVzVQYBFEFzc2V0AAEwd2VpZ2h0X2xpbWl0PQYBLFdlaWdodExpbWl0ABMANFJlZnVuZFN1cnBsdXMAFAA8U2V0RXJyb3JIYW5kbGVyBACtBgEkWGNtPENhbGw+ABUALFNldEFwcGVuZGl4BACtBgEkWGNtPENhbGw+ABYAKENsZWFyRXJyb3IAFwAoQ2xhaW1Bc3NldAgBGGFzc2V0c00GARhBc3NldHMAARh0aWNrZXQNAQEgTG9jYXRpb24AGAAQVHJhcAQALAEMdTY0ABkAQFN1YnNjcmliZVZlcnNpb24IASBxdWVyeV9pZCwBHFF1ZXJ5SWQAAUxtYXhfcmVzcG9uc2Vfd2VpZ2h0KAEYV2VpZ2h0ABoASFVuc3Vic2NyaWJlVmVyc2lvbgAbACRCdXJuQXNzZXQEAE0GARhBc3NldHMAHAAsRXhwZWN0QXNzZXQEAE0GARhBc3NldHMAHQAwRXhwZWN0T3JpZ2luBAB1BgFAT3B0aW9uPExvY2F0aW9uPgAeACxFeHBlY3RFcnJvcgQAAQYBUE9wdGlvbjwodTMyLCBFcnJvcik+AB8AUEV4cGVjdFRyYW5zYWN0U3RhdHVzBAAdBgE4TWF5YmVFcnJvckNvZGUAIAAsUXVlcnlQYWxsZXQIASxtb2R1bGVfbmFtZTgBHFZlYzx1OD4AATRyZXNwb25zZV9pbmZveQYBRFF1ZXJ5UmVzcG9uc2VJbmZvACEAMEV4cGVjdFBhbGxldBQBFGluZGV47AEMdTMyAAEQbmFtZTgBHFZlYzx1OD4AASxtb2R1bGVfbmFtZTgBHFZlYzx1OD4AASxjcmF0ZV9tYWpvcuwBDHUzMgABPG1pbl9jcmF0ZV9taW5vcuwBDHUzMgAiAFBSZXBvcnRUcmFuc2FjdFN0YXR1cwQAeQYBRFF1ZXJ5UmVzcG9uc2VJbmZvACMATENsZWFyVHJhbnNhY3RTdGF0dXMAJAA8VW5pdmVyc2FsT3JpZ2luBAAZAQEgSnVuY3Rpb24AJQA0RXhwb3J0TWVzc2FnZQwBHG5ldHdvcmshAQEkTmV0d29ya0lkAAEsZGVzdGluYXRpb24RAQFASW50ZXJpb3JMb2NhdGlvbgABDHhjbUEGARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V0VQYBFEFzc2V0AAEgdW5sb2NrZXINAQEgTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldFUGARRBc3NldAABGHRhcmdldA0BASBMb2NhdGlvbgAoADhOb3RlVW5sb2NrYWJsZQgBFGFzc2V0VQYBFEFzc2V0AAEUb3duZXINAQEgTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V0VQYBFEFzc2V0AAEYbG9ja2VyDQEBIExvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQADQEBIExvY2F0aW9uAC4APFVucGFpZEV4ZWN1dGlvbggBMHdlaWdodF9saW1pdD0GASxXZWlnaHRMaW1pdAABMGNoZWNrX29yaWdpbnUGAUBPcHRpb248TG9jYXRpb24+AC8AALkGEFBzdGFnaW5nX3hjbV9leGVjdXRvchh0cmFpdHM4YXNzZXRfdHJhbnNmZXIwVHJhbnNmZXJUeXBlAAEQIFRlbGVwb3J0AAAAMExvY2FsUmVzZXJ2ZQABAEhEZXN0aW5hdGlvblJlc2VydmUAAgA0UmVtb3RlUmVzZXJ2ZQQARQEBRFZlcnNpb25lZExvY2F0aW9uAAMAAL0GCAx4Y21AVmVyc2lvbmVkQXNzZXRJZAABCAhWMwQACQEBLHYzOjpBc3NldElkAAMACFY0BABBAQEsdjQ6OkFzc2V0SWQABAAAwQYMUHBhbGxldF9tZXNzYWdlX3F1ZXVlGHBhbGxldBBDYWxsBARUAAEIJHJlYXBfcGFnZQgBOG1lc3NhZ2Vfb3JpZ2luxQYBSE1lc3NhZ2VPcmlnaW5PZjxUPgABKHBhZ2VfaW5kZXgQASRQYWdlSW5kZXgAAAQ9AVJlbW92ZSBhIHBhZ2Ugd2hpY2ggaGFzIG5vIG1vcmUgbWVzc2FnZXMgcmVtYWluaW5nIHRvIGJlIHByb2Nlc3NlZCBvciBpcyBzdGFsZS5IZXhlY3V0ZV9vdmVyd2VpZ2h0EAE4bWVzc2FnZV9vcmlnaW7FBgFITWVzc2FnZU9yaWdpbk9mPFQ+AAEQcGFnZRABJFBhZ2VJbmRleAABFGluZGV4EAEcVDo6U2l6ZQABMHdlaWdodF9saW1pdCgBGFdlaWdodAABNHhFeGVjdXRlIGFuIG92ZXJ3ZWlnaHQgbWVzc2FnZS4ATQFUZW1wb3JhcnkgcHJvY2Vzc2luZyBlcnJvcnMgd2lsbCBiZSBwcm9wYWdhdGVkIHdoZXJlYXMgcGVybWFuZW50IGVycm9ycyBhcmUgdHJlYXRlZFRhcyBzdWNjZXNzIGNvbmRpdGlvbi4AdC0gYG9yaWdpbmA6IE11c3QgYmUgYFNpZ25lZGAuNQEtIGBtZXNzYWdlX29yaWdpbmA6IFRoZSBvcmlnaW4gZnJvbSB3aGljaCB0aGUgbWVzc2FnZSB0byBiZSBleGVjdXRlZCBhcnJpdmVkLj0BLSBgcGFnZWA6IFRoZSBwYWdlIGluIHRoZSBxdWV1ZSBpbiB3aGljaCB0aGUgbWVzc2FnZSB0byBiZSBleGVjdXRlZCBpcyBzaXR0aW5nLgkBLSBgaW5kZXhgOiBUaGUgaW5kZXggaW50byB0aGUgcXVldWUgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgZXhlY3V0ZWQuWQEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgbWF4aW11bSBhbW91bnQgb2Ygd2VpZ2h0IGFsbG93ZWQgdG8gYmUgY29uc3VtZWQgaW4gdGhlIGV4ZWN1dGlvbkQgIG9mIHRoZSBtZXNzYWdlLgD0QmVuY2htYXJrIGNvbXBsZXhpdHkgY29uc2lkZXJhdGlvbnM6IE8oaW5kZXggKyB3ZWlnaHRfbGltaXQpLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7FBgxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJGluY2x1c2lvblhBZ2dyZWdhdGVNZXNzYWdlT3JpZ2luAAEEDFVtcAQAyQYBKFVtcFF1ZXVlSWQAAAAAyQYMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRpbmNsdXNpb24oVW1wUXVldWVJZAABBBBQYXJhBACNAgEYUGFyYUlkAAAAAM0GDERwYWxsZXRfYXNzZXRfcmF0ZRhwYWxsZXQQQ2FsbAQEVAABDBhjcmVhdGUIAShhc3NldF9raW5k3AFEQm94PFQ6OkFzc2V0S2luZD4AARByYXRl0QYBJEZpeGVkVTEyOAAAEA0BSW5pdGlhbGl6ZSBhIGNvbnZlcnNpb24gcmF0ZSB0byBuYXRpdmUgYmFsYW5jZSBmb3IgdGhlIGdpdmVuIGFzc2V0LgA0IyMgQ29tcGxleGl0eRgtIE8oMSkYdXBkYXRlCAEoYXNzZXRfa2luZNwBREJveDxUOjpBc3NldEtpbmQ+AAEQcmF0ZdEGASRGaXhlZFUxMjgAARAFAVVwZGF0ZSB0aGUgY29udmVyc2lvbiByYXRlIHRvIG5hdGl2ZSBiYWxhbmNlIGZvciB0aGUgZ2l2ZW4gYXNzZXQuADQjIyBDb21wbGV4aXR5GC0gTygxKRhyZW1vdmUEAShhc3NldF9raW5k3AFEQm94PFQ6OkFzc2V0S2luZD4AAhAlAVJlbW92ZSBhbiBleGlzdGluZyBjb252ZXJzaW9uIHJhdGUgdG8gbmF0aXZlIGJhbGFuY2UgZm9yIHRoZSBnaXZlbiBhc3NldC4ANCMjIENvbXBsZXhpdHkYLSBPKDEpBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLtEGDDRzcF9hcml0aG1ldGljLGZpeGVkX3BvaW50JEZpeGVkVTEyOAAABAAYARB1MTI4AADVBgwwcGFsbGV0X2JlZWZ5GHBhbGxldBBDYWxsBARUAAEMTHJlcG9ydF9lcXVpdm9jYXRpb24IAUhlcXVpdm9jYXRpb25fcHJvb2bZBgGNAUJveDxEb3VibGVWb3RpbmdQcm9vZjxCbG9ja051bWJlckZvcjxUPiwgVDo6QmVlZnlJZCw8VDo6QmVlZnlJZAphcyBSdW50aW1lQXBwUHVibGljPjo6U2lnbmF0dXJlLD4sPgABPGtleV9vd25lcl9wcm9vZq0BAUBUOjpLZXlPd25lclByb29mAAAQCQFSZXBvcnQgdm90ZXIgZXF1aXZvY2F0aW9uL21pc2JlaGF2aW9yLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeSB0aGX0ZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZvhhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZUR3aWxsIGJlIHJlcG9ydGVkLnByZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkCAFIZXF1aXZvY2F0aW9uX3Byb29m2QYBjQFCb3g8RG91YmxlVm90aW5nUHJvb2Y8QmxvY2tOdW1iZXJGb3I8VD4sIFQ6OkJlZWZ5SWQsPFQ6OkJlZWZ5SWQKYXMgUnVudGltZUFwcFB1YmxpYz46OlNpZ25hdHVyZSw+LD4AATxrZXlfb3duZXJfcHJvb2atAQFAVDo6S2V5T3duZXJQcm9vZgABJAkBUmVwb3J0IHZvdGVyIGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhl9GVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2b4YWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2VEd2lsbCBiZSByZXBvcnRlZC4ADQFUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx5FQFibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2gVAWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbiRyZXBvcnRlci48c2V0X25ld19nZW5lc2lzBAE8ZGVsYXlfaW5fYmxvY2tzEAFEQmxvY2tOdW1iZXJGb3I8VD4AAhBdAVJlc2V0IEJFRUZZIGNvbnNlbnN1cyBieSBzZXR0aW5nIGEgbmV3IEJFRUZZIGdlbmVzaXMgYXQgYGRlbGF5X2luX2Jsb2Nrc2AgYmxvY2tzIGluIHRoZRxmdXR1cmUuALROb3RlOiBgZGVsYXlfaW5fYmxvY2tzYCBoYXMgdG8gYmUgYXQgbGVhc3QgMS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMu2QYISHNwX2NvbnNlbnN1c19iZWVmeUREb3VibGVWb3RpbmdQcm9vZgwYTnVtYmVyARAISWQBKQIkU2lnbmF0dXJlAd0GAAgBFGZpcnN04QYBiFZvdGVNZXNzYWdlPE51bWJlciwgSWQsIFNpZ25hdHVyZT4AARhzZWNvbmThBgGIVm90ZU1lc3NhZ2U8TnVtYmVyLCBJZCwgU2lnbmF0dXJlPgAA3QYMSHNwX2NvbnNlbnN1c19iZWVmeTBlY2RzYV9jcnlwdG8kU2lnbmF0dXJlAAAEANkCAUBlY2RzYTo6U2lnbmF0dXJlAADhBghIc3BfY29uc2Vuc3VzX2JlZWZ5LFZvdGVNZXNzYWdlDBhOdW1iZXIBEAhJZAEpAiRTaWduYXR1cmUB3QYADAEoY29tbWl0bWVudOUGAUhDb21taXRtZW50PE51bWJlcj4AAQhpZCkCAQhJZAABJHNpZ25hdHVyZd0GASRTaWduYXR1cmUAAOUGDEhzcF9jb25zZW5zdXNfYmVlZnkoY29tbWl0bWVudChDb21taXRtZW50BDBUQmxvY2tOdW1iZXIBEAAMARxwYXlsb2Fk6QYBHFBheWxvYWQAATBibG9ja19udW1iZXIQATBUQmxvY2tOdW1iZXIAAUB2YWxpZGF0b3Jfc2V0X2lkMAE4VmFsaWRhdG9yU2V0SWQAAOkGDEhzcF9jb25zZW5zdXNfYmVlZnkccGF5bG9hZBxQYXlsb2FkAAAEAO0GAXhWZWM8KEJlZWZ5UGF5bG9hZElkLCBWZWM8dTg+KT4AAO0GAAAC8QYA8QYAAAQI9QY4APUGAAADAgAAAAgA+QYMKHNwX3J1bnRpbWUYdHJhaXRzLEJsYWtlVHdvMjU2AAAAAP0GDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAAQcMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxR0eXBlcxRUYWxseQgUVm90ZXMBGBRUb3RhbAAADAEQYXllcxgBFFZvdGVzAAEQbmF5cxgBFFZvdGVzAAEcc3VwcG9ydBgBFFZvdGVzAAAFBwxAcGFsbGV0X3doaXRlbGlzdBhwYWxsZXQURXZlbnQEBFQAAQw8Q2FsbFdoaXRlbGlzdGVkBAEkY2FsbF9oYXNoNAEcVDo6SGFzaAAAAFhXaGl0ZWxpc3RlZENhbGxSZW1vdmVkBAEkY2FsbF9oYXNoNAEcVDo6SGFzaAABAGRXaGl0ZWxpc3RlZENhbGxEaXNwYXRjaGVkCAEkY2FsbF9oYXNoNAEcVDo6SGFzaAABGHJlc3VsdAkHAWhEaXNwYXRjaFJlc3VsdFdpdGhQb3N0SW5mbwACAAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldAkHBBhSZXN1bHQIBFQBDQcERQEVBwEICE9rBAANBwAAAAAMRXJyBAAVBwAAAQAADQcMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2hAUG9zdERpc3BhdGNoSW5mbwAACAE0YWN0dWFsX3dlaWdodBEHAThPcHRpb248V2VpZ2h0PgABIHBheXNfZmVlZAEQUGF5cwAAEQcEGE9wdGlvbgQEVAEoAQgQTm9uZQAAABBTb21lBAAoAAABAAAVBwgoc3BfcnVudGltZWREaXNwYXRjaEVycm9yV2l0aFBvc3RJbmZvBBBJbmZvAQ0HAAgBJHBvc3RfaW5mbw0HARBJbmZvAAEUZXJyb3JoATREaXNwYXRjaEVycm9yAAAZBwxEcGFsbGV0X3BhcmFtZXRlcnMYcGFsbGV0FEV2ZW50BARUAAEEHFVwZGF0ZWQMAQxrZXkdBwHEPFQ6OlJ1bnRpbWVQYXJhbWV0ZXJzIGFzIEFnZ3JlZ2F0ZWRLZXlWYWx1ZT46OktleQRkVGhlIGtleSB0aGF0IHdhcyB1cGRhdGVkLgEkb2xkX3ZhbHVlJQcB7E9wdGlvbjw8VDo6UnVudGltZVBhcmFtZXRlcnMgYXMgQWdncmVnYXRlZEtleVZhbHVlPjo6VmFsdWU+BHxUaGUgb2xkIHZhbHVlIGJlZm9yZSB0aGlzIGNhbGwuASRuZXdfdmFsdWUlBwHsT3B0aW9uPDxUOjpSdW50aW1lUGFyYW1ldGVycyBhcyBBZ2dyZWdhdGVkS2V5VmFsdWU+OjpWYWx1ZT4EeFRoZSBuZXcgdmFsdWUgYWZ0ZXIgdGhpcyBjYWxsLgAMUEEgUGFyYW1ldGVyIHdhcyBzZXQuALxJcyBhbHNvIGVtaXR0ZWQgd2hlbiB0aGUgdmFsdWUgd2FzIG5vdCBjaGFuZ2VkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldB0HCEBwb2xrYWRvdF9ydW50aW1lUFJ1bnRpbWVQYXJhbWV0ZXJzS2V5AAEEJEluZmxhdGlvbgQAIQcBqQE8ZHluYW1pY19wYXJhbXM6OmluZmxhdGlvbjo6UGFyYW1ldGVycyBhcyBmcmFtZV9zdXBwb3J0Ojp0cmFpdHM6OgpkeW5hbWljX3BhcmFtczo6QWdncmVnYXRlZEtleVZhbHVlPjo6S2V5AAAAACEHEEBwb2xrYWRvdF9ydW50aW1lOGR5bmFtaWNfcGFyYW1zJGluZmxhdGlvbjRQYXJhbWV0ZXJzS2V5AAEUME1pbkluZmxhdGlvbgQAsQIBME1pbkluZmxhdGlvbgAAADBNYXhJbmZsYXRpb24EAL0CATBNYXhJbmZsYXRpb24AAQAoSWRlYWxTdGFrZQQAwQIBKElkZWFsU3Rha2UAAgAcRmFsbG9mZgQAxQIBHEZhbGxvZmYAAwA8VXNlQXVjdGlvblNsb3RzBADJAgE8VXNlQXVjdGlvblNsb3RzAAQAACUHBBhPcHRpb24EBFQBKQcBCBBOb25lAAAAEFNvbWUEACkHAAABAAApBwhAcG9sa2Fkb3RfcnVudGltZVhSdW50aW1lUGFyYW1ldGVyc1ZhbHVlAAEEJEluZmxhdGlvbgQALQcBsQE8ZHluYW1pY19wYXJhbXM6OmluZmxhdGlvbjo6UGFyYW1ldGVycyBhcyBmcmFtZV9zdXBwb3J0Ojp0cmFpdHM6OgpkeW5hbWljX3BhcmFtczo6QWdncmVnYXRlZEtleVZhbHVlPjo6VmFsdWUAAAAALQcQQHBvbGthZG90X3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uPFBhcmFtZXRlcnNWYWx1ZQABFDBNaW5JbmZsYXRpb24EALkCASxQZXJxdWludGlsbAAAADBNYXhJbmZsYXRpb24EALkCASxQZXJxdWludGlsbAABAChJZGVhbFN0YWtlBAC5AgEsUGVycXVpbnRpbGwAAgAcRmFsbG9mZgQAuQIBLFBlcnF1aW50aWxsAAMAPFVzZUF1Y3Rpb25TbG90cwQAIAEQYm9vbAAEAAAxBxBccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zGHBhbGxldBRFdmVudAQEVAABBBxDbGFpbWVkDAEMd2hvAAEwVDo6QWNjb3VudElkAAFAZXRoZXJldW1fYWRkcmVzc90CATxFdGhlcmV1bUFkZHJlc3MAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAARoU29tZW9uZSBjbGFpbWVkIHNvbWUgRE9Ucy4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQ1Bww4cGFsbGV0X3Zlc3RpbmcYcGFsbGV0FEV2ZW50BARUAAEIOFZlc3RpbmdVcGRhdGVkCAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAABIHVudmVzdGVkGAEwQmFsYW5jZU9mPFQ+AAAIUQFUaGUgYW1vdW50IHZlc3RlZCBoYXMgYmVlbiB1cGRhdGVkLiBUaGlzIGNvdWxkIGluZGljYXRlIGEgY2hhbmdlIGluIGZ1bmRzIGF2YWlsYWJsZS4lAVRoZSBiYWxhbmNlIGdpdmVuIGlzIHRoZSBhbW91bnQgd2hpY2ggaXMgbGVmdCB1bnZlc3RlZCAoYW5kIHRodXMgbG9ja2VkKS5AVmVzdGluZ0NvbXBsZXRlZAQBHGFjY291bnQAATBUOjpBY2NvdW50SWQAAQScQW4gXFthY2NvdW50XF0gaGFzIGJlY29tZSBmdWxseSB2ZXN0ZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0OQcMOHBhbGxldF91dGlsaXR5GHBhbGxldBRFdmVudAABGEBCYXRjaEludGVycnVwdGVkCAEUaW5kZXgQAQx1MzIAARRlcnJvcmgBNERpc3BhdGNoRXJyb3IAAAhVAUJhdGNoIG9mIGRpc3BhdGNoZXMgZGlkIG5vdCBjb21wbGV0ZSBmdWxseS4gSW5kZXggb2YgZmlyc3QgZmFpbGluZyBkaXNwYXRjaCBnaXZlbiwgYXNId2VsbCBhcyB0aGUgZXJyb3IuOEJhdGNoQ29tcGxldGVkAAEEyEJhdGNoIG9mIGRpc3BhdGNoZXMgY29tcGxldGVkIGZ1bGx5IHdpdGggbm8gZXJyb3IuYEJhdGNoQ29tcGxldGVkV2l0aEVycm9ycwACBLRCYXRjaCBvZiBkaXNwYXRjaGVzIGNvbXBsZXRlZCBidXQgaGFzIGVycm9ycy40SXRlbUNvbXBsZXRlZAADBB0BQSBzaW5nbGUgaXRlbSB3aXRoaW4gYSBCYXRjaCBvZiBkaXNwYXRjaGVzIGhhcyBjb21wbGV0ZWQgd2l0aCBubyBlcnJvci4oSXRlbUZhaWxlZAQBFGVycm9yaAE0RGlzcGF0Y2hFcnJvcgAEBBEBQSBzaW5nbGUgaXRlbSB3aXRoaW4gYSBCYXRjaCBvZiBkaXNwYXRjaGVzIGhhcyBjb21wbGV0ZWQgd2l0aCBlcnJvci4wRGlzcGF0Y2hlZEFzBAEYcmVzdWx0iAE4RGlzcGF0Y2hSZXN1bHQABQRYQSBjYWxsIHdhcyBkaXNwYXRjaGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldD0HDDBwYWxsZXRfcHJveHkYcGFsbGV0FEV2ZW50BARUAAEUNFByb3h5RXhlY3V0ZWQEARhyZXN1bHSIAThEaXNwYXRjaFJlc3VsdAAABLxBIHByb3h5IHdhcyBleGVjdXRlZCBjb3JyZWN0bHksIHdpdGggdGhlIGdpdmVuLixQdXJlQ3JlYXRlZBABEHB1cmUAATBUOjpBY2NvdW50SWQAAQx3aG8AATBUOjpBY2NvdW50SWQAAShwcm94eV90eXBlCQMBMFQ6OlByb3h5VHlwZQABUGRpc2FtYmlndWF0aW9uX2luZGV4bQEBDHUxNgABCNxBIHB1cmUgYWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkIGJ5IG5ldyBwcm94eSB3aXRoIGdpdmVukGRpc2FtYmlndWF0aW9uIGluZGV4IGFuZCBwcm94eSB0eXBlLiRBbm5vdW5jZWQMARByZWFsAAEwVDo6QWNjb3VudElkAAEUcHJveHkAATBUOjpBY2NvdW50SWQAASRjYWxsX2hhc2g0ATRDYWxsSGFzaE9mPFQ+AAIE4EFuIGFubm91bmNlbWVudCB3YXMgcGxhY2VkIHRvIG1ha2UgYSBjYWxsIGluIHRoZSBmdXR1cmUuKFByb3h5QWRkZWQQASRkZWxlZ2F0b3IAATBUOjpBY2NvdW50SWQAASRkZWxlZ2F0ZWUAATBUOjpBY2NvdW50SWQAAShwcm94eV90eXBlCQMBMFQ6OlByb3h5VHlwZQABFGRlbGF5EAFEQmxvY2tOdW1iZXJGb3I8VD4AAwRIQSBwcm94eSB3YXMgYWRkZWQuMFByb3h5UmVtb3ZlZBABJGRlbGVnYXRvcgABMFQ6OkFjY291bnRJZAABJGRlbGVnYXRlZQABMFQ6OkFjY291bnRJZAABKHByb3h5X3R5cGUJAwEwVDo6UHJveHlUeXBlAAEUZGVsYXkQAURCbG9ja051bWJlckZvcjxUPgAEBFBBIHByb3h5IHdhcyByZW1vdmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldEEHDDxwYWxsZXRfbXVsdGlzaWcYcGFsbGV0FEV2ZW50BARUAAEQLE5ld011bHRpc2lnDAEkYXBwcm92aW5nAAEwVDo6QWNjb3VudElkAAEgbXVsdGlzaWcAATBUOjpBY2NvdW50SWQAASRjYWxsX2hhc2gEASBDYWxsSGFzaAAABIxBIG5ldyBtdWx0aXNpZyBvcGVyYXRpb24gaGFzIGJlZ3VuLkBNdWx0aXNpZ0FwcHJvdmFsEAEkYXBwcm92aW5nAAEwVDo6QWNjb3VudElkAAEkdGltZXBvaW50FQMBcFRpbWVwb2ludDxCbG9ja051bWJlckZvcjxUPj4AASBtdWx0aXNpZwABMFQ6OkFjY291bnRJZAABJGNhbGxfaGFzaAQBIENhbGxIYXNoAAEEyEEgbXVsdGlzaWcgb3BlcmF0aW9uIGhhcyBiZWVuIGFwcHJvdmVkIGJ5IHNvbWVvbmUuQE11bHRpc2lnRXhlY3V0ZWQUASRhcHByb3ZpbmcAATBUOjpBY2NvdW50SWQAASR0aW1lcG9pbnQVAwFwVGltZXBvaW50PEJsb2NrTnVtYmVyRm9yPFQ+PgABIG11bHRpc2lnAAEwVDo6QWNjb3VudElkAAEkY2FsbF9oYXNoBAEgQ2FsbEhhc2gAARhyZXN1bHSIAThEaXNwYXRjaFJlc3VsdAACBJxBIG11bHRpc2lnIG9wZXJhdGlvbiBoYXMgYmVlbiBleGVjdXRlZC5ETXVsdGlzaWdDYW5jZWxsZWQQAShjYW5jZWxsaW5nAAEwVDo6QWNjb3VudElkAAEkdGltZXBvaW50FQMBcFRpbWVwb2ludDxCbG9ja051bWJlckZvcjxUPj4AASBtdWx0aXNpZwABMFQ6OkFjY291bnRJZAABJGNhbGxfaGFzaAQBIENhbGxIYXNoAAMEoEEgbXVsdGlzaWcgb3BlcmF0aW9uIGhhcyBiZWVuIGNhbmNlbGxlZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRFBww8cGFsbGV0X2JvdW50aWVzGHBhbGxldBRFdmVudAgEVAAESQABLDhCb3VudHlQcm9wb3NlZAQBFGluZGV4EAEsQm91bnR5SW5kZXgAAARQTmV3IGJvdW50eSBwcm9wb3NhbC44Qm91bnR5UmVqZWN0ZWQIARRpbmRleBABLEJvdW50eUluZGV4AAEQYm9uZBgBPEJhbGFuY2VPZjxULCBJPgABBMxBIGJvdW50eSBwcm9wb3NhbCB3YXMgcmVqZWN0ZWQ7IGZ1bmRzIHdlcmUgc2xhc2hlZC5IQm91bnR5QmVjYW1lQWN0aXZlBAEUaW5kZXgQASxCb3VudHlJbmRleAACBLhBIGJvdW50eSBwcm9wb3NhbCBpcyBmdW5kZWQgYW5kIGJlY2FtZSBhY3RpdmUuNEJvdW50eUF3YXJkZWQIARRpbmRleBABLEJvdW50eUluZGV4AAEsYmVuZWZpY2lhcnkAATBUOjpBY2NvdW50SWQAAwSUQSBib3VudHkgaXMgYXdhcmRlZCB0byBhIGJlbmVmaWNpYXJ5LjRCb3VudHlDbGFpbWVkDAEUaW5kZXgQASxCb3VudHlJbmRleAABGHBheW91dBgBPEJhbGFuY2VPZjxULCBJPgABLGJlbmVmaWNpYXJ5AAEwVDo6QWNjb3VudElkAAQEjEEgYm91bnR5IGlzIGNsYWltZWQgYnkgYmVuZWZpY2lhcnkuOEJvdW50eUNhbmNlbGVkBAEUaW5kZXgQASxCb3VudHlJbmRleAAFBFhBIGJvdW50eSBpcyBjYW5jZWxsZWQuOEJvdW50eUV4dGVuZGVkBAEUaW5kZXgQASxCb3VudHlJbmRleAAGBHBBIGJvdW50eSBleHBpcnkgaXMgZXh0ZW5kZWQuOEJvdW50eUFwcHJvdmVkBAEUaW5kZXgQASxCb3VudHlJbmRleAAHBFRBIGJvdW50eSBpcyBhcHByb3ZlZC48Q3VyYXRvclByb3Bvc2VkCAEkYm91bnR5X2lkEAEsQm91bnR5SW5kZXgAARxjdXJhdG9yAAEwVDo6QWNjb3VudElkAAgEdEEgYm91bnR5IGN1cmF0b3IgaXMgcHJvcG9zZWQuREN1cmF0b3JVbmFzc2lnbmVkBAEkYm91bnR5X2lkEAEsQm91bnR5SW5kZXgACQR8QSBib3VudHkgY3VyYXRvciBpcyB1bmFzc2lnbmVkLjxDdXJhdG9yQWNjZXB0ZWQIASRib3VudHlfaWQQASxCb3VudHlJbmRleAABHGN1cmF0b3IAATBUOjpBY2NvdW50SWQACgR0QSBib3VudHkgY3VyYXRvciBpcyBhY2NlcHRlZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRJBwxUcGFsbGV0X2NoaWxkX2JvdW50aWVzGHBhbGxldBRFdmVudAQEVAABEBRBZGRlZAgBFGluZGV4EAEsQm91bnR5SW5kZXgAASxjaGlsZF9pbmRleBABLEJvdW50eUluZGV4AAAEYEEgY2hpbGQtYm91bnR5IGlzIGFkZGVkLhxBd2FyZGVkDAEUaW5kZXgQASxCb3VudHlJbmRleAABLGNoaWxkX2luZGV4EAEsQm91bnR5SW5kZXgAASxiZW5lZmljaWFyeQABMFQ6OkFjY291bnRJZAABBKxBIGNoaWxkLWJvdW50eSBpcyBhd2FyZGVkIHRvIGEgYmVuZWZpY2lhcnkuHENsYWltZWQQARRpbmRleBABLEJvdW50eUluZGV4AAEsY2hpbGRfaW5kZXgQASxCb3VudHlJbmRleAABGHBheW91dBgBMEJhbGFuY2VPZjxUPgABLGJlbmVmaWNpYXJ5AAEwVDo6QWNjb3VudElkAAIEpEEgY2hpbGQtYm91bnR5IGlzIGNsYWltZWQgYnkgYmVuZWZpY2lhcnkuIENhbmNlbGVkCAEUaW5kZXgQASxCb3VudHlJbmRleAABLGNoaWxkX2luZGV4EAEsQm91bnR5SW5kZXgAAwRwQSBjaGlsZC1ib3VudHkgaXMgY2FuY2VsbGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldE0HDJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UYcGFsbGV0FEV2ZW50BARUAAEYOFNvbHV0aW9uU3RvcmVkDAEcY29tcHV0ZVEHATxFbGVjdGlvbkNvbXB1dGUAARhvcmlnaW79AQFQT3B0aW9uPFQ6OkFjY291bnRJZD4AATBwcmV2X2VqZWN0ZWQgARBib29sAAActEEgc29sdXRpb24gd2FzIHN0b3JlZCB3aXRoIHRoZSBnaXZlbiBjb21wdXRlLgBRAVRoZSBgb3JpZ2luYCBpbmRpY2F0ZXMgdGhlIG9yaWdpbiBvZiB0aGUgc29sdXRpb24uIElmIGBvcmlnaW5gIGlzIGBTb21lKEFjY291bnRJZClgLFkBdGhlIHN0b3JlZCBzb2x1dGlvbiB3YXMgc3VibWl0dGVkIGluIHRoZSBzaWduZWQgcGhhc2UgYnkgYSBtaW5lciB3aXRoIHRoZSBgQWNjb3VudElkYC4lAU90aGVyd2lzZSwgdGhlIHNvbHV0aW9uIHdhcyBzdG9yZWQgZWl0aGVyIGR1cmluZyB0aGUgdW5zaWduZWQgcGhhc2Ugb3IgYnlNAWBUOjpGb3JjZU9yaWdpbmAuIFRoZSBgYm9vbGAgaXMgYHRydWVgIHdoZW4gYSBwcmV2aW91cyBzb2x1dGlvbiB3YXMgZWplY3RlZCB0byBtYWtlSHJvb20gZm9yIHRoaXMgb25lLkRFbGVjdGlvbkZpbmFsaXplZAgBHGNvbXB1dGVRBwE8RWxlY3Rpb25Db21wdXRlAAEUc2NvcmX1AwE0RWxlY3Rpb25TY29yZQABBBkBVGhlIGVsZWN0aW9uIGhhcyBiZWVuIGZpbmFsaXplZCwgd2l0aCB0aGUgZ2l2ZW4gY29tcHV0YXRpb24gYW5kIHNjb3JlLjhFbGVjdGlvbkZhaWxlZAACDExBbiBlbGVjdGlvbiBmYWlsZWQuAAEBTm90IG11Y2ggY2FuIGJlIHNhaWQgYWJvdXQgd2hpY2ggY29tcHV0ZXMgZmFpbGVkIGluIHRoZSBwcm9jZXNzLiBSZXdhcmRlZAgBHGFjY291bnQAAZg8VCBhcyBmcmFtZV9zeXN0ZW06OkNvbmZpZz46OkFjY291bnRJZAABFHZhbHVlGAEwQmFsYW5jZU9mPFQ+AAMEJQFBbiBhY2NvdW50IGhhcyBiZWVuIHJld2FyZGVkIGZvciB0aGVpciBzaWduZWQgc3VibWlzc2lvbiBiZWluZyBmaW5hbGl6ZWQuHFNsYXNoZWQIARxhY2NvdW50AAGYPFQgYXMgZnJhbWVfc3lzdGVtOjpDb25maWc+OjpBY2NvdW50SWQAARR2YWx1ZRgBMEJhbGFuY2VPZjxUPgAEBCEBQW4gYWNjb3VudCBoYXMgYmVlbiBzbGFzaGVkIGZvciBzdWJtaXR0aW5nIGFuIGludmFsaWQgc2lnbmVkIHN1Ym1pc3Npb24uRFBoYXNlVHJhbnNpdGlvbmVkDAEQZnJvbVUHAWBQaGFzZTxCbG9ja051bWJlckZvcjxUPj4AAQh0b1UHAWBQaGFzZTxCbG9ja051bWJlckZvcjxUPj4AARRyb3VuZBABDHUzMgAFBLhUaGVyZSB3YXMgYSBwaGFzZSB0cmFuc2l0aW9uIGluIGEgZ2l2ZW4gcm91bmQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0UQcIkHBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZTxFbGVjdGlvbkNvbXB1dGUAARQcT25DaGFpbgAAABhTaWduZWQAAQAgVW5zaWduZWQAAgAgRmFsbGJhY2sAAwAkRW1lcmdlbmN5AAQAAFUHCJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UUUGhhc2UECEJuARABEAxPZmYAAAAYU2lnbmVkAAEAIFVuc2lnbmVkBABZBwEoKGJvb2wsIEJuKQACACRFbWVyZ2VuY3kAAwAAWQcAAAQIIBAAXQcMQHBhbGxldF9iYWdzX2xpc3QYcGFsbGV0FEV2ZW50CARUAARJAAEIIFJlYmFnZ2VkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEQZnJvbTABIFQ6OlNjb3JlAAEIdG8wASBUOjpTY29yZQAABKRNb3ZlZCBhbiBhY2NvdW50IGZyb20gb25lIGJhZyB0byBhbm90aGVyLjBTY29yZVVwZGF0ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAASRuZXdfc2NvcmUwASBUOjpTY29yZQABBNhVcGRhdGVkIHRoZSBzY29yZSBvZiBzb21lIGFjY291bnQgdG8gdGhlIGdpdmVuIGFtb3VudC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRhBwxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0FEV2ZW50BARUAAFIHENyZWF0ZWQIASRkZXBvc2l0b3IAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAAEYEEgcG9vbCBoYXMgYmVlbiBjcmVhdGVkLhhCb25kZWQQARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEYYm9uZGVkGAEwQmFsYW5jZU9mPFQ+AAEYam9pbmVkIAEQYm9vbAABBJRBIG1lbWJlciBoYXMgYmVjYW1lIGJvbmRlZCBpbiBhIHBvb2wuHFBhaWRPdXQMARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEYcGF5b3V0GAEwQmFsYW5jZU9mPFQ+AAIEjEEgcGF5b3V0IGhhcyBiZWVuIG1hZGUgdG8gYSBtZW1iZXIuIFVuYm9uZGVkFAEYbWVtYmVyAAEwVDo6QWNjb3VudElkAAEccG9vbF9pZBABGFBvb2xJZAABHGJhbGFuY2UYATBCYWxhbmNlT2Y8VD4AARhwb2ludHMYATBCYWxhbmNlT2Y8VD4AAQxlcmEQASBFcmFJbmRleAADLJhBIG1lbWJlciBoYXMgdW5ib25kZWQgZnJvbSB0aGVpciBwb29sLgA5AS0gYGJhbGFuY2VgIGlzIHRoZSBjb3JyZXNwb25kaW5nIGJhbGFuY2Ugb2YgdGhlIG51bWJlciBvZiBwb2ludHMgdGhhdCBoYXMgYmVlblUBICByZXF1ZXN0ZWQgdG8gYmUgdW5ib25kZWQgKHRoZSBhcmd1bWVudCBvZiB0aGUgYHVuYm9uZGAgdHJhbnNhY3Rpb24pIGZyb20gdGhlIGJvbmRlZBwgIHBvb2wuRQEtIGBwb2ludHNgIGlzIHRoZSBudW1iZXIgb2YgcG9pbnRzIHRoYXQgYXJlIGlzc3VlZCBhcyBhIHJlc3VsdCBvZiBgYmFsYW5jZWAgYmVpbmfAZGlzc29sdmVkIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgdW5ib25kaW5nIHBvb2wu5C0gYGVyYWAgaXMgdGhlIGVyYSBpbiB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHVuYm9uZGVkLlUBSW4gdGhlIGFic2VuY2Ugb2Ygc2xhc2hpbmcsIHRoZXNlIHZhbHVlcyB3aWxsIG1hdGNoLiBJbiB0aGUgcHJlc2VuY2Ugb2Ygc2xhc2hpbmcsIHRoZU0BbnVtYmVyIG9mIHBvaW50cyB0aGF0IGFyZSBpc3N1ZWQgaW4gdGhlIHVuYm9uZGluZyBwb29sIHdpbGwgYmUgbGVzcyB0aGFuIHRoZSBhbW91bnRkcmVxdWVzdGVkIHRvIGJlIHVuYm9uZGVkLiRXaXRoZHJhd24QARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEcYmFsYW5jZRgBMEJhbGFuY2VPZjxUPgABGHBvaW50cxgBMEJhbGFuY2VPZjxUPgAEGJxBIG1lbWJlciBoYXMgd2l0aGRyYXduIGZyb20gdGhlaXIgcG9vbC4AIQFUaGUgZ2l2ZW4gbnVtYmVyIG9mIGBwb2ludHNgIGhhdmUgYmVlbiBkaXNzb2x2ZWQgaW4gcmV0dXJuIG9mIGBiYWxhbmNlYC4AWQFTaW1pbGFyIHRvIGBVbmJvbmRlZGAgZXZlbnQsIGluIHRoZSBhYnNlbmNlIG9mIHNsYXNoaW5nLCB0aGUgcmF0aW8gb2YgcG9pbnQgdG8gYmFsYW5jZSh3aWxsIGJlIDEuJERlc3Ryb3llZAQBHHBvb2xfaWQQARhQb29sSWQABQRoQSBwb29sIGhhcyBiZWVuIGRlc3Ryb3llZC4wU3RhdGVDaGFuZ2VkCAEccG9vbF9pZBABGFBvb2xJZAABJG5ld19zdGF0ZSEEASRQb29sU3RhdGUABgR8VGhlIHN0YXRlIG9mIGEgcG9vbCBoYXMgY2hhbmdlZDRNZW1iZXJSZW1vdmVkCAEccG9vbF9pZBABGFBvb2xJZAABGG1lbWJlcgABMFQ6OkFjY291bnRJZAAHDJhBIG1lbWJlciBoYXMgYmVlbiByZW1vdmVkIGZyb20gYSBwb29sLgBRAVRoZSByZW1vdmFsIGNhbiBiZSB2b2x1bnRhcnkgKHdpdGhkcmF3biBhbGwgdW5ib25kZWQgZnVuZHMpIG9yIGludm9sdW50YXJ5IChraWNrZWQpLjBSb2xlc1VwZGF0ZWQMARByb290/QEBUE9wdGlvbjxUOjpBY2NvdW50SWQ+AAEcYm91bmNlcv0BAVBPcHRpb248VDo6QWNjb3VudElkPgABJG5vbWluYXRvcv0BAVBPcHRpb248VDo6QWNjb3VudElkPgAICFUBVGhlIHJvbGVzIG9mIGEgcG9vbCBoYXZlIGJlZW4gdXBkYXRlZCB0byB0aGUgZ2l2ZW4gbmV3IHJvbGVzLiBOb3RlIHRoYXQgdGhlIGRlcG9zaXRvckRjYW4gbmV2ZXIgY2hhbmdlLixQb29sU2xhc2hlZAgBHHBvb2xfaWQQARhQb29sSWQAARxiYWxhbmNlGAEwQmFsYW5jZU9mPFQ+AAkEDQFUaGUgYWN0aXZlIGJhbGFuY2Ugb2YgcG9vbCBgcG9vbF9pZGAgaGFzIGJlZW4gc2xhc2hlZCB0byBgYmFsYW5jZWAuUFVuYm9uZGluZ1Bvb2xTbGFzaGVkDAEccG9vbF9pZBABGFBvb2xJZAABDGVyYRABIEVyYUluZGV4AAEcYmFsYW5jZRgBMEJhbGFuY2VPZjxUPgAKBCUBVGhlIHVuYm9uZCBwb29sIGF0IGBlcmFgIG9mIHBvb2wgYHBvb2xfaWRgIGhhcyBiZWVuIHNsYXNoZWQgdG8gYGJhbGFuY2VgLlRQb29sQ29tbWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEcY3VycmVudDkEAXxPcHRpb248KFBlcmJpbGwsIFQ6OkFjY291bnRJZCk+AAsEtEEgcG9vbCdzIGNvbW1pc3Npb24gc2V0dGluZyBoYXMgYmVlbiBjaGFuZ2VkLmBQb29sTWF4Q29tbWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAE4bWF4X2NvbW1pc3Npb26sARxQZXJiaWxsAAwE1EEgcG9vbCdzIG1heGltdW0gY29tbWlzc2lvbiBzZXR0aW5nIGhhcyBiZWVuIGNoYW5nZWQufFBvb2xDb21taXNzaW9uQ2hhbmdlUmF0ZVVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEsY2hhbmdlX3JhdGVBBAGcQ29tbWlzc2lvbkNoYW5nZVJhdGU8QmxvY2tOdW1iZXJGb3I8VD4+AA0EzEEgcG9vbCdzIGNvbW1pc3Npb24gYGNoYW5nZV9yYXRlYCBoYXMgYmVlbiBjaGFuZ2VkLpBQb29sQ29tbWlzc2lvbkNsYWltUGVybWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEocGVybWlzc2lvbkUEAbxPcHRpb248Q29tbWlzc2lvbkNsYWltUGVybWlzc2lvbjxUOjpBY2NvdW50SWQ+PgAOBMhQb29sIGNvbW1pc3Npb24gY2xhaW0gcGVybWlzc2lvbiBoYXMgYmVlbiB1cGRhdGVkLlRQb29sQ29tbWlzc2lvbkNsYWltZWQIARxwb29sX2lkEAEYUG9vbElkAAEoY29tbWlzc2lvbhgBMEJhbGFuY2VPZjxUPgAPBIRQb29sIGNvbW1pc3Npb24gaGFzIGJlZW4gY2xhaW1lZC5kTWluQmFsYW5jZURlZmljaXRBZGp1c3RlZAgBHHBvb2xfaWQQARhQb29sSWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AEATIVG9wcGVkIHVwIGRlZmljaXQgaW4gZnJvemVuIEVEIG9mIHRoZSByZXdhcmQgcG9vbC5gTWluQmFsYW5jZUV4Y2Vzc0FkanVzdGVkCAEccG9vbF9pZBABGFBvb2xJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgARBLxDbGFpbWVkIGV4Y2VzcyBmcm96ZW4gRUQgb2YgYWYgdGhlIHJld2FyZCBwb29sLgRYRXZlbnRzIG9mIHRoaXMgcGFsbGV0LmUHDExwYWxsZXRfZmFzdF91bnN0YWtlGHBhbGxldBRFdmVudAQEVAABFCBVbnN0YWtlZAgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYcmVzdWx0iAE4RGlzcGF0Y2hSZXN1bHQAAARYQSBzdGFrZXIgd2FzIHVuc3Rha2VkLhxTbGFzaGVkCAEUc3Rhc2gAATBUOjpBY2NvdW50SWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAQQZAUEgc3Rha2VyIHdhcyBzbGFzaGVkIGZvciByZXF1ZXN0aW5nIGZhc3QtdW5zdGFrZSB3aGlsc3QgYmVpbmcgZXhwb3NlZC4wQmF0Y2hDaGVja2VkBAEQZXJhc+UBATRWZWM8RXJhSW5kZXg+AAIERQFBIGJhdGNoIHdhcyBwYXJ0aWFsbHkgY2hlY2tlZCBmb3IgdGhlIGdpdmVuIGVyYXMsIGJ1dCB0aGUgcHJvY2VzcyBkaWQgbm90IGZpbmlzaC40QmF0Y2hGaW5pc2hlZAQBEHNpemUQAQx1MzIAAxCcQSBiYXRjaCBvZiBhIGdpdmVuIHNpemUgd2FzIHRlcm1pbmF0ZWQuAFUBVGhpcyBpcyBhbHdheXMgZm9sbG93cyBieSBhIG51bWJlciBvZiBgVW5zdGFrZWRgIG9yIGBTbGFzaGVkYCBldmVudHMsIG1hcmtpbmcgdGhlIGVuZOhvZiB0aGUgYmF0Y2guIEEgbmV3IGJhdGNoIHdpbGwgYmUgY3JlYXRlZCB1cG9uIG5leHQgYmxvY2suNEludGVybmFsRXJyb3IABAToQW4gaW50ZXJuYWwgZXJyb3IgaGFwcGVuZWQuIE9wZXJhdGlvbnMgd2lsbCBiZSBwYXVzZWQgbm93LgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldGkHEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkaW5jbHVzaW9uGHBhbGxldBRFdmVudAQEVAABEDxDYW5kaWRhdGVCYWNrZWQQAG0HAWRDYW5kaWRhdGVSZWNlaXB0PFQ6Okhhc2g+AADZBAEgSGVhZERhdGEAAHEHASRDb3JlSW5kZXgAAHUHAShHcm91cEluZGV4AAAEwEEgY2FuZGlkYXRlIHdhcyBiYWNrZWQuIGBbY2FuZGlkYXRlLCBoZWFkX2RhdGFdYERDYW5kaWRhdGVJbmNsdWRlZBAAbQcBZENhbmRpZGF0ZVJlY2VpcHQ8VDo6SGFzaD4AANkEASBIZWFkRGF0YQAAcQcBJENvcmVJbmRleAAAdQcBKEdyb3VwSW5kZXgAAQTIQSBjYW5kaWRhdGUgd2FzIGluY2x1ZGVkLiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWBEQ2FuZGlkYXRlVGltZWRPdXQMAG0HAWRDYW5kaWRhdGVSZWNlaXB0PFQ6Okhhc2g+AADZBAEgSGVhZERhdGEAAHEHASRDb3JlSW5kZXgAAgS8QSBjYW5kaWRhdGUgdGltZWQgb3V0LiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWBYVXB3YXJkTWVzc2FnZXNSZWNlaXZlZAgBEGZyb22NAgEYUGFyYUlkAAEUY291bnQQAQx1MzIAAwT4U29tZSB1cHdhcmQgbWVzc2FnZXMgaGF2ZSBiZWVuIHJlY2VpdmVkIGFuZCB3aWxsIGJlIHByb2Nlc3NlZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRtBwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N0BDYW5kaWRhdGVSZWNlaXB0BARIATQACAEoZGVzY3JpcHRvcq0EAVhDYW5kaWRhdGVEZXNjcmlwdG9yPEg+AAFAY29tbWl0bWVudHNfaGFzaDQBEEhhc2gAAHEHDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3JENvcmVJbmRleAAABAAQAQx1MzIAAHUHDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3KEdyb3VwSW5kZXgAAAQAEAEMdTMyAAB5BxBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzGHBhbGxldBRFdmVudAABIEhDdXJyZW50Q29kZVVwZGF0ZWQEAI0CARhQYXJhSWQAAATMQ3VycmVudCBjb2RlIGhhcyBiZWVuIHVwZGF0ZWQgZm9yIGEgUGFyYS4gYHBhcmFfaWRgSEN1cnJlbnRIZWFkVXBkYXRlZAQAjQIBGFBhcmFJZAABBMxDdXJyZW50IGhlYWQgaGFzIGJlZW4gdXBkYXRlZCBmb3IgYSBQYXJhLiBgcGFyYV9pZGBQQ29kZVVwZ3JhZGVTY2hlZHVsZWQEAI0CARhQYXJhSWQAAgTcQSBjb2RlIHVwZ3JhZGUgaGFzIGJlZW4gc2NoZWR1bGVkIGZvciBhIFBhcmEuIGBwYXJhX2lkYDBOZXdIZWFkTm90ZWQEAI0CARhQYXJhSWQAAwS8QSBuZXcgaGVhZCBoYXMgYmVlbiBub3RlZCBmb3IgYSBQYXJhLiBgcGFyYV9pZGAwQWN0aW9uUXVldWVkCACNAgEYUGFyYUlkAAAQATBTZXNzaW9uSW5kZXgABATwQSBwYXJhIGhhcyBiZWVuIHF1ZXVlZCB0byBleGVjdXRlIHBlbmRpbmcgYWN0aW9ucy4gYHBhcmFfaWRgPFB2ZkNoZWNrU3RhcnRlZAgAuQQBSFZhbGlkYXRpb25Db2RlSGFzaAAAjQIBGFBhcmFJZAAFCFUBVGhlIGdpdmVuIHBhcmEgZWl0aGVyIGluaXRpYXRlZCBvciBzdWJzY3JpYmVkIHRvIGEgUFZGIGNoZWNrIGZvciB0aGUgZ2l2ZW4gdmFsaWRhdGlvbmxjb2RlLiBgY29kZV9oYXNoYCBgcGFyYV9pZGBAUHZmQ2hlY2tBY2NlcHRlZAgAuQQBSFZhbGlkYXRpb25Db2RlSGFzaAAAjQIBGFBhcmFJZAAGCBEBVGhlIGdpdmVuIHZhbGlkYXRpb24gY29kZSB3YXMgYWNjZXB0ZWQgYnkgdGhlIFBWRiBwcmUtY2hlY2tpbmcgdm90ZS5UYGNvZGVfaGFzaGAgYHBhcmFfaWRgQFB2ZkNoZWNrUmVqZWN0ZWQIALkEAUhWYWxpZGF0aW9uQ29kZUhhc2gAAI0CARhQYXJhSWQABwgRAVRoZSBnaXZlbiB2YWxpZGF0aW9uIGNvZGUgd2FzIHJlamVjdGVkIGJ5IHRoZSBQVkYgcHJlLWNoZWNraW5nIHZvdGUuVGBjb2RlX2hhc2hgIGBwYXJhX2lkYAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldH0HEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMQaHJtcBhwYWxsZXQURXZlbnQEBFQAARxQT3BlbkNoYW5uZWxSZXF1ZXN0ZWQQARhzZW5kZXKNAgEYUGFyYUlkAAEkcmVjaXBpZW50jQIBGFBhcmFJZAABVHByb3Bvc2VkX21heF9jYXBhY2l0eRABDHUzMgABZHByb3Bvc2VkX21heF9tZXNzYWdlX3NpemUQAQx1MzIAAARwT3BlbiBIUk1QIGNoYW5uZWwgcmVxdWVzdGVkLkxPcGVuQ2hhbm5lbENhbmNlbGVkCAEwYnlfcGFyYWNoYWlujQIBGFBhcmFJZAABKGNoYW5uZWxfaWQZBQE0SHJtcENoYW5uZWxJZAABBCkBQW4gSFJNUCBjaGFubmVsIHJlcXVlc3Qgc2VudCBieSB0aGUgcmVjZWl2ZXIgd2FzIGNhbmNlbGVkIGJ5IGVpdGhlciBwYXJ0eS5MT3BlbkNoYW5uZWxBY2NlcHRlZAgBGHNlbmRlco0CARhQYXJhSWQAASRyZWNpcGllbnSNAgEYUGFyYUlkAAIEbE9wZW4gSFJNUCBjaGFubmVsIGFjY2VwdGVkLjRDaGFubmVsQ2xvc2VkCAEwYnlfcGFyYWNoYWlujQIBGFBhcmFJZAABKGNoYW5uZWxfaWQZBQE0SHJtcENoYW5uZWxJZAADBFBIUk1QIGNoYW5uZWwgY2xvc2VkLlhIcm1wQ2hhbm5lbEZvcmNlT3BlbmVkEAEYc2VuZGVyjQIBGFBhcmFJZAABJHJlY2lwaWVudI0CARhQYXJhSWQAAVRwcm9wb3NlZF9tYXhfY2FwYWNpdHkQAQx1MzIAAWRwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplEAEMdTMyAAQErEFuIEhSTVAgY2hhbm5lbCB3YXMgb3BlbmVkIHZpYSBSb290IG9yaWdpbi5cSHJtcFN5c3RlbUNoYW5uZWxPcGVuZWQQARhzZW5kZXKNAgEYUGFyYUlkAAEkcmVjaXBpZW50jQIBGFBhcmFJZAABVHByb3Bvc2VkX21heF9jYXBhY2l0eRABDHUzMgABZHByb3Bvc2VkX21heF9tZXNzYWdlX3NpemUQAQx1MzIABQS8QW4gSFJNUCBjaGFubmVsIHdhcyBvcGVuZWQgd2l0aCBhIHN5c3RlbSBjaGFpbi5oT3BlbkNoYW5uZWxEZXBvc2l0c1VwZGF0ZWQIARhzZW5kZXKNAgEYUGFyYUlkAAEkcmVjaXBpZW50jQIBGFBhcmFJZAAGBKBBbiBIUk1QIGNoYW5uZWwncyBkZXBvc2l0cyB3ZXJlIHVwZGF0ZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0gQcQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBkaXNwdXRlcxhwYWxsZXQURXZlbnQEBFQAAQxARGlzcHV0ZUluaXRpYXRlZAgA7QQBNENhbmRpZGF0ZUhhc2gAAIUHATxEaXNwdXRlTG9jYXRpb24AAAQJAUEgZGlzcHV0ZSBoYXMgYmVlbiBpbml0aWF0ZWQuIFxbY2FuZGlkYXRlIGhhc2gsIGRpc3B1dGUgbG9jYXRpb25cXUBEaXNwdXRlQ29uY2x1ZGVkCADtBAE0Q2FuZGlkYXRlSGFzaAAAiQcBNERpc3B1dGVSZXN1bHQAAQjMQSBkaXNwdXRlIGhhcyBjb25jbHVkZWQgZm9yIG9yIGFnYWluc3QgYSBjYW5kaWRhdGUutGBcW3BhcmEgaWQsIGNhbmRpZGF0ZSBoYXNoLCBkaXNwdXRlIHJlc3VsdFxdYBhSZXZlcnQEABABREJsb2NrTnVtYmVyRm9yPFQ+AAIQ/EEgZGlzcHV0ZSBoYXMgY29uY2x1ZGVkIHdpdGggc3VwZXJtYWpvcml0eSBhZ2FpbnN0IGEgY2FuZGlkYXRlLg0BQmxvY2sgYXV0aG9ycyBzaG91bGQgbm8gbG9uZ2VyIGJ1aWxkIG9uIHRvcCBvZiB0aGlzIGhlYWQgYW5kIHNob3VsZAEBaW5zdGVhZCByZXZlcnQgdGhlIGJsb2NrIGF0IHRoZSBnaXZlbiBoZWlnaHQuIFRoaXMgc2hvdWxkIGJlIHRoZfxudW1iZXIgb2YgdGhlIGNoaWxkIG9mIHRoZSBsYXN0IGtub3duIHZhbGlkIGJsb2NrIGluIHRoZSBjaGFpbi4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXSFBwxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zIGRpc3B1dGVzPERpc3B1dGVMb2NhdGlvbgABCBRMb2NhbAAAABhSZW1vdGUAAQAAiQcMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBkaXNwdXRlczREaXNwdXRlUmVzdWx0AAEIFFZhbGlkAAAAHEludmFsaWQAAQAAjQcQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0hhc3NpZ25lcl9vbl9kZW1hbmQYcGFsbGV0FEV2ZW50BARUAAEITE9uRGVtYW5kT3JkZXJQbGFjZWQMARxwYXJhX2lkjQIBGFBhcmFJZAABKHNwb3RfcHJpY2UYATBCYWxhbmNlT2Y8VD4AAShvcmRlcmVkX2J5AAEwVDo6QWNjb3VudElkAAAEDQFBbiBvcmRlciB3YXMgcGxhY2VkIGF0IHNvbWUgc3BvdCBwcmljZSBhbW91bnQgYnkgb3JkZXJlciBvcmRlcmVkX2J5MFNwb3RQcmljZVNldAQBKHNwb3RfcHJpY2UYATBCYWxhbmNlT2Y8VD4AAQS4VGhlIHZhbHVlIG9mIHRoZSBzcG90IHByaWNlIGhhcyBsaWtlbHkgY2hhbmdlZAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldJEHEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIYcGFsbGV0FEV2ZW50BARUAAEQKFJlZ2lzdGVyZWQIARxwYXJhX2lkjQIBGFBhcmFJZAABHG1hbmFnZXIAATBUOjpBY2NvdW50SWQAAAAwRGVyZWdpc3RlcmVkBAEccGFyYV9pZI0CARhQYXJhSWQAAQAgUmVzZXJ2ZWQIARxwYXJhX2lkjQIBGFBhcmFJZAABDHdobwABMFQ6OkFjY291bnRJZAACABxTd2FwcGVkCAEccGFyYV9pZI0CARhQYXJhSWQAASBvdGhlcl9pZI0CARhQYXJhSWQAAwAEfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXSVBxBccG9sa2Fkb3RfcnVudGltZV9jb21tb24Uc2xvdHMYcGFsbGV0FEV2ZW50BARUAAEIOE5ld0xlYXNlUGVyaW9kBAEwbGVhc2VfcGVyaW9kEAFATGVhc2VQZXJpb2RPZjxUPgAABJBBIG5ldyBgW2xlYXNlX3BlcmlvZF1gIGlzIGJlZ2lubmluZy4YTGVhc2VkGAEccGFyYV9pZI0CARhQYXJhSWQAARhsZWFzZXIAATBUOjpBY2NvdW50SWQAATBwZXJpb2RfYmVnaW4QAUBMZWFzZVBlcmlvZE9mPFQ+AAEwcGVyaW9kX2NvdW50EAFATGVhc2VQZXJpb2RPZjxUPgABOGV4dHJhX3Jlc2VydmVkGAEwQmFsYW5jZU9mPFQ+AAEwdG90YWxfYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEMNQFBIHBhcmEgaGFzIHdvbiB0aGUgcmlnaHQgdG8gYSBjb250aW51b3VzIHNldCBvZiBsZWFzZSBwZXJpb2RzIGFzIGEgcGFyYWNoYWluLkUBRmlyc3QgYmFsYW5jZSBpcyBhbnkgZXh0cmEgYW1vdW50IHJlc2VydmVkIG9uIHRvcCBvZiB0aGUgcGFyYSdzIGV4aXN0aW5nIGRlcG9zaXQusFNlY29uZCBiYWxhbmNlIGlzIHRoZSB0b3RhbCBhbW91bnQgcmVzZXJ2ZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0mQcQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uIGF1Y3Rpb25zGHBhbGxldBRFdmVudAQEVAABHDhBdWN0aW9uU3RhcnRlZAwBNGF1Y3Rpb25faW5kZXgQATBBdWN0aW9uSW5kZXgAATBsZWFzZV9wZXJpb2QQAUBMZWFzZVBlcmlvZE9mPFQ+AAEYZW5kaW5nEAFEQmxvY2tOdW1iZXJGb3I8VD4AAAhJAUFuIGF1Y3Rpb24gc3RhcnRlZC4gUHJvdmlkZXMgaXRzIGluZGV4IGFuZCB0aGUgYmxvY2sgbnVtYmVyIHdoZXJlIGl0IHdpbGwgYmVnaW4gdG8VAWNsb3NlIGFuZCB0aGUgZmlyc3QgbGVhc2UgcGVyaW9kIG9mIHRoZSBxdWFkcnVwbGV0IHRoYXQgaXMgYXVjdGlvbmVkLjRBdWN0aW9uQ2xvc2VkBAE0YXVjdGlvbl9pbmRleBABMEF1Y3Rpb25JbmRleAABBLhBbiBhdWN0aW9uIGVuZGVkLiBBbGwgZnVuZHMgYmVjb21lIHVucmVzZXJ2ZWQuIFJlc2VydmVkDAEYYmlkZGVyAAEwVDo6QWNjb3VudElkAAE4ZXh0cmFfcmVzZXJ2ZWQYATBCYWxhbmNlT2Y8VD4AATB0b3RhbF9hbW91bnQYATBCYWxhbmNlT2Y8VD4AAghJAUZ1bmRzIHdlcmUgcmVzZXJ2ZWQgZm9yIGEgd2lubmluZyBiaWQuIEZpcnN0IGJhbGFuY2UgaXMgdGhlIGV4dHJhIGFtb3VudCByZXNlcnZlZC5QU2Vjb25kIGlzIHRoZSB0b3RhbC4oVW5yZXNlcnZlZAgBGGJpZGRlcgABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgADBCkBRnVuZHMgd2VyZSB1bnJlc2VydmVkIHNpbmNlIGJpZGRlciBpcyBubyBsb25nZXIgYWN0aXZlLiBgW2JpZGRlciwgYW1vdW50XWBIUmVzZXJ2ZUNvbmZpc2NhdGVkDAEccGFyYV9pZI0CARhQYXJhSWQAARhsZWFzZXIAATBUOjpBY2NvdW50SWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4ABAhVAVNvbWVvbmUgYXR0ZW1wdGVkIHRvIGxlYXNlIHRoZSBzYW1lIHNsb3QgdHdpY2UgZm9yIGEgcGFyYWNoYWluLiBUaGUgYW1vdW50IGlzIGhlbGQgaW64cmVzZXJ2ZSBidXQgbm8gcGFyYWNoYWluIHNsb3QgaGFzIGJlZW4gbGVhc2VkLixCaWRBY2NlcHRlZBQBGGJpZGRlcgABMFQ6OkFjY291bnRJZAABHHBhcmFfaWSNAgEYUGFyYUlkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEoZmlyc3Rfc2xvdBABQExlYXNlUGVyaW9kT2Y8VD4AASRsYXN0X3Nsb3QQAUBMZWFzZVBlcmlvZE9mPFQ+AAUEyEEgbmV3IGJpZCBoYXMgYmVlbiBhY2NlcHRlZCBhcyB0aGUgY3VycmVudCB3aW5uZXIuNFdpbm5pbmdPZmZzZXQIATRhdWN0aW9uX2luZGV4EAEwQXVjdGlvbkluZGV4AAEwYmxvY2tfbnVtYmVyEAFEQmxvY2tOdW1iZXJGb3I8VD4ABghZAVRoZSB3aW5uaW5nIG9mZnNldCB3YXMgY2hvc2VuIGZvciBhbiBhdWN0aW9uLiBUaGlzIHdpbGwgbWFwIGludG8gdGhlIGBXaW5uaW5nYCBzdG9yYWdlEG1hcC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXSdBxBccG9sa2Fkb3RfcnVudGltZV9jb21tb24kY3Jvd2Rsb2FuGHBhbGxldBRFdmVudAQEVAABKBxDcmVhdGVkBAEccGFyYV9pZI0CARhQYXJhSWQAAASMQ3JlYXRlIGEgbmV3IGNyb3dkbG9hbmluZyBjYW1wYWlnbi4sQ29udHJpYnV0ZWQMAQx3aG8AATBUOjpBY2NvdW50SWQAAShmdW5kX2luZGV4jQIBGFBhcmFJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABBHBDb250cmlidXRlZCB0byBhIGNyb3dkIHNhbGUuIFdpdGhkcmV3DAEMd2hvAAEwVDo6QWNjb3VudElkAAEoZnVuZF9pbmRleI0CARhQYXJhSWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAgScV2l0aGRyZXcgZnVsbCBiYWxhbmNlIG9mIGEgY29udHJpYnV0b3IuRFBhcnRpYWxseVJlZnVuZGVkBAEccGFyYV9pZI0CARhQYXJhSWQAAwgtAVRoZSBsb2FucyBpbiBhIGZ1bmQgaGF2ZSBiZWVuIHBhcnRpYWxseSBkaXNzb2x2ZWQsIGkuZS4gdGhlcmUgYXJlIHNvbWUgbGVmdLRvdmVyIGNoaWxkIGtleXMgdGhhdCBzdGlsbCBuZWVkIHRvIGJlIGtpbGxlZC4sQWxsUmVmdW5kZWQEARxwYXJhX2lkjQIBGFBhcmFJZAAEBJxBbGwgbG9hbnMgaW4gYSBmdW5kIGhhdmUgYmVlbiByZWZ1bmRlZC4kRGlzc29sdmVkBAEccGFyYV9pZI0CARhQYXJhSWQABQRIRnVuZCBpcyBkaXNzb2x2ZWQuPEhhbmRsZUJpZFJlc3VsdAgBHHBhcmFfaWSNAgEYUGFyYUlkAAEYcmVzdWx0iAE4RGlzcGF0Y2hSZXN1bHQABgT0VGhlIHJlc3VsdCBvZiB0cnlpbmcgdG8gc3VibWl0IGEgbmV3IGJpZCB0byB0aGUgU2xvdHMgcGFsbGV0LhhFZGl0ZWQEARxwYXJhX2lkjQIBGFBhcmFJZAAHBMRUaGUgY29uZmlndXJhdGlvbiB0byBhIGNyb3dkbG9hbiBoYXMgYmVlbiBlZGl0ZWQuLE1lbW9VcGRhdGVkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEccGFyYV9pZI0CARhQYXJhSWQAARBtZW1vOAEcVmVjPHU4PgAIBGBBIG1lbW8gaGFzIGJlZW4gdXBkYXRlZC48QWRkZWRUb05ld1JhaXNlBAEccGFyYV9pZI0CARhQYXJhSWQACQSgQSBwYXJhY2hhaW4gaGFzIGJlZW4gbW92ZWQgdG8gYE5ld1JhaXNlYAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldKEHEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgY29yZXRpbWUYcGFsbGV0FEV2ZW50BARUAAEIUFJldmVudWVJbmZvUmVxdWVzdGVkBAEQd2hlbhABREJsb2NrTnVtYmVyRm9yPFQ+AAAEIQFUaGUgYnJva2VyIGNoYWluIGhhcyBhc2tlZCBmb3IgcmV2ZW51ZSBpbmZvcm1hdGlvbiBmb3IgYSBzcGVjaWZpYyBibG9jay4wQ29yZUFzc2lnbmVkBAEQY29yZXEHASRDb3JlSW5kZXgAAQTsQSBjb3JlIGhhcyByZWNlaXZlZCBhIG5ldyBhc3NpZ25tZW50IGZyb20gdGhlIGJyb2tlciBjaGFpbi4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXSlBwxscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uGHBhbGxldBRFdmVudAQEVAABECBNaWdyYXRlZAwBDHRvcBABDHUzMgABFGNoaWxkEAEMdTMyAAEcY29tcHV0ZakHAUBNaWdyYXRpb25Db21wdXRlAAAIOQFHaXZlbiBudW1iZXIgb2YgYCh0b3AsIGNoaWxkKWAga2V5cyB3ZXJlIG1pZ3JhdGVkIHJlc3BlY3RpdmVseSwgd2l0aCB0aGUgZ2l2ZW4oYGNvbXB1dGVgLhxTbGFzaGVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEEtFNvbWUgYWNjb3VudCBnb3Qgc2xhc2hlZCBieSB0aGUgZ2l2ZW4gYW1vdW50LlRBdXRvTWlncmF0aW9uRmluaXNoZWQAAgSEVGhlIGF1dG8gbWlncmF0aW9uIHRhc2sgZmluaXNoZWQuGEhhbHRlZAQBFGVycm9yrQcBIEVycm9yPFQ+AAME7E1pZ3JhdGlvbiBnb3QgaGFsdGVkIGR1ZSB0byBhbiBlcnJvciBvciBtaXNzLWNvbmZpZ3VyYXRpb24uBHBJbm5lciBldmVudHMgb2YgdGhpcyBwYWxsZXQuqQcMbHBhbGxldF9zdGF0ZV90cmllX21pZ3JhdGlvbhhwYWxsZXRATWlncmF0aW9uQ29tcHV0ZQABCBhTaWduZWQAAAAQQXV0bwABAACtBwxscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uGHBhbGxldBRFcnJvcgQEVAABGDxNYXhTaWduZWRMaW1pdHMAAASATWF4IHNpZ25lZCBsaW1pdHMgbm90IHJlc3BlY3RlZC4oS2V5VG9vTG9uZwABHLRBIGtleSB3YXMgbG9uZ2VyIHRoYW4gdGhlIGNvbmZpZ3VyZWQgbWF4aW11bS4AEQFUaGlzIG1lYW5zIHRoYXQgdGhlIG1pZ3JhdGlvbiBoYWx0ZWQgYXQgdGhlIGN1cnJlbnQgW2BQcm9ncmVzc2BdIGFuZAEBY2FuIGJlIHJlc3VtZWQgd2l0aCBhIGxhcmdlciBbYGNyYXRlOjpDb25maWc6Ok1heEtleUxlbmBdIHZhbHVlLiEBUmV0cnlpbmcgd2l0aCB0aGUgc2FtZSBbYGNyYXRlOjpDb25maWc6Ok1heEtleUxlbmBdIHZhbHVlIHdpbGwgbm90IHdvcmsuRQFUaGUgdmFsdWUgc2hvdWxkIG9ubHkgYmUgaW5jcmVhc2VkIHRvIGF2b2lkIGEgc3RvcmFnZSBtaWdyYXRpb24gZm9yIHRoZSBjdXJyZW50bHmQc3RvcmVkIFtgY3JhdGU6OlByb2dyZXNzOjpMYXN0S2V5YF0uOE5vdEVub3VnaEZ1bmRzAAIElHN1Ym1pdHRlciBkb2VzIG5vdCBoYXZlIGVub3VnaCBmdW5kcy4oQmFkV2l0bmVzcwADBGhCYWQgd2l0bmVzcyBkYXRhIHByb3ZpZGVkLmRTaWduZWRNaWdyYXRpb25Ob3RBbGxvd2VkAAQEJQFTaWduZWQgbWlncmF0aW9uIGlzIG5vdCBhbGxvd2VkIGJlY2F1c2UgdGhlIG1heGltdW0gbGltaXQgaXMgbm90IHNldCB5ZXQuMEJhZENoaWxkUm9vdAAFBGBCYWQgY2hpbGQgcm9vdCBwcm92aWRlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQusQcMKHBhbGxldF94Y20YcGFsbGV0FEV2ZW50BARUAAFgJEF0dGVtcHRlZAQBHG91dGNvbWW1BwFQeGNtOjpsYXRlc3Q6Ok91dGNvbWUAAASoRXhlY3V0aW9uIG9mIGFuIFhDTSBtZXNzYWdlIHdhcyBhdHRlbXB0ZWQuEFNlbnQQARhvcmlnaW4NAQEgTG9jYXRpb24AASxkZXN0aW5hdGlvbg0BASBMb2NhdGlvbgABHG1lc3NhZ2VBBgEcWGNtPCgpPgABKG1lc3NhZ2VfaWQEARxYY21IYXNoAAEEXEEgWENNIG1lc3NhZ2Ugd2FzIHNlbnQuSFVuZXhwZWN0ZWRSZXNwb25zZQgBGG9yaWdpbg0BASBMb2NhdGlvbgABIHF1ZXJ5X2lkMAEcUXVlcnlJZAACDFkBUXVlcnkgcmVzcG9uc2UgcmVjZWl2ZWQgd2hpY2ggZG9lcyBub3QgbWF0Y2ggYSByZWdpc3RlcmVkIHF1ZXJ5LiBUaGlzIG1heSBiZSBiZWNhdXNlIGFVAW1hdGNoaW5nIHF1ZXJ5IHdhcyBuZXZlciByZWdpc3RlcmVkLCBpdCBtYXkgYmUgYmVjYXVzZSBpdCBpcyBhIGR1cGxpY2F0ZSByZXNwb25zZSwgb3JwYmVjYXVzZSB0aGUgcXVlcnkgdGltZWQgb3V0LjRSZXNwb25zZVJlYWR5CAEgcXVlcnlfaWQwARxRdWVyeUlkAAEgcmVzcG9uc2VhBgEgUmVzcG9uc2UAAwhdAVF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBpcyByZWFkeSBmb3IgdGFraW5nIHdpdGggYHRha2VfcmVzcG9uc2VgLiBUaGVyZSBpc4BubyByZWdpc3RlcmVkIG5vdGlmaWNhdGlvbiBjYWxsLiBOb3RpZmllZAwBIHF1ZXJ5X2lkMAEcUXVlcnlJZAABMHBhbGxldF9pbmRleAgBCHU4AAEoY2FsbF9pbmRleAgBCHU4AAQIWQFRdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBhbmQgcXVlcnkgaXMgcmVtb3ZlZC4gVGhlIHJlZ2lzdGVyZWQgbm90aWZpY2F0aW9uIGhhc6hiZWVuIGRpc3BhdGNoZWQgYW5kIGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseS5ATm90aWZ5T3ZlcndlaWdodBQBIHF1ZXJ5X2lkMAEcUXVlcnlJZAABMHBhbGxldF9pbmRleAgBCHU4AAEoY2FsbF9pbmRleAgBCHU4AAE0YWN0dWFsX3dlaWdodCgBGFdlaWdodAABTG1heF9idWRnZXRlZF93ZWlnaHQoARhXZWlnaHQABQxJAVF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBxdWVyeSBpcyByZW1vdmVkLiBUaGUgcmVnaXN0ZXJlZCBub3RpZmljYXRpb25ZAWNvdWxkIG5vdCBiZSBkaXNwYXRjaGVkIGJlY2F1c2UgdGhlIGRpc3BhdGNoIHdlaWdodCBpcyBncmVhdGVyIHRoYW4gdGhlIG1heGltdW0gd2VpZ2h05G9yaWdpbmFsbHkgYnVkZ2V0ZWQgYnkgdGhpcyBydW50aW1lIGZvciB0aGUgcXVlcnkgcmVzdWx0LkxOb3RpZnlEaXNwYXRjaEVycm9yDAEgcXVlcnlfaWQwARxRdWVyeUlkAAEwcGFsbGV0X2luZGV4CAEIdTgAAShjYWxsX2luZGV4CAEIdTgABghVAVF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBxdWVyeSBpcyByZW1vdmVkLiBUaGVyZSB3YXMgYSBnZW5lcmFsIGVycm9yIHdpdGiIZGlzcGF0Y2hpbmcgdGhlIG5vdGlmaWNhdGlvbiBjYWxsLkhOb3RpZnlEZWNvZGVGYWlsZWQMASBxdWVyeV9pZDABHFF1ZXJ5SWQAATBwYWxsZXRfaW5kZXgIAQh1OAABKGNhbGxfaW5kZXgIAQh1OAAHDFEBUXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIHF1ZXJ5IGlzIHJlbW92ZWQuIFRoZSBkaXNwYXRjaCB3YXMgdW5hYmxlIHRvIGJlWQFkZWNvZGVkIGludG8gYSBgQ2FsbGA7IHRoaXMgbWlnaHQgYmUgZHVlIHRvIGRpc3BhdGNoIGZ1bmN0aW9uIGhhdmluZyBhIHNpZ25hdHVyZSB3aGljaJRpcyBub3QgYChvcmlnaW4sIFF1ZXJ5SWQsIFJlc3BvbnNlKWAuQEludmFsaWRSZXNwb25kZXIMARhvcmlnaW4NAQEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAAURleHBlY3RlZF9sb2NhdGlvbnUGAUBPcHRpb248TG9jYXRpb24+AAgMWQFFeHBlY3RlZCBxdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBidXQgdGhlIG9yaWdpbiBsb2NhdGlvbiBvZiB0aGUgcmVzcG9uc2UgZG9lc1UBbm90IG1hdGNoIHRoYXQgZXhwZWN0ZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQgZm9yIGEgbGF0ZXIsIHZhbGlkLCByZXNwb25zZSB0b2xiZSByZWNlaXZlZCBhbmQgYWN0ZWQgdXBvbi5cSW52YWxpZFJlc3BvbmRlclZlcnNpb24IARhvcmlnaW4NAQEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQACRxRAUV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgZXhwZWN0ZWQgb3JpZ2luIGxvY2F0aW9uIHBsYWNlZCBpbk0Bc3RvcmFnZSBieSB0aGlzIHJ1bnRpbWUgcHJldmlvdXNseSBjYW5ub3QgYmUgZGVjb2RlZC4gVGhlIHF1ZXJ5IHJlbWFpbnMgcmVnaXN0ZXJlZC4AQQFUaGlzIGlzIHVuZXhwZWN0ZWQgKHNpbmNlIGEgbG9jYXRpb24gcGxhY2VkIGluIHN0b3JhZ2UgaW4gYSBwcmV2aW91c2x5IGV4ZWN1dGluZ00BcnVudGltZSBzaG91bGQgYmUgcmVhZGFibGUgcHJpb3IgdG8gcXVlcnkgdGltZW91dCkgYW5kIGRhbmdlcm91cyBzaW5jZSB0aGUgcG9zc2libHlZAXZhbGlkIHJlc3BvbnNlIHdpbGwgYmUgZHJvcHBlZC4gTWFudWFsIGdvdmVybmFuY2UgaW50ZXJ2ZW50aW9uIGlzIHByb2JhYmx5IGdvaW5nIHRvIGJlHG5lZWRlZC40UmVzcG9uc2VUYWtlbgQBIHF1ZXJ5X2lkMAEcUXVlcnlJZAAKBMhSZWNlaXZlZCBxdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWFkIGFuZCByZW1vdmVkLjRBc3NldHNUcmFwcGVkDAEQaGFzaDQBEEgyNTYAARhvcmlnaW4NAQEgTG9jYXRpb24AARhhc3NldHOJBgE8VmVyc2lvbmVkQXNzZXRzAAsEuFNvbWUgYXNzZXRzIGhhdmUgYmVlbiBwbGFjZWQgaW4gYW4gYXNzZXQgdHJhcC5UVmVyc2lvbkNoYW5nZU5vdGlmaWVkEAEsZGVzdGluYXRpb24NAQEgTG9jYXRpb24AARhyZXN1bHQQAShYY21WZXJzaW9uAAEQY29zdE0GARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAAMDCUBQW4gWENNIHZlcnNpb24gY2hhbmdlIG5vdGlmaWNhdGlvbiBtZXNzYWdlIGhhcyBiZWVuIGF0dGVtcHRlZCB0byBiZSBzZW50LgDgVGhlIGNvc3Qgb2Ygc2VuZGluZyBpdCAoYm9ybmUgYnkgdGhlIGNoYWluKSBpcyBpbmNsdWRlZC5cU3VwcG9ydGVkVmVyc2lvbkNoYW5nZWQIASBsb2NhdGlvbg0BASBMb2NhdGlvbgABHHZlcnNpb24QAShYY21WZXJzaW9uAA0IOQFUaGUgc3VwcG9ydGVkIHZlcnNpb24gb2YgYSBsb2NhdGlvbiBoYXMgYmVlbiBjaGFuZ2VkLiBUaGlzIG1pZ2h0IGJlIHRocm91Z2ggYW7AYXV0b21hdGljIG5vdGlmaWNhdGlvbiBvciBhIG1hbnVhbCBpbnRlcnZlbnRpb24uUE5vdGlmeVRhcmdldFNlbmRGYWlsDAEgbG9jYXRpb24NAQEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAARRlcnJvcgkGASBYY21FcnJvcgAOCFkBQSBnaXZlbiBsb2NhdGlvbiB3aGljaCBoYWQgYSB2ZXJzaW9uIGNoYW5nZSBzdWJzY3JpcHRpb24gd2FzIGRyb3BwZWQgb3dpbmcgdG8gYW4gZXJyb3J8c2VuZGluZyB0aGUgbm90aWZpY2F0aW9uIHRvIGl0LmROb3RpZnlUYXJnZXRNaWdyYXRpb25GYWlsCAEgbG9jYXRpb25FAQFEVmVyc2lvbmVkTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQADwhZAUEgZ2l2ZW4gbG9jYXRpb24gd2hpY2ggaGFkIGEgdmVyc2lvbiBjaGFuZ2Ugc3Vic2NyaXB0aW9uIHdhcyBkcm9wcGVkIG93aW5nIHRvIGFuIGVycm9ytG1pZ3JhdGluZyB0aGUgbG9jYXRpb24gdG8gb3VyIG5ldyBYQ00gZm9ybWF0LlRJbnZhbGlkUXVlcmllclZlcnNpb24IARhvcmlnaW4NAQEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAEBxVAUV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgZXhwZWN0ZWQgcXVlcmllciBsb2NhdGlvbiBwbGFjZWQgaW5NAXN0b3JhZ2UgYnkgdGhpcyBydW50aW1lIHByZXZpb3VzbHkgY2Fubm90IGJlIGRlY29kZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQuAEEBVGhpcyBpcyB1bmV4cGVjdGVkIChzaW5jZSBhIGxvY2F0aW9uIHBsYWNlZCBpbiBzdG9yYWdlIGluIGEgcHJldmlvdXNseSBleGVjdXRpbmdNAXJ1bnRpbWUgc2hvdWxkIGJlIHJlYWRhYmxlIHByaW9yIHRvIHF1ZXJ5IHRpbWVvdXQpIGFuZCBkYW5nZXJvdXMgc2luY2UgdGhlIHBvc3NpYmx5WQF2YWxpZCByZXNwb25zZSB3aWxsIGJlIGRyb3BwZWQuIE1hbnVhbCBnb3Zlcm5hbmNlIGludGVydmVudGlvbiBpcyBwcm9iYWJseSBnb2luZyB0byBiZRxuZWVkZWQuOEludmFsaWRRdWVyaWVyEAEYb3JpZ2luDQEBIExvY2F0aW9uAAEgcXVlcnlfaWQwARxRdWVyeUlkAAFAZXhwZWN0ZWRfcXVlcmllcg0BASBMb2NhdGlvbgABUG1heWJlX2FjdHVhbF9xdWVyaWVydQYBQE9wdGlvbjxMb2NhdGlvbj4AEQxdAUV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgcXVlcmllciBsb2NhdGlvbiBvZiB0aGUgcmVzcG9uc2UgZG9lc1EBbm90IG1hdGNoIHRoZSBleHBlY3RlZC4gVGhlIHF1ZXJ5IHJlbWFpbnMgcmVnaXN0ZXJlZCBmb3IgYSBsYXRlciwgdmFsaWQsIHJlc3BvbnNlIHRvbGJlIHJlY2VpdmVkIGFuZCBhY3RlZCB1cG9uLlBWZXJzaW9uTm90aWZ5U3RhcnRlZAwBLGRlc3RpbmF0aW9uDQEBIExvY2F0aW9uAAEQY29zdE0GARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAASCFkBQSByZW1vdGUgaGFzIHJlcXVlc3RlZCBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9uIGZyb20gdXMgYW5kIHdlIGhhdmUgaG9ub3JlZCBpdC4dAUEgdmVyc2lvbiBpbmZvcm1hdGlvbiBtZXNzYWdlIGlzIHNlbnQgdG8gdGhlbSBhbmQgaXRzIGNvc3QgaXMgaW5jbHVkZWQuWFZlcnNpb25Ob3RpZnlSZXF1ZXN0ZWQMASxkZXN0aW5hdGlvbg0BASBMb2NhdGlvbgABEGNvc3RNBgEYQXNzZXRzAAEobWVzc2FnZV9pZAQBHFhjbUhhc2gAEwQ9AVdlIGhhdmUgcmVxdWVzdGVkIHRoYXQgYSByZW1vdGUgY2hhaW4gc2VuZCB1cyBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9ucy5gVmVyc2lvbk5vdGlmeVVucmVxdWVzdGVkDAEsZGVzdGluYXRpb24NAQEgTG9jYXRpb24AARBjb3N0TQYBGEFzc2V0cwABKG1lc3NhZ2VfaWQEARxYY21IYXNoABQIJQFXZSBoYXZlIHJlcXVlc3RlZCB0aGF0IGEgcmVtb3RlIGNoYWluIHN0b3BzIHNlbmRpbmcgdXMgWENNIHZlcnNpb24gY2hhbmdlOG5vdGlmaWNhdGlvbnMuIEZlZXNQYWlkCAEYcGF5aW5nDQEBIExvY2F0aW9uAAEQZmVlc00GARhBc3NldHMAFQQxAUZlZXMgd2VyZSBwYWlkIGZyb20gYSBsb2NhdGlvbiBmb3IgYW4gb3BlcmF0aW9uIChvZnRlbiBmb3IgdXNpbmcgYFNlbmRYY21gKS40QXNzZXRzQ2xhaW1lZAwBEGhhc2g0ARBIMjU2AAEYb3JpZ2luDQEBIExvY2F0aW9uAAEYYXNzZXRziQYBPFZlcnNpb25lZEFzc2V0cwAWBMBTb21lIGFzc2V0cyBoYXZlIGJlZW4gY2xhaW1lZCBmcm9tIGFuIGFzc2V0IHRyYXBgVmVyc2lvbk1pZ3JhdGlvbkZpbmlzaGVkBAEcdmVyc2lvbhABKFhjbVZlcnNpb24AFwSEQSBYQ00gdmVyc2lvbiBtaWdyYXRpb24gZmluaXNoZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0tQcQLHN0YWdpbmdfeGNtCHY0GHRyYWl0cxxPdXRjb21lAAEMIENvbXBsZXRlBAEQdXNlZCgBGFdlaWdodAAAAChJbmNvbXBsZXRlCAEQdXNlZCgBGFdlaWdodAABFGVycm9yCQYBFEVycm9yAAEAFEVycm9yBAEUZXJyb3IJBgEURXJyb3IAAgAAuQcMUHBhbGxldF9tZXNzYWdlX3F1ZXVlGHBhbGxldBRFdmVudAQEVAABEEBQcm9jZXNzaW5nRmFpbGVkDAEIaWQ0ARBIMjU2BJRUaGUgYGJsYWtlMl8yNTZgIGhhc2ggb2YgdGhlIG1lc3NhZ2UuARhvcmlnaW7FBgFITWVzc2FnZU9yaWdpbk9mPFQ+BGRUaGUgcXVldWUgb2YgdGhlIG1lc3NhZ2UuARRlcnJvcr0HAUxQcm9jZXNzTWVzc2FnZUVycm9yEGBUaGUgZXJyb3IgdGhhdCBvY2N1cnJlZC4ASQFUaGlzIGVycm9yIGlzIHByZXR0eSBvcGFxdWUuIE1vcmUgZmluZS1ncmFpbmVkIGVycm9ycyBuZWVkIHRvIGJlIGVtaXR0ZWQgYXMgZXZlbnRzaGJ5IHRoZSBgTWVzc2FnZVByb2Nlc3NvcmAuAARVAU1lc3NhZ2UgZGlzY2FyZGVkIGR1ZSB0byBhbiBlcnJvciBpbiB0aGUgYE1lc3NhZ2VQcm9jZXNzb3JgICh1c3VhbGx5IGEgZm9ybWF0IGVycm9yKS4kUHJvY2Vzc2VkEAEIaWQ0ARBIMjU2BJRUaGUgYGJsYWtlMl8yNTZgIGhhc2ggb2YgdGhlIG1lc3NhZ2UuARhvcmlnaW7FBgFITWVzc2FnZU9yaWdpbk9mPFQ+BGRUaGUgcXVldWUgb2YgdGhlIG1lc3NhZ2UuASx3ZWlnaHRfdXNlZCgBGFdlaWdodATASG93IG11Y2ggd2VpZ2h0IHdhcyB1c2VkIHRvIHByb2Nlc3MgdGhlIG1lc3NhZ2UuARxzdWNjZXNzIAEQYm9vbBiIV2hldGhlciB0aGUgbWVzc2FnZSB3YXMgcHJvY2Vzc2VkLgBJAU5vdGUgdGhhdCB0aGlzIGRvZXMgbm90IG1lYW4gdGhhdCB0aGUgdW5kZXJseWluZyBgTWVzc2FnZVByb2Nlc3NvcmAgd2FzIGludGVybmFsbHk1AXN1Y2Nlc3NmdWwuIEl0ICpzb2xlbHkqIG1lYW5zIHRoYXQgdGhlIE1RIHBhbGxldCB3aWxsIHRyZWF0IHRoaXMgYXMgYSBzdWNjZXNzTQFjb25kaXRpb24gYW5kIGRpc2NhcmQgdGhlIG1lc3NhZ2UuIEFueSBpbnRlcm5hbCBlcnJvciBuZWVkcyB0byBiZSBlbWl0dGVkIGFzIGV2ZW50c2hieSB0aGUgYE1lc3NhZ2VQcm9jZXNzb3JgLgEEVE1lc3NhZ2UgaXMgcHJvY2Vzc2VkLkhPdmVyd2VpZ2h0RW5xdWV1ZWQQAQhpZAQBIFt1ODsgMzJdBJRUaGUgYGJsYWtlMl8yNTZgIGhhc2ggb2YgdGhlIG1lc3NhZ2UuARhvcmlnaW7FBgFITWVzc2FnZU9yaWdpbk9mPFQ+BGRUaGUgcXVldWUgb2YgdGhlIG1lc3NhZ2UuAShwYWdlX2luZGV4EAEkUGFnZUluZGV4BGBUaGUgcGFnZSBvZiB0aGUgbWVzc2FnZS4BNG1lc3NhZ2VfaW5kZXgQARxUOjpTaXplBKRUaGUgaW5kZXggb2YgdGhlIG1lc3NhZ2Ugd2l0aGluIHRoZSBwYWdlLgIEjE1lc3NhZ2UgcGxhY2VkIGluIG92ZXJ3ZWlnaHQgcXVldWUuKFBhZ2VSZWFwZWQIARhvcmlnaW7FBgFITWVzc2FnZU9yaWdpbk9mPFQ+BFhUaGUgcXVldWUgb2YgdGhlIHBhZ2UuARRpbmRleBABJFBhZ2VJbmRleARYVGhlIGluZGV4IG9mIHRoZSBwYWdlLgMEVFRoaXMgcGFnZSB3YXMgcmVhcGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldL0HEDRmcmFtZV9zdXBwb3J0GHRyYWl0cyBtZXNzYWdlc0xQcm9jZXNzTWVzc2FnZUVycm9yAAEYJEJhZEZvcm1hdAAAABxDb3JydXB0AAEALFVuc3VwcG9ydGVkAAIAKE92ZXJ3ZWlnaHQEACgBGFdlaWdodAADABRZaWVsZAAEAERTdGFja0xpbWl0UmVhY2hlZAAFAADBBwxEcGFsbGV0X2Fzc2V0X3JhdGUYcGFsbGV0FEV2ZW50BARUAAEMQEFzc2V0UmF0ZUNyZWF0ZWQIAShhc3NldF9raW5k3AEwVDo6QXNzZXRLaW5kAAEQcmF0ZdEGASRGaXhlZFUxMjgAAABAQXNzZXRSYXRlUmVtb3ZlZAQBKGFzc2V0X2tpbmTcATBUOjpBc3NldEtpbmQAAQBAQXNzZXRSYXRlVXBkYXRlZAwBKGFzc2V0X2tpbmTcATBUOjpBc3NldEtpbmQAAQxvbGTRBgEkRml4ZWRVMTI4AAEMbmV30QYBJEZpeGVkVTEyOAACAAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldMUHCDBmcmFtZV9zeXN0ZW0UUGhhc2UAAQw4QXBwbHlFeHRyaW5zaWMEABABDHUzMgAAADBGaW5hbGl6YXRpb24AAQA4SW5pdGlhbGl6YXRpb24AAgAAyQcAAAKAAM0HCDBmcmFtZV9zeXN0ZW1YTGFzdFJ1bnRpbWVVcGdyYWRlSW5mbwAACAEwc3BlY192ZXJzaW9u7AFMY29kZWM6OkNvbXBhY3Q8dTMyPgABJHNwZWNfbmFtZdEHAWRzcF9ydW50aW1lOjpSdW50aW1lU3RyaW5nAADRBwAABQIA1QcIMGZyYW1lX3N5c3RlbWBDb2RlVXBncmFkZUF1dGhvcml6YXRpb24EBFQAAAgBJGNvZGVfaGFzaDQBHFQ6Okhhc2gAATRjaGVja192ZXJzaW9uIAEQYm9vbAAA2QcMMGZyYW1lX3N5c3RlbRhsaW1pdHMwQmxvY2tXZWlnaHRzAAAMAShiYXNlX2Jsb2NrKAEYV2VpZ2h0AAEkbWF4X2Jsb2NrKAEYV2VpZ2h0AAEkcGVyX2NsYXNz3QcBhFBlckRpc3BhdGNoQ2xhc3M8V2VpZ2h0c1BlckNsYXNzPgAA3QcMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2hAUGVyRGlzcGF0Y2hDbGFzcwQEVAHhBwAMARhub3JtYWzhBwEEVAABLG9wZXJhdGlvbmFs4QcBBFQAASRtYW5kYXRvcnnhBwEEVAAA4QcMMGZyYW1lX3N5c3RlbRhsaW1pdHM8V2VpZ2h0c1BlckNsYXNzAAAQAThiYXNlX2V4dHJpbnNpYygBGFdlaWdodAABNG1heF9leHRyaW5zaWMRBwE4T3B0aW9uPFdlaWdodD4AASRtYXhfdG90YWwRBwE4T3B0aW9uPFdlaWdodD4AASByZXNlcnZlZBEHAThPcHRpb248V2VpZ2h0PgAA5QcMMGZyYW1lX3N5c3RlbRhsaW1pdHMsQmxvY2tMZW5ndGgAAAQBDG1heOkHAVRQZXJEaXNwYXRjaENsYXNzPHUzMj4AAOkHDDRmcmFtZV9zdXBwb3J0IGRpc3BhdGNoQFBlckRpc3BhdGNoQ2xhc3MEBFQBEAAMARhub3JtYWwQAQRUAAEsb3BlcmF0aW9uYWwQAQRUAAEkbWFuZGF0b3J5EAEEVAAA7QcIKHNwX3dlaWdodHM8UnVudGltZURiV2VpZ2h0AAAIARByZWFkMAEMdTY0AAEUd3JpdGUwAQx1NjQAAPEHCChzcF92ZXJzaW9uOFJ1bnRpbWVWZXJzaW9uAAAgASRzcGVjX25hbWXRBwE0UnVudGltZVN0cmluZwABJGltcGxfbmFtZdEHATRSdW50aW1lU3RyaW5nAAFEYXV0aG9yaW5nX3ZlcnNpb24QAQx1MzIAATBzcGVjX3ZlcnNpb24QAQx1MzIAATBpbXBsX3ZlcnNpb24QAQx1MzIAARBhcGlz9QcBHEFwaXNWZWMAAUx0cmFuc2FjdGlvbl92ZXJzaW9uEAEMdTMyAAE0c3RhdGVfdmVyc2lvbggBCHU4AAD1BwQMQ293BARUAfkHAAQA+QcAAAD5BwAAAv0HAP0HAAAECLEFEAABCAwwZnJhbWVfc3lzdGVtGHBhbGxldBRFcnJvcgQEVAABJDxJbnZhbGlkU3BlY05hbWUAAAgRAVRoZSBuYW1lIG9mIHNwZWNpZmljYXRpb24gZG9lcyBub3QgbWF0Y2ggYmV0d2VlbiB0aGUgY3VycmVudCBydW50aW1lUGFuZCB0aGUgbmV3IHJ1bnRpbWUuaFNwZWNWZXJzaW9uTmVlZHNUb0luY3JlYXNlAAEIQQFUaGUgc3BlY2lmaWNhdGlvbiB2ZXJzaW9uIGlzIG5vdCBhbGxvd2VkIHRvIGRlY3JlYXNlIGJldHdlZW4gdGhlIGN1cnJlbnQgcnVudGltZVBhbmQgdGhlIG5ldyBydW50aW1lLnRGYWlsZWRUb0V4dHJhY3RSdW50aW1lVmVyc2lvbgACDOxGYWlsZWQgdG8gZXh0cmFjdCB0aGUgcnVudGltZSB2ZXJzaW9uIGZyb20gdGhlIG5ldyBydW50aW1lLgAJAUVpdGhlciBjYWxsaW5nIGBDb3JlX3ZlcnNpb25gIG9yIGRlY29kaW5nIGBSdW50aW1lVmVyc2lvbmAgZmFpbGVkLkxOb25EZWZhdWx0Q29tcG9zaXRlAAME/FN1aWNpZGUgY2FsbGVkIHdoZW4gdGhlIGFjY291bnQgaGFzIG5vbi1kZWZhdWx0IGNvbXBvc2l0ZSBkYXRhLjxOb25aZXJvUmVmQ291bnQABAQ1AVRoZXJlIGlzIGEgbm9uLXplcm8gcmVmZXJlbmNlIGNvdW50IHByZXZlbnRpbmcgdGhlIGFjY291bnQgZnJvbSBiZWluZyBwdXJnZWQuMENhbGxGaWx0ZXJlZAAFBNBUaGUgb3JpZ2luIGZpbHRlciBwcmV2ZW50IHRoZSBjYWxsIHRvIGJlIGRpc3BhdGNoZWQubE11bHRpQmxvY2tNaWdyYXRpb25zT25nb2luZwAGBFUBQSBtdWx0aS1ibG9jayBtaWdyYXRpb24gaXMgb25nb2luZyBhbmQgcHJldmVudHMgdGhlIGN1cnJlbnQgY29kZSBmcm9tIGJlaW5nIHJlcGxhY2VkLkROb3RoaW5nQXV0aG9yaXplZAAHBFhObyB1cGdyYWRlIGF1dGhvcml6ZWQuMFVuYXV0aG9yaXplZAAIBJRUaGUgc3VibWl0dGVkIGNvZGUgaXMgbm90IGF1dGhvcml6ZWQuBGxFcnJvciBmb3IgdGhlIFN5c3RlbSBwYWxsZXQFCAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQkIBFMAAAQAEQgBGFZlYzxUPgAACQgEGE9wdGlvbgQEVAENCAEIEE5vbmUAAAAQU29tZQQADQgAAAEAAA0ICEBwYWxsZXRfc2NoZWR1bGVyJFNjaGVkdWxlZBQQTmFtZQEEEENhbGwBcQEsQmxvY2tOdW1iZXIBEDRQYWxsZXRzT3JpZ2luAX0CJEFjY291bnRJZAEAABQBIG1heWJlX2lkhAEwT3B0aW9uPE5hbWU+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxscQEBEENhbGwAAThtYXliZV9wZXJpb2RpY40BAZRPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlcj4+AAEYb3JpZ2lufQIBNFBhbGxldHNPcmlnaW4AABEIAAACCQgAFQgIQHBhbGxldF9zY2hlZHVsZXIsUmV0cnlDb25maWcEGFBlcmlvZAEQAAwBNHRvdGFsX3JldHJpZXMIAQh1OAABJHJlbWFpbmluZwgBCHU4AAEYcGVyaW9kEAEYUGVyaW9kAAAZCAxAcGFsbGV0X3NjaGVkdWxlchhwYWxsZXQURXJyb3IEBFQAARRARmFpbGVkVG9TY2hlZHVsZQAABGRGYWlsZWQgdG8gc2NoZWR1bGUgYSBjYWxsIE5vdEZvdW5kAAEEfENhbm5vdCBmaW5kIHRoZSBzY2hlZHVsZWQgY2FsbC5cVGFyZ2V0QmxvY2tOdW1iZXJJblBhc3QAAgSkR2l2ZW4gdGFyZ2V0IGJsb2NrIG51bWJlciBpcyBpbiB0aGUgcGFzdC5IUmVzY2hlZHVsZU5vQ2hhbmdlAAME8FJlc2NoZWR1bGUgZmFpbGVkIGJlY2F1c2UgaXQgZG9lcyBub3QgY2hhbmdlIHNjaGVkdWxlZCB0aW1lLhROYW1lZAAEBNBBdHRlbXB0IHRvIHVzZSBhIG5vbi1uYW1lZCBmdW5jdGlvbiBvbiBhIG5hbWVkIHRhc2suBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0Lh0ICDxwYWxsZXRfcHJlaW1hZ2VAT2xkUmVxdWVzdFN0YXR1cwgkQWNjb3VudElkAQAcQmFsYW5jZQEYAQgsVW5yZXF1ZXN0ZWQIARxkZXBvc2l0EQQBUChBY2NvdW50SWQsIEJhbGFuY2UpAAEMbGVuEAEMdTMyAAAAJFJlcXVlc3RlZAwBHGRlcG9zaXQhCAFwT3B0aW9uPChBY2NvdW50SWQsIEJhbGFuY2UpPgABFGNvdW50EAEMdTMyAAEMbGVuYQIBLE9wdGlvbjx1MzI+AAEAACEIBBhPcHRpb24EBFQBEQQBCBBOb25lAAAAEFNvbWUEABEEAAABAAAlCAg8cGFsbGV0X3ByZWltYWdlNFJlcXVlc3RTdGF0dXMIJEFjY291bnRJZAEAGFRpY2tldAEpCAEILFVucmVxdWVzdGVkCAEYdGlja2V0LQgBTChBY2NvdW50SWQsIFRpY2tldCkAAQxsZW4QAQx1MzIAAAAkUmVxdWVzdGVkDAEwbWF5YmVfdGlja2V0MQgBbE9wdGlvbjwoQWNjb3VudElkLCBUaWNrZXQpPgABFGNvdW50EAEMdTMyAAEkbWF5YmVfbGVuYQIBLE9wdGlvbjx1MzI+AAEAACkIFDRmcmFtZV9zdXBwb3J0GHRyYWl0cxh0b2tlbnMgZnVuZ2libGVESG9sZENvbnNpZGVyYXRpb24UBEEABEYABFIABEQACEZwAAAEABgBKEY6OkJhbGFuY2UAAC0IAAAECAApCAAxCAQYT3B0aW9uBARUAS0IAQgQTm9uZQAAABBTb21lBAAtCAAAAQAANQgAAAQINBAAOQgMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEIBFMAAAQAOAEYVmVjPFQ+AAA9CAw8cGFsbGV0X3ByZWltYWdlGHBhbGxldBRFcnJvcgQEVAABJBhUb29CaWcAAASgUHJlaW1hZ2UgaXMgdG9vIGxhcmdlIHRvIHN0b3JlIG9uLWNoYWluLjBBbHJlYWR5Tm90ZWQAAQSkUHJlaW1hZ2UgaGFzIGFscmVhZHkgYmVlbiBub3RlZCBvbi1jaGFpbi40Tm90QXV0aG9yaXplZAACBMhUaGUgdXNlciBpcyBub3QgYXV0aG9yaXplZCB0byBwZXJmb3JtIHRoaXMgYWN0aW9uLiBOb3ROb3RlZAADBPxUaGUgcHJlaW1hZ2UgY2Fubm90IGJlIHJlbW92ZWQgc2luY2UgaXQgaGFzIG5vdCB5ZXQgYmVlbiBub3RlZC4kUmVxdWVzdGVkAAQECQFBIHByZWltYWdlIG1heSBub3QgYmUgcmVtb3ZlZCB3aGVuIHRoZXJlIGFyZSBvdXRzdGFuZGluZyByZXF1ZXN0cy4wTm90UmVxdWVzdGVkAAUELQFUaGUgcHJlaW1hZ2UgcmVxdWVzdCBjYW5ub3QgYmUgcmVtb3ZlZCBzaW5jZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cyBleGlzdC4cVG9vTWFueQAGBFUBTW9yZSB0aGFuIGBNQVhfSEFTSF9VUEdSQURFX0JVTEtfQ09VTlRgIGhhc2hlcyB3ZXJlIHJlcXVlc3RlZCB0byBiZSB1cGdyYWRlZCBhdCBvbmNlLhhUb29GZXcABwTkVG9vIGZldyBoYXNoZXMgd2VyZSByZXF1ZXN0ZWQgdG8gYmUgdXBncmFkZWQgKGkuZS4gemVybykuGE5vQ29zdAAIBFkBTm8gdGlja2V0IHdpdGggYSBjb3N0IHdhcyByZXR1cm5lZCBieSBbYENvbmZpZzo6Q29uc2lkZXJhdGlvbmBdIHRvIHN0b3JlIHRoZSBwcmVpbWFnZS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuQQgMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAFFCARTAAAEAEkIARhWZWM8VD4AAEUIAAAECKUBMABJCAAAAkUIAE0IDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBBARTAAAEAFEIARhWZWM8VD4AAFEIAAACBABVCAQYT3B0aW9uBARUAVkIAQgQTm9uZQAAABBTb21lBABZCAAAAQAAWQgMRHNwX2NvbnNlbnN1c19iYWJlHGRpZ2VzdHMkUHJlRGlnZXN0AAEMHFByaW1hcnkEAF0IAUBQcmltYXJ5UHJlRGlnZXN0AAEAOFNlY29uZGFyeVBsYWluBABlCAFcU2Vjb25kYXJ5UGxhaW5QcmVEaWdlc3QAAgAwU2Vjb25kYXJ5VlJGBABpCAFUU2Vjb25kYXJ5VlJGUHJlRGlnZXN0AAMAAF0IDERzcF9jb25zZW5zdXNfYmFiZRxkaWdlc3RzQFByaW1hcnlQcmVEaWdlc3QAAAwBPGF1dGhvcml0eV9pbmRleBABVHN1cGVyOjpBdXRob3JpdHlJbmRleAABEHNsb3SpAQEQU2xvdAABNHZyZl9zaWduYXR1cmVhCAEwVnJmU2lnbmF0dXJlAABhCBAcc3BfY29yZRxzcjI1NTE5DHZyZjBWcmZTaWduYXR1cmUAAAgBKHByZV9vdXRwdXQEATBWcmZQcmVPdXRwdXQAARRwcm9vZkkCASBWcmZQcm9vZgAAZQgMRHNwX2NvbnNlbnN1c19iYWJlHGRpZ2VzdHNcU2Vjb25kYXJ5UGxhaW5QcmVEaWdlc3QAAAgBPGF1dGhvcml0eV9pbmRleBABVHN1cGVyOjpBdXRob3JpdHlJbmRleAABEHNsb3SpAQEQU2xvdAAAaQgMRHNwX2NvbnNlbnN1c19iYWJlHGRpZ2VzdHNUU2Vjb25kYXJ5VlJGUHJlRGlnZXN0AAAMATxhdXRob3JpdHlfaW5kZXgQAVRzdXBlcjo6QXV0aG9yaXR5SW5kZXgAARBzbG90qQEBEFNsb3QAATR2cmZfc2lnbmF0dXJlYQgBMFZyZlNpZ25hdHVyZQAAbQgIRHNwX2NvbnNlbnN1c19iYWJlWEJhYmVFcG9jaENvbmZpZ3VyYXRpb24AAAgBBGO1AQEoKHU2NCwgdTY0KQABNGFsbG93ZWRfc2xvdHO5AQEwQWxsb3dlZFNsb3RzAABxCAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAXUIBFMAAAQAeQgBGFZlYzxUPgAAdQgAAAQIMBAAeQgAAAJ1CAB9CAwscGFsbGV0X2JhYmUYcGFsbGV0FEVycm9yBARUAAEQYEludmFsaWRFcXVpdm9jYXRpb25Qcm9vZgAABDEBQW4gZXF1aXZvY2F0aW9uIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLmBJbnZhbGlkS2V5T3duZXJzaGlwUHJvb2YAAQQxAUEga2V5IG93bmVyc2hpcCBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC5YRHVwbGljYXRlT2ZmZW5jZVJlcG9ydAACBBUBQSBnaXZlbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIHZhbGlkIGJ1dCBhbHJlYWR5IHByZXZpb3VzbHkgcmVwb3J0ZWQuUEludmFsaWRDb25maWd1cmF0aW9uAAMEjFN1Ym1pdHRlZCBjb25maWd1cmF0aW9uIGlzIGludmFsaWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LoEIAAAEDAAYIACFCAw4cGFsbGV0X2luZGljZXMYcGFsbGV0FEVycm9yBARUAAEULE5vdEFzc2lnbmVkAAAEjFRoZSBpbmRleCB3YXMgbm90IGFscmVhZHkgYXNzaWduZWQuIE5vdE93bmVyAAEEpFRoZSBpbmRleCBpcyBhc3NpZ25lZCB0byBhbm90aGVyIGFjY291bnQuFEluVXNlAAIEcFRoZSBpbmRleCB3YXMgbm90IGF2YWlsYWJsZS4sTm90VHJhbnNmZXIAAwTIVGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gYWNjb3VudHMgYXJlIGlkZW50aWNhbC4kUGVybWFuZW50AAQE0FRoZSBpbmRleCBpcyBwZXJtYW5lbnQgYW5kIG1heSBub3QgYmUgZnJlZWQvY2hhbmdlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuiQgMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAGNCARTAAAEAJUIARhWZWM8VD4AAI0IDDxwYWxsZXRfYmFsYW5jZXMUdHlwZXMsQmFsYW5jZUxvY2sEHEJhbGFuY2UBGAAMAQhpZLEFAThMb2NrSWRlbnRpZmllcgABGGFtb3VudBgBHEJhbGFuY2UAARxyZWFzb25zkQgBHFJlYXNvbnMAAJEIDDxwYWxsZXRfYmFsYW5jZXMUdHlwZXMcUmVhc29ucwABDAxGZWUAAAAQTWlzYwABAAxBbGwAAgAAlQgAAAKNCACZCAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAZ0IBFMAAAQAoQgBGFZlYzxUPgAAnQgMPHBhbGxldF9iYWxhbmNlcxR0eXBlcyxSZXNlcnZlRGF0YQhEUmVzZXJ2ZUlkZW50aWZpZXIBsQUcQmFsYW5jZQEYAAgBCGlksQUBRFJlc2VydmVJZGVudGlmaWVyAAEYYW1vdW50GAEcQmFsYW5jZQAAoQgAAAKdCAClCAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAakIBFMAAAQAuQgBGFZlYzxUPgAAqQgUNGZyYW1lX3N1cHBvcnQYdHJhaXRzGHRva2VucxBtaXNjIElkQW1vdW50CAhJZAGtCBxCYWxhbmNlARgACAEIaWStCAEISWQAARhhbW91bnQYARxCYWxhbmNlAACtCAhAcG9sa2Fkb3RfcnVudGltZURSdW50aW1lSG9sZFJlYXNvbgABCCBQcmVpbWFnZQQAsQgBbHBhbGxldF9wcmVpbWFnZTo6SG9sZFJlYXNvbgAKAEhTdGF0ZVRyaWVNaWdyYXRpb24EALUIAZxwYWxsZXRfc3RhdGVfdHJpZV9taWdyYXRpb246OkhvbGRSZWFzb24AYgAAsQgMPHBhbGxldF9wcmVpbWFnZRhwYWxsZXQoSG9sZFJlYXNvbgABBCBQcmVpbWFnZQAAAAC1CAxscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uGHBhbGxldChIb2xkUmVhc29uAAEEPFNsYXNoRm9yTWlncmF0ZQAAAAC5CAAAAqkIAL0IDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBwQgEUwAABADNCAEYVmVjPFQ+AADBCBQ0ZnJhbWVfc3VwcG9ydBh0cmFpdHMYdG9rZW5zEG1pc2MgSWRBbW91bnQICElkAcUIHEJhbGFuY2UBGAAIAQhpZMUIAQhJZAABGGFtb3VudBgBHEJhbGFuY2UAAMUICEBwb2xrYWRvdF9ydW50aW1lTFJ1bnRpbWVGcmVlemVSZWFzb24AAQQ8Tm9taW5hdGlvblBvb2xzBADJCAGUcGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkZyZWV6ZVJlYXNvbgAnAADJCAxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0MEZyZWV6ZVJlYXNvbgABBDhQb29sTWluQmFsYW5jZQAAAADNCAAAAsEIANEIDDxwYWxsZXRfYmFsYW5jZXMYcGFsbGV0FEVycm9yCARUAARJAAEwOFZlc3RpbmdCYWxhbmNlAAAEnFZlc3RpbmcgYmFsYW5jZSB0b28gaGlnaCB0byBzZW5kIHZhbHVlLlRMaXF1aWRpdHlSZXN0cmljdGlvbnMAAQTIQWNjb3VudCBsaXF1aWRpdHkgcmVzdHJpY3Rpb25zIHByZXZlbnQgd2l0aGRyYXdhbC5MSW5zdWZmaWNpZW50QmFsYW5jZQACBHhCYWxhbmNlIHRvbyBsb3cgdG8gc2VuZCB2YWx1ZS5IRXhpc3RlbnRpYWxEZXBvc2l0AAME7FZhbHVlIHRvbyBsb3cgdG8gY3JlYXRlIGFjY291bnQgZHVlIHRvIGV4aXN0ZW50aWFsIGRlcG9zaXQuNEV4cGVuZGFiaWxpdHkABASQVHJhbnNmZXIvcGF5bWVudCB3b3VsZCBraWxsIGFjY291bnQuXEV4aXN0aW5nVmVzdGluZ1NjaGVkdWxlAAUEzEEgdmVzdGluZyBzY2hlZHVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBhY2NvdW50LixEZWFkQWNjb3VudAAGBIxCZW5lZmljaWFyeSBhY2NvdW50IG11c3QgcHJlLWV4aXN0LjxUb29NYW55UmVzZXJ2ZXMABwS4TnVtYmVyIG9mIG5hbWVkIHJlc2VydmVzIGV4Y2VlZCBgTWF4UmVzZXJ2ZXNgLjBUb29NYW55SG9sZHMACAT4TnVtYmVyIG9mIGhvbGRzIGV4Y2VlZCBgVmFyaWFudENvdW50T2Y8VDo6UnVudGltZUhvbGRSZWFzb24+YC44VG9vTWFueUZyZWV6ZXMACQSYTnVtYmVyIG9mIGZyZWV6ZXMgZXhjZWVkIGBNYXhGcmVlemVzYC5MSXNzdWFuY2VEZWFjdGl2YXRlZAAKBAEBVGhlIGlzc3VhbmNlIGNhbm5vdCBiZSBtb2RpZmllZCBzaW5jZSBpdCBpcyBhbHJlYWR5IGRlYWN0aXZhdGVkLiREZWx0YVplcm8ACwRkVGhlIGRlbHRhIGNhbm5vdCBiZSB6ZXJvLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC7VCAhocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQgUmVsZWFzZXMAAQgkVjFBbmNpZW50AAAACFYyAAEAANkICDhwYWxsZXRfc3Rha2luZzRTdGFraW5nTGVkZ2VyBARUAAAUARRzdGFzaAABMFQ6OkFjY291bnRJZAABFHRvdGFs/AEwQmFsYW5jZU9mPFQ+AAEYYWN0aXZl/AEwQmFsYW5jZU9mPFQ+AAEkdW5sb2NraW5nCQIB8EJvdW5kZWRWZWM8VW5sb2NrQ2h1bms8QmFsYW5jZU9mPFQ+PiwgVDo6TWF4VW5sb2NraW5nQ2h1bmtzPgABWGxlZ2FjeV9jbGFpbWVkX3Jld2FyZHPdCAGUQm91bmRlZFZlYzxFcmFJbmRleCwgVDo6SGlzdG9yeURlcHRoPgAA3QgMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEQBFMAAAQA5QEBGFZlYzxUPgAA4QgIOHBhbGxldF9zdGFraW5nLE5vbWluYXRpb25zBARUAAAMARx0YXJnZXRz5QgBtEJvdW5kZWRWZWM8VDo6QWNjb3VudElkLCBNYXhOb21pbmF0aW9uc09mPFQ+PgABMHN1Ym1pdHRlZF9pbhABIEVyYUluZGV4AAEoc3VwcHJlc3NlZCABEGJvb2wAAOUIDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBAARTAAAEANEBARhWZWM8VD4AAOkICDhwYWxsZXRfc3Rha2luZzRBY3RpdmVFcmFJbmZvAAAIARRpbmRleBABIEVyYUluZGV4AAEUc3RhcnTtCAEsT3B0aW9uPHU2ND4AAO0IBBhPcHRpb24EBFQBMAEIEE5vbmUAAAAQU29tZQQAMAAAAQAA8QgAAAQIEAAA9QgIKHNwX3N0YWtpbmcgRXhwb3N1cmUIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAMARR0b3RhbPwBHEJhbGFuY2UAAQxvd278ARxCYWxhbmNlAAEYb3RoZXJz+QgBrFZlYzxJbmRpdmlkdWFsRXhwb3N1cmU8QWNjb3VudElkLCBCYWxhbmNlPj4AAPkIAAAC/QgA/QgIKHNwX3N0YWtpbmdISW5kaXZpZHVhbEV4cG9zdXJlCCRBY2NvdW50SWQBABxCYWxhbmNlARgACAEMd2hvAAEkQWNjb3VudElkAAEUdmFsdWX8ARxCYWxhbmNlAAABCQgoc3Bfc3Rha2luZ1RQYWdlZEV4cG9zdXJlTWV0YWRhdGEEHEJhbGFuY2UBGAAQARR0b3RhbPwBHEJhbGFuY2UAAQxvd278ARxCYWxhbmNlAAE8bm9taW5hdG9yX2NvdW50EAEMdTMyAAEocGFnZV9jb3VudBABEFBhZ2UAAAUJAAAEDBAAEAAJCQgoc3Bfc3Rha2luZzBFeHBvc3VyZVBhZ2UIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAIAShwYWdlX3RvdGFs/AEcQmFsYW5jZQABGG90aGVyc/kIAaxWZWM8SW5kaXZpZHVhbEV4cG9zdXJlPEFjY291bnRJZCwgQmFsYW5jZT4+AAANCQg4cGFsbGV0X3N0YWtpbmc8RXJhUmV3YXJkUG9pbnRzBCRBY2NvdW50SWQBAAAIARR0b3RhbBABLFJld2FyZFBvaW50AAEoaW5kaXZpZHVhbBEJAYBCVHJlZU1hcDxBY2NvdW50SWQsIFJld2FyZFBvaW50PgAAEQkEIEJUcmVlTWFwCARLAQAEVgEQAAQAFQkAAAAVCQAAAhkJABkJAAAECAAQAB0JAAACIQkAIQkIOHBhbGxldF9zdGFraW5nOFVuYXBwbGllZFNsYXNoCCRBY2NvdW50SWQBABxCYWxhbmNlARgAFAEkdmFsaWRhdG9yAAEkQWNjb3VudElkAAEMb3duGAEcQmFsYW5jZQABGG90aGVycw0EAWRWZWM8KEFjY291bnRJZCwgQmFsYW5jZSk+AAEkcmVwb3J0ZXJz0QEBOFZlYzxBY2NvdW50SWQ+AAEYcGF5b3V0GAEcQmFsYW5jZQAAJQkAAAQIrBgAKQkMOHBhbGxldF9zdGFraW5nIHNsYXNoaW5nNFNsYXNoaW5nU3BhbnMAABABKHNwYW5faW5kZXgQASRTcGFuSW5kZXgAAShsYXN0X3N0YXJ0EAEgRXJhSW5kZXgAAUhsYXN0X25vbnplcm9fc2xhc2gQASBFcmFJbmRleAABFHByaW9y5QEBNFZlYzxFcmFJbmRleD4AAC0JDDhwYWxsZXRfc3Rha2luZyBzbGFzaGluZyhTcGFuUmVjb3JkBBxCYWxhbmNlARgACAEcc2xhc2hlZBgBHEJhbGFuY2UAASBwYWlkX291dBgBHEJhbGFuY2UAADEJEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0FEVycm9yBARUAAF8NE5vdENvbnRyb2xsZXIAAARkTm90IGEgY29udHJvbGxlciBhY2NvdW50LiBOb3RTdGFzaAABBFBOb3QgYSBzdGFzaCBhY2NvdW50LjRBbHJlYWR5Qm9uZGVkAAIEYFN0YXNoIGlzIGFscmVhZHkgYm9uZGVkLjRBbHJlYWR5UGFpcmVkAAMEdENvbnRyb2xsZXIgaXMgYWxyZWFkeSBwYWlyZWQuMEVtcHR5VGFyZ2V0cwAEBGBUYXJnZXRzIGNhbm5vdCBiZSBlbXB0eS44RHVwbGljYXRlSW5kZXgABQRARHVwbGljYXRlIGluZGV4LkRJbnZhbGlkU2xhc2hJbmRleAAGBIRTbGFzaCByZWNvcmQgaW5kZXggb3V0IG9mIGJvdW5kcy5ASW5zdWZmaWNpZW50Qm9uZAAHDFkBQ2Fubm90IGhhdmUgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yIHJvbGUsIHdpdGggdmFsdWUgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIGRlZmluZWQgYnk9AWdvdmVybmFuY2UgKHNlZSBgTWluVmFsaWRhdG9yQm9uZGAgYW5kIGBNaW5Ob21pbmF0b3JCb25kYCkuIElmIHVuYm9uZGluZyBpcyB0aGUVAWludGVudGlvbiwgYGNoaWxsYCBmaXJzdCB0byByZW1vdmUgb25lJ3Mgcm9sZSBhcyB2YWxpZGF0b3Ivbm9taW5hdG9yLjBOb01vcmVDaHVua3MACASQQ2FuIG5vdCBzY2hlZHVsZSBtb3JlIHVubG9jayBjaHVua3MuNE5vVW5sb2NrQ2h1bmsACQSgQ2FuIG5vdCByZWJvbmQgd2l0aG91dCB1bmxvY2tpbmcgY2h1bmtzLjBGdW5kZWRUYXJnZXQACgTIQXR0ZW1wdGluZyB0byB0YXJnZXQgYSBzdGFzaCB0aGF0IHN0aWxsIGhhcyBmdW5kcy5ISW52YWxpZEVyYVRvUmV3YXJkAAsEWEludmFsaWQgZXJhIHRvIHJld2FyZC5oSW52YWxpZE51bWJlck9mTm9taW5hdGlvbnMADAR4SW52YWxpZCBudW1iZXIgb2Ygbm9taW5hdGlvbnMuSE5vdFNvcnRlZEFuZFVuaXF1ZQANBIBJdGVtcyBhcmUgbm90IHNvcnRlZCBhbmQgdW5pcXVlLjhBbHJlYWR5Q2xhaW1lZAAOBAkBUmV3YXJkcyBmb3IgdGhpcyBlcmEgaGF2ZSBhbHJlYWR5IGJlZW4gY2xhaW1lZCBmb3IgdGhpcyB2YWxpZGF0b3IuLEludmFsaWRQYWdlAA8EhE5vIG5vbWluYXRvcnMgZXhpc3Qgb24gdGhpcyBwYWdlLlRJbmNvcnJlY3RIaXN0b3J5RGVwdGgAEATASW5jb3JyZWN0IHByZXZpb3VzIGhpc3RvcnkgZGVwdGggaW5wdXQgcHJvdmlkZWQuWEluY29ycmVjdFNsYXNoaW5nU3BhbnMAEQSwSW5jb3JyZWN0IG51bWJlciBvZiBzbGFzaGluZyBzcGFucyBwcm92aWRlZC4gQmFkU3RhdGUAEgQ5AUludGVybmFsIHN0YXRlIGhhcyBiZWNvbWUgc29tZWhvdyBjb3JydXB0ZWQgYW5kIHRoZSBvcGVyYXRpb24gY2Fubm90IGNvbnRpbnVlLjhUb29NYW55VGFyZ2V0cwATBJRUb28gbWFueSBub21pbmF0aW9uIHRhcmdldHMgc3VwcGxpZWQuJEJhZFRhcmdldAAUBD0BQSBub21pbmF0aW9uIHRhcmdldCB3YXMgc3VwcGxpZWQgdGhhdCB3YXMgYmxvY2tlZCBvciBvdGhlcndpc2Ugbm90IGEgdmFsaWRhdG9yLkBDYW5ub3RDaGlsbE90aGVyABUEVQFUaGUgdXNlciBoYXMgZW5vdWdoIGJvbmQgYW5kIHRodXMgY2Fubm90IGJlIGNoaWxsZWQgZm9yY2VmdWxseSBieSBhbiBleHRlcm5hbCBwZXJzb24uRFRvb01hbnlOb21pbmF0b3JzABYITQFUaGVyZSBhcmUgdG9vIG1hbnkgbm9taW5hdG9ycyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGUgc3Rha2luZ7RzZXR0aW5ncyB0byBrZWVwIHRoaW5ncyBzYWZlIGZvciB0aGUgcnVudGltZS5EVG9vTWFueVZhbGlkYXRvcnMAFwhVAVRoZXJlIGFyZSB0b28gbWFueSB2YWxpZGF0b3IgY2FuZGlkYXRlcyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGXUc3Rha2luZyBzZXR0aW5ncyB0byBrZWVwIHRoaW5ncyBzYWZlIGZvciB0aGUgcnVudGltZS5AQ29tbWlzc2lvblRvb0xvdwAYBOBDb21taXNzaW9uIGlzIHRvbyBsb3cuIE11c3QgYmUgYXQgbGVhc3QgYE1pbkNvbW1pc3Npb25gLixCb3VuZE5vdE1ldAAZBFhTb21lIGJvdW5kIGlzIG5vdCBtZXQuUENvbnRyb2xsZXJEZXByZWNhdGVkABoEAQFVc2VkIHdoZW4gYXR0ZW1wdGluZyB0byB1c2UgZGVwcmVjYXRlZCBjb250cm9sbGVyIGFjY291bnQgbG9naWMuTENhbm5vdFJlc3RvcmVMZWRnZXIAGwRYQ2Fubm90IHJlc2V0IGEgbGVkZ2VyLmxSZXdhcmREZXN0aW5hdGlvblJlc3RyaWN0ZWQAHASsUHJvdmlkZWQgcmV3YXJkIGRlc3RpbmF0aW9uIGlzIG5vdCBhbGxvd2VkLjhOb3RFbm91Z2hGdW5kcwAdBJxOb3QgZW5vdWdoIGZ1bmRzIGF2YWlsYWJsZSB0byB3aXRoZHJhdy5cVmlydHVhbFN0YWtlck5vdEFsbG93ZWQAHgSoT3BlcmF0aW9uIG5vdCBhbGxvd2VkIGZvciB2aXJ0dWFsIHN0YWtlcnMuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LjUJDChzcF9zdGFraW5nHG9mZmVuY2U4T2ZmZW5jZURldGFpbHMIIFJlcG9ydGVyAQAgT2ZmZW5kZXIBOQkACAEgb2ZmZW5kZXI5CQEgT2ZmZW5kZXIAASRyZXBvcnRlcnPRAQE0VmVjPFJlcG9ydGVyPgAAOQkAAAQIAPUIAD0JAAAECMA4AEEJAAACRQkARQkAAAQIABkCAEkJAAAECE0JOABNCQwcc3BfY29yZRhjcnlwdG8kS2V5VHlwZUlkAAAEAEgBHFt1ODsgNF0AAFEJDDhwYWxsZXRfc2Vzc2lvbhhwYWxsZXQURXJyb3IEBFQAARQwSW52YWxpZFByb29mAAAEYEludmFsaWQgb3duZXJzaGlwIHByb29mLlxOb0Fzc29jaWF0ZWRWYWxpZGF0b3JJZAABBJxObyBhc3NvY2lhdGVkIHZhbGlkYXRvciBJRCBmb3IgYWNjb3VudC40RHVwbGljYXRlZEtleQACBGRSZWdpc3RlcmVkIGR1cGxpY2F0ZSBrZXkuGE5vS2V5cwADBKRObyBrZXlzIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhY2NvdW50LiROb0FjY291bnQABAQZAUtleSBzZXR0aW5nIGFjY291bnQgaXMgbm90IGxpdmUsIHNvIGl0J3MgaW1wb3NzaWJsZSB0byBhc3NvY2lhdGUga2V5cy4EdEVycm9yIGZvciB0aGUgc2Vzc2lvbiBwYWxsZXQuVQkIOHBhbGxldF9ncmFuZHBhLFN0b3JlZFN0YXRlBAROARABEBBMaXZlAAAAMFBlbmRpbmdQYXVzZQgBMHNjaGVkdWxlZF9hdBABBE4AARRkZWxheRABBE4AAQAYUGF1c2VkAAIANFBlbmRpbmdSZXN1bWUIATBzY2hlZHVsZWRfYXQQAQROAAEUZGVsYXkQAQROAAMAAFkJCDhwYWxsZXRfZ3JhbmRwYUxTdG9yZWRQZW5kaW5nQ2hhbmdlCAROARAUTGltaXQAABABMHNjaGVkdWxlZF9hdBABBE4AARRkZWxheRABBE4AAUBuZXh0X2F1dGhvcml0aWVzXQkBbEJvdW5kZWRBdXRob3JpdHlMaXN0PExpbWl0PgABGGZvcmNlZGECASRPcHRpb248Tj4AAF0JDExib3VuZGVkX2NvbGxlY3Rpb25zQHdlYWtfYm91bmRlZF92ZWM4V2Vha0JvdW5kZWRWZWMIBFQB0ARTAAAEAMwBGFZlYzxUPgAAYQkMOHBhbGxldF9ncmFuZHBhGHBhbGxldBRFcnJvcgQEVAABHCxQYXVzZUZhaWxlZAAACAUBQXR0ZW1wdCB0byBzaWduYWwgR1JBTkRQQSBwYXVzZSB3aGVuIHRoZSBhdXRob3JpdHkgc2V0IGlzbid0IGxpdmWkKGVpdGhlciBwYXVzZWQgb3IgYWxyZWFkeSBwZW5kaW5nIHBhdXNlKS4wUmVzdW1lRmFpbGVkAAEIEQFBdHRlbXB0IHRvIHNpZ25hbCBHUkFORFBBIHJlc3VtZSB3aGVuIHRoZSBhdXRob3JpdHkgc2V0IGlzbid0IHBhdXNlZKAoZWl0aGVyIGxpdmUgb3IgYWxyZWFkeSBwZW5kaW5nIHJlc3VtZSkuNENoYW5nZVBlbmRpbmcAAgToQXR0ZW1wdCB0byBzaWduYWwgR1JBTkRQQSBjaGFuZ2Ugd2l0aCBvbmUgYWxyZWFkeSBwZW5kaW5nLhxUb29Tb29uAAMEvENhbm5vdCBzaWduYWwgZm9yY2VkIGNoYW5nZSBzbyBzb29uIGFmdGVyIGxhc3QuYEludmFsaWRLZXlPd25lcnNoaXBQcm9vZgAEBDEBQSBrZXkgb3duZXJzaGlwIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLmBJbnZhbGlkRXF1aXZvY2F0aW9uUHJvb2YABQQxAUFuIGVxdWl2b2NhdGlvbiBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC5YRHVwbGljYXRlT2ZmZW5jZVJlcG9ydAAGBBUBQSBnaXZlbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIHZhbGlkIGJ1dCBhbHJlYWR5IHByZXZpb3VzbHkgcmVwb3J0ZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LmUJDExib3VuZGVkX2NvbGxlY3Rpb25zQHdlYWtfYm91bmRlZF92ZWM4V2Vha0JvdW5kZWRWZWMIBFQBJQIEUwAABABpCQEYVmVjPFQ+AABpCQAAAiUCAG0JCDxwYWxsZXRfdHJlYXN1cnkgUHJvcG9zYWwIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAQASBwcm9wb3NlcgABJEFjY291bnRJZAABFHZhbHVlGAEcQmFsYW5jZQABLGJlbmVmaWNpYXJ5AAEkQWNjb3VudElkAAEQYm9uZBgBHEJhbGFuY2UAAHEJDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBEARTAAAEAOUBARhWZWM8VD4AAHUJCDxwYWxsZXRfdHJlYXN1cnksU3BlbmRTdGF0dXMUJEFzc2V0S2luZAHcMEFzc2V0QmFsYW5jZQEYLEJlbmVmaWNpYXJ5AUUBLEJsb2NrTnVtYmVyARAkUGF5bWVudElkATAAGAEoYXNzZXRfa2luZNwBJEFzc2V0S2luZAABGGFtb3VudBgBMEFzc2V0QmFsYW5jZQABLGJlbmVmaWNpYXJ5RQEBLEJlbmVmaWNpYXJ5AAEodmFsaWRfZnJvbRABLEJsb2NrTnVtYmVyAAEkZXhwaXJlX2F0EAEsQmxvY2tOdW1iZXIAARhzdGF0dXN5CQFcUGF5bWVudFN0YXRlPFBheW1lbnRJZD4AAHkJCDxwYWxsZXRfdHJlYXN1cnkwUGF5bWVudFN0YXRlBAhJZAEwAQwcUGVuZGluZwAAACRBdHRlbXB0ZWQEAQhpZDABCElkAAEAGEZhaWxlZAACAAB9CQw0c3BfYXJpdGhtZXRpYyhwZXJfdGhpbmdzHFBlcm1pbGwAAAQAEAEMdTMyAACBCQg0ZnJhbWVfc3VwcG9ydCBQYWxsZXRJZAAABACxBQEcW3U4OyA4XQAAhQkMPHBhbGxldF90cmVhc3VyeRhwYWxsZXQURXJyb3IIBFQABEkAASwwSW52YWxpZEluZGV4AAAErE5vIHByb3Bvc2FsLCBib3VudHkgb3Igc3BlbmQgYXQgdGhhdCBpbmRleC5AVG9vTWFueUFwcHJvdmFscwABBIBUb28gbWFueSBhcHByb3ZhbHMgaW4gdGhlIHF1ZXVlLlhJbnN1ZmZpY2llbnRQZXJtaXNzaW9uAAIIRQFUaGUgc3BlbmQgb3JpZ2luIGlzIHZhbGlkIGJ1dCB0aGUgYW1vdW50IGl0IGlzIGFsbG93ZWQgdG8gc3BlbmQgaXMgbG93ZXIgdGhhbiB0aGVMYW1vdW50IHRvIGJlIHNwZW50LkxQcm9wb3NhbE5vdEFwcHJvdmVkAAMEfFByb3Bvc2FsIGhhcyBub3QgYmVlbiBhcHByb3ZlZC5YRmFpbGVkVG9Db252ZXJ0QmFsYW5jZQAEBFEBVGhlIGJhbGFuY2Ugb2YgdGhlIGFzc2V0IGtpbmQgaXMgbm90IGNvbnZlcnRpYmxlIHRvIHRoZSBiYWxhbmNlIG9mIHRoZSBuYXRpdmUgYXNzZXQuMFNwZW5kRXhwaXJlZAAFBLBUaGUgc3BlbmQgaGFzIGV4cGlyZWQgYW5kIGNhbm5vdCBiZSBjbGFpbWVkLixFYXJseVBheW91dAAGBKRUaGUgc3BlbmQgaXMgbm90IHlldCBlbGlnaWJsZSBmb3IgcGF5b3V0LkBBbHJlYWR5QXR0ZW1wdGVkAAcEnFRoZSBwYXltZW50IGhhcyBhbHJlYWR5IGJlZW4gYXR0ZW1wdGVkLixQYXlvdXRFcnJvcgAIBMxUaGVyZSB3YXMgc29tZSBpc3N1ZSB3aXRoIHRoZSBtZWNoYW5pc20gb2YgcGF5bWVudC4wTm90QXR0ZW1wdGVkAAkEpFRoZSBwYXlvdXQgd2FzIG5vdCB5ZXQgYXR0ZW1wdGVkL2NsYWltZWQuMEluY29uY2x1c2l2ZQAKBMRUaGUgcGF5bWVudCBoYXMgbmVpdGhlciBmYWlsZWQgbm9yIHN1Y2NlZWRlZCB5ZXQuBHhFcnJvciBmb3IgdGhlIHRyZWFzdXJ5IHBhbGxldC6JCQAABAgAbQEAjQkMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxB2b3RlGFZvdGluZxQcQmFsYW5jZQEYJEFjY291bnRJZAEALEJsb2NrTnVtYmVyARAkUG9sbEluZGV4ARAgTWF4Vm90ZXMAAQgcQ2FzdGluZwQAkQkByENhc3Rpbmc8QmFsYW5jZSwgQmxvY2tOdW1iZXIsIFBvbGxJbmRleCwgTWF4Vm90ZXM+AAAAKERlbGVnYXRpbmcEAKkJAaxEZWxlZ2F0aW5nPEJhbGFuY2UsIEFjY291bnRJZCwgQmxvY2tOdW1iZXI+AAEAAJEJDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcQdm90ZRxDYXN0aW5nEBxCYWxhbmNlARgsQmxvY2tOdW1iZXIBECRQb2xsSW5kZXgBECBNYXhWb3RlcwAADAEUdm90ZXOVCQHcQm91bmRlZFZlYzwoUG9sbEluZGV4LCBBY2NvdW50Vm90ZTxCYWxhbmNlPiksIE1heFZvdGVzPgABLGRlbGVnYXRpb25zoQkBUERlbGVnYXRpb25zPEJhbGFuY2U+AAEUcHJpb3KlCQF8UHJpb3JMb2NrPEJsb2NrTnVtYmVyLCBCYWxhbmNlPgAAlQkMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAGZCQRTAAAEAJ0JARhWZWM8VD4AAJkJAAAECBBpAgCdCQAAApkJAKEJDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcUdHlwZXMsRGVsZWdhdGlvbnMEHEJhbGFuY2UBGAAIARR2b3RlcxgBHEJhbGFuY2UAARxjYXBpdGFsGAEcQmFsYW5jZQAApQkMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxB2b3RlJFByaW9yTG9jawgsQmxvY2tOdW1iZXIBEBxCYWxhbmNlARgACAAQASxCbG9ja051bWJlcgAAGAEcQmFsYW5jZQAAqQkMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxB2b3RlKERlbGVnYXRpbmcMHEJhbGFuY2UBGCRBY2NvdW50SWQBACxCbG9ja051bWJlcgEQABQBHGJhbGFuY2UYARxCYWxhbmNlAAEYdGFyZ2V0AAEkQWNjb3VudElkAAEoY29udmljdGlvbnECAShDb252aWN0aW9uAAEsZGVsZWdhdGlvbnOhCQFQRGVsZWdhdGlvbnM8QmFsYW5jZT4AARRwcmlvcqUJAXxQcmlvckxvY2s8QmxvY2tOdW1iZXIsIEJhbGFuY2U+AACtCQxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAbEJBFMAAAQAtQkBGFZlYzxUPgAAsQkAAAQIbQEYALUJAAACsQkAuQkMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxhwYWxsZXQURXJyb3IIBFQABEkAATAoTm90T25nb2luZwAABFBQb2xsIGlzIG5vdCBvbmdvaW5nLiBOb3RWb3RlcgABBKxUaGUgZ2l2ZW4gYWNjb3VudCBkaWQgbm90IHZvdGUgb24gdGhlIHBvbGwuME5vUGVybWlzc2lvbgACBMhUaGUgYWN0b3IgaGFzIG5vIHBlcm1pc3Npb24gdG8gY29uZHVjdCB0aGUgYWN0aW9uLjxOb1Blcm1pc3Npb25ZZXQAAwRZAVRoZSBhY3RvciBoYXMgbm8gcGVybWlzc2lvbiB0byBjb25kdWN0IHRoZSBhY3Rpb24gcmlnaHQgbm93IGJ1dCB3aWxsIGRvIGluIHRoZSBmdXR1cmUuREFscmVhZHlEZWxlZ2F0aW5nAAQEiFRoZSBhY2NvdW50IGlzIGFscmVhZHkgZGVsZWdhdGluZy40QWxyZWFkeVZvdGluZwAFCFUBVGhlIGFjY291bnQgY3VycmVudGx5IGhhcyB2b3RlcyBhdHRhY2hlZCB0byBpdCBhbmQgdGhlIG9wZXJhdGlvbiBjYW5ub3Qgc3VjY2VlZCB1bnRpbKB0aGVzZSBhcmUgcmVtb3ZlZCB0aHJvdWdoIGByZW1vdmVfdm90ZWAuREluc3VmZmljaWVudEZ1bmRzAAYE/FRvbyBoaWdoIGEgYmFsYW5jZSB3YXMgcHJvdmlkZWQgdGhhdCB0aGUgYWNjb3VudCBjYW5ub3QgYWZmb3JkLjROb3REZWxlZ2F0aW5nAAcEoFRoZSBhY2NvdW50IGlzIG5vdCBjdXJyZW50bHkgZGVsZWdhdGluZy4gTm9uc2Vuc2UACASURGVsZWdhdGlvbiB0byBvbmVzZWxmIG1ha2VzIG5vIHNlbnNlLjxNYXhWb3Rlc1JlYWNoZWQACQSATWF4aW11bSBudW1iZXIgb2Ygdm90ZXMgcmVhY2hlZC4sQ2xhc3NOZWVkZWQACgQ5AVRoZSBjbGFzcyBtdXN0IGJlIHN1cHBsaWVkIHNpbmNlIGl0IGlzIG5vdCBlYXNpbHkgZGV0ZXJtaW5hYmxlIGZyb20gdGhlIHN0YXRlLiBCYWRDbGFzcwALBIRUaGUgY2xhc3MgSUQgc3VwcGxpZWQgaXMgaW52YWxpZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuvQkMQHBhbGxldF9yZWZlcmVuZGEUdHlwZXM4UmVmZXJlbmR1bUluZm8gHFRyYWNrSWQBbQE0UnVudGltZU9yaWdpbgF9AhhNb21lbnQBEBBDYWxsAXEBHEJhbGFuY2UBGBRUYWxseQEBByRBY2NvdW50SWQBADxTY2hlZHVsZUFkZHJlc3MBgAEYHE9uZ29pbmcEAMEJAY0BUmVmZXJlbmR1bVN0YXR1czxUcmFja0lkLCBSdW50aW1lT3JpZ2luLCBNb21lbnQsIENhbGwsIEJhbGFuY2UsIFRhbGx5LApBY2NvdW50SWQsIFNjaGVkdWxlQWRkcmVzcyw+AAAAIEFwcHJvdmVkDAAQARhNb21lbnQAAMkJAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAAyQkBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AAEAIFJlamVjdGVkDAAQARhNb21lbnQAAMkJAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAAyQkBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AAIAJENhbmNlbGxlZAwAEAEYTW9tZW50AADJCQGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAMkJAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgADACBUaW1lZE91dAwAEAEYTW9tZW50AADJCQGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAMkJAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAEABhLaWxsZWQEABABGE1vbWVudAAFAADBCQxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlc0BSZWZlcmVuZHVtU3RhdHVzIBxUcmFja0lkAW0BNFJ1bnRpbWVPcmlnaW4BfQIYTW9tZW50ARAQQ2FsbAFxARxCYWxhbmNlARgUVGFsbHkBAQckQWNjb3VudElkAQA8U2NoZWR1bGVBZGRyZXNzAYAALAEUdHJhY2ttAQEcVHJhY2tJZAABGG9yaWdpbn0CATRSdW50aW1lT3JpZ2luAAEgcHJvcG9zYWxxAQEQQ2FsbAABJGVuYWN0bWVudJkCAVBEaXNwYXRjaFRpbWU8TW9tZW50PgABJHN1Ym1pdHRlZBABGE1vbWVudAABSHN1Ym1pc3Npb25fZGVwb3NpdMUJAWxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4AAUBkZWNpc2lvbl9kZXBvc2l0yQkBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AAEgZGVjaWRpbmfNCQF4T3B0aW9uPERlY2lkaW5nU3RhdHVzPE1vbWVudD4+AAEUdGFsbHkBBwEUVGFsbHkAASBpbl9xdWV1ZSABEGJvb2wAARRhbGFybdUJAYRPcHRpb248KE1vbWVudCwgU2NoZWR1bGVBZGRyZXNzKT4AAMUJDEBwYWxsZXRfcmVmZXJlbmRhFHR5cGVzHERlcG9zaXQIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAIAQx3aG8AASRBY2NvdW50SWQAARhhbW91bnQYARxCYWxhbmNlAADJCQQYT3B0aW9uBARUAcUJAQgQTm9uZQAAABBTb21lBADFCQAAAQAAzQkEGE9wdGlvbgQEVAHRCQEIEE5vbmUAAAAQU29tZQQA0QkAAAEAANEJDEBwYWxsZXRfcmVmZXJlbmRhFHR5cGVzOERlY2lkaW5nU3RhdHVzBCxCbG9ja051bWJlcgEQAAgBFHNpbmNlEAEsQmxvY2tOdW1iZXIAAShjb25maXJtaW5nYQIBTE9wdGlvbjxCbG9ja051bWJlcj4AANUJBBhPcHRpb24EBFQB2QkBCBBOb25lAAAAEFNvbWUEANkJAAABAADZCQAABAgQgADdCQxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAeEJBFMAAAQA5QkBGFZlYzxUPgAA4QkAAAQIEBgA5QkAAALhCQDpCQAAAu0JAO0JAAAECG0B8QkA8QkMQHBhbGxldF9yZWZlcmVuZGEUdHlwZXMkVHJhY2tJbmZvCBxCYWxhbmNlARgYTW9tZW50ARAAJAEQbmFtZdEHATAmJ3N0YXRpYyBzdHIAATBtYXhfZGVjaWRpbmcQAQx1MzIAAUBkZWNpc2lvbl9kZXBvc2l0GAEcQmFsYW5jZQABOHByZXBhcmVfcGVyaW9kEAEYTW9tZW50AAE8ZGVjaXNpb25fcGVyaW9kEAEYTW9tZW50AAE4Y29uZmlybV9wZXJpb2QQARhNb21lbnQAAVBtaW5fZW5hY3RtZW50X3BlcmlvZBABGE1vbWVudAABMG1pbl9hcHByb3ZhbPUJARRDdXJ2ZQABLG1pbl9zdXBwb3J09QkBFEN1cnZlAAD1CQxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlcxRDdXJ2ZQABDEBMaW5lYXJEZWNyZWFzaW5nDAEYbGVuZ3RorAEcUGVyYmlsbAABFGZsb29yrAEcUGVyYmlsbAABEGNlaWysARxQZXJiaWxsAAAARFN0ZXBwZWREZWNyZWFzaW5nEAEUYmVnaW6sARxQZXJiaWxsAAEMZW5krAEcUGVyYmlsbAABEHN0ZXCsARxQZXJiaWxsAAEYcGVyaW9krAEcUGVyYmlsbAABAChSZWNpcHJvY2FsDAEYZmFjdG9y+QkBIEZpeGVkSTY0AAEgeF9vZmZzZXT5CQEgRml4ZWRJNjQAASB5X29mZnNldPkJASBGaXhlZEk2NAACAAD5CQw0c3BfYXJpdGhtZXRpYyxmaXhlZF9wb2ludCBGaXhlZEk2NAAABAD9CQEMaTY0AAD9CQAABQwAAQoMQHBhbGxldF9yZWZlcmVuZGEYcGFsbGV0FEVycm9yCARUAARJAAE4KE5vdE9uZ29pbmcAAARoUmVmZXJlbmR1bSBpcyBub3Qgb25nb2luZy4oSGFzRGVwb3NpdAABBLhSZWZlcmVuZHVtJ3MgZGVjaXNpb24gZGVwb3NpdCBpcyBhbHJlYWR5IHBhaWQuIEJhZFRyYWNrAAIEnFRoZSB0cmFjayBpZGVudGlmaWVyIGdpdmVuIHdhcyBpbnZhbGlkLhBGdWxsAAMEMQFUaGVyZSBhcmUgYWxyZWFkeSBhIGZ1bGwgY29tcGxlbWVudCBvZiByZWZlcmVuZGEgaW4gcHJvZ3Jlc3MgZm9yIHRoaXMgdHJhY2suKFF1ZXVlRW1wdHkABASAVGhlIHF1ZXVlIG9mIHRoZSB0cmFjayBpcyBlbXB0eS40QmFkUmVmZXJlbmR1bQAFBORUaGUgcmVmZXJlbmR1bSBpbmRleCBwcm92aWRlZCBpcyBpbnZhbGlkIGluIHRoaXMgY29udGV4dC4sTm90aGluZ1RvRG8ABgSsVGhlcmUgd2FzIG5vdGhpbmcgdG8gZG8gaW4gdGhlIGFkdmFuY2VtZW50LhxOb1RyYWNrAAcEoE5vIHRyYWNrIGV4aXN0cyBmb3IgdGhlIHByb3Bvc2FsIG9yaWdpbi4oVW5maW5pc2hlZAAIBAEBQW55IGRlcG9zaXQgY2Fubm90IGJlIHJlZnVuZGVkIHVudGlsIGFmdGVyIHRoZSBkZWNpc2lvbiBpcyBvdmVyLjBOb1Blcm1pc3Npb24ACQSoVGhlIGRlcG9zaXQgcmVmdW5kZXIgaXMgbm90IHRoZSBkZXBvc2l0b3IuJE5vRGVwb3NpdAAKBMxUaGUgZGVwb3NpdCBjYW5ub3QgYmUgcmVmdW5kZWQgc2luY2Ugbm9uZSB3YXMgbWFkZS4kQmFkU3RhdHVzAAsE0FRoZSByZWZlcmVuZHVtIHN0YXR1cyBpcyBpbnZhbGlkIGZvciB0aGlzIG9wZXJhdGlvbi5AUHJlaW1hZ2VOb3RFeGlzdAAMBHBUaGUgcHJlaW1hZ2UgZG9lcyBub3QgZXhpc3QuhFByZWltYWdlU3RvcmVkV2l0aERpZmZlcmVudExlbmd0aAANBBUBVGhlIHByZWltYWdlIGlzIHN0b3JlZCB3aXRoIGEgZGlmZmVyZW50IGxlbmd0aCB0aGFuIHRoZSBvbmUgcHJvdmlkZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LgUKDEBwYWxsZXRfd2hpdGVsaXN0GHBhbGxldBRFcnJvcgQEVAABFExVbmF2YWlsYWJsZVByZUltYWdlAAAEyFRoZSBwcmVpbWFnZSBvZiB0aGUgY2FsbCBoYXNoIGNvdWxkIG5vdCBiZSBsb2FkZWQuPFVuZGVjb2RhYmxlQ2FsbAABBHhUaGUgY2FsbCBjb3VsZCBub3QgYmUgZGVjb2RlZC5gSW52YWxpZENhbGxXZWlnaHRXaXRuZXNzAAIE7FRoZSB3ZWlnaHQgb2YgdGhlIGRlY29kZWQgY2FsbCB3YXMgaGlnaGVyIHRoYW4gdGhlIHdpdG5lc3MuUENhbGxJc05vdFdoaXRlbGlzdGVkAAMEdFRoZSBjYWxsIHdhcyBub3Qgd2hpdGVsaXN0ZWQuWENhbGxBbHJlYWR5V2hpdGVsaXN0ZWQABASgVGhlIGNhbGwgd2FzIGFscmVhZHkgd2hpdGVsaXN0ZWQ7IE5vLU9wLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4JChBccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zGHBhbGxldBRFcnJvcgQEVAABGGBJbnZhbGlkRXRoZXJldW1TaWduYXR1cmUAAARsSW52YWxpZCBFdGhlcmV1bSBzaWduYXR1cmUuQFNpZ25lckhhc05vQ2xhaW0AAQR4RXRoZXJldW0gYWRkcmVzcyBoYXMgbm8gY2xhaW0uQFNlbmRlckhhc05vQ2xhaW0AAgSwQWNjb3VudCBJRCBzZW5kaW5nIHRyYW5zYWN0aW9uIGhhcyBubyBjbGFpbS4wUG90VW5kZXJmbG93AAMISQFUaGVyZSdzIG5vdCBlbm91Z2ggaW4gdGhlIHBvdCB0byBwYXkgb3V0IHNvbWUgdW52ZXN0ZWQgYW1vdW50LiBHZW5lcmFsbHkgaW1wbGllcyBhMGxvZ2ljIGVycm9yLkBJbnZhbGlkU3RhdGVtZW50AAQEkEEgbmVlZGVkIHN0YXRlbWVudCB3YXMgbm90IGluY2x1ZGVkLkxWZXN0ZWRCYWxhbmNlRXhpc3RzAAUEpFRoZSBhY2NvdW50IGFscmVhZHkgaGFzIGEgdmVzdGVkIGJhbGFuY2UuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0Lg0KDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQB9QIEUwAABAARCgEYVmVjPFQ+AAARCgAAAvUCABUKCDhwYWxsZXRfdmVzdGluZyBSZWxlYXNlcwABCAhWMAAAAAhWMQABAAAZCgw4cGFsbGV0X3Zlc3RpbmcYcGFsbGV0FEVycm9yBARUAAEUKE5vdFZlc3RpbmcAAASEVGhlIGFjY291bnQgZ2l2ZW4gaXMgbm90IHZlc3RpbmcuVEF0TWF4VmVzdGluZ1NjaGVkdWxlcwABCCUBVGhlIGFjY291bnQgYWxyZWFkeSBoYXMgYE1heFZlc3RpbmdTY2hlZHVsZXNgIGNvdW50IG9mIHNjaGVkdWxlcyBhbmQgdGh1c1EBY2Fubm90IGFkZCBhbm90aGVyIG9uZS4gQ29uc2lkZXIgbWVyZ2luZyBleGlzdGluZyBzY2hlZHVsZXMgaW4gb3JkZXIgdG8gYWRkIGFub3RoZXIuJEFtb3VudExvdwACBAUBQW1vdW50IGJlaW5nIHRyYW5zZmVycmVkIGlzIHRvbyBsb3cgdG8gY3JlYXRlIGEgdmVzdGluZyBzY2hlZHVsZS5gU2NoZWR1bGVJbmRleE91dE9mQm91bmRzAAME0EFuIGluZGV4IHdhcyBvdXQgb2YgYm91bmRzIG9mIHRoZSB2ZXN0aW5nIHNjaGVkdWxlcy5USW52YWxpZFNjaGVkdWxlUGFyYW1zAAQEDQFGYWlsZWQgdG8gY3JlYXRlIGEgbmV3IHNjaGVkdWxlIGJlY2F1c2Ugc29tZSBwYXJhbWV0ZXIgd2FzIGludmFsaWQuBHRFcnJvciBmb3IgdGhlIHZlc3RpbmcgcGFsbGV0Lh0KDDhwYWxsZXRfdXRpbGl0eRhwYWxsZXQURXJyb3IEBFQAAQQwVG9vTWFueUNhbGxzAAAEXFRvbyBtYW55IGNhbGxzIGJhdGNoZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LiEKAAAECCUKGAAlCgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUASkKBFMAAAQALQoBGFZlYzxUPgAAKQoIMHBhbGxldF9wcm94eTxQcm94eURlZmluaXRpb24MJEFjY291bnRJZAEAJFByb3h5VHlwZQEJAyxCbG9ja051bWJlcgEQAAwBIGRlbGVnYXRlAAEkQWNjb3VudElkAAEocHJveHlfdHlwZQkDASRQcm94eVR5cGUAARRkZWxheRABLEJsb2NrTnVtYmVyAAAtCgAAAikKADEKAAAECDUKGAA1CgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUATkKBFMAAAQAPQoBGFZlYzxUPgAAOQoIMHBhbGxldF9wcm94eTBBbm5vdW5jZW1lbnQMJEFjY291bnRJZAEAEEhhc2gBNCxCbG9ja051bWJlcgEQAAwBEHJlYWwAASRBY2NvdW50SWQAASRjYWxsX2hhc2g0ARBIYXNoAAEYaGVpZ2h0EAEsQmxvY2tOdW1iZXIAAD0KAAACOQoAQQoMMHBhbGxldF9wcm94eRhwYWxsZXQURXJyb3IEBFQAASAcVG9vTWFueQAABCEBVGhlcmUgYXJlIHRvbyBtYW55IHByb3hpZXMgcmVnaXN0ZXJlZCBvciB0b28gbWFueSBhbm5vdW5jZW1lbnRzIHBlbmRpbmcuIE5vdEZvdW5kAAEEdFByb3h5IHJlZ2lzdHJhdGlvbiBub3QgZm91bmQuIE5vdFByb3h5AAIEzFNlbmRlciBpcyBub3QgYSBwcm94eSBvZiB0aGUgYWNjb3VudCB0byBiZSBwcm94aWVkLixVbnByb3h5YWJsZQADBCEBQSBjYWxsIHdoaWNoIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBwcm94eSB0eXBlJ3MgZmlsdGVyIHdhcyBhdHRlbXB0ZWQuJER1cGxpY2F0ZQAEBGxBY2NvdW50IGlzIGFscmVhZHkgYSBwcm94eS4wTm9QZXJtaXNzaW9uAAUEFQFDYWxsIG1heSBub3QgYmUgbWFkZSBieSBwcm94eSBiZWNhdXNlIGl0IG1heSBlc2NhbGF0ZSBpdHMgcHJpdmlsZWdlcy4sVW5hbm5vdW5jZWQABgTQQW5ub3VuY2VtZW50LCBpZiBtYWRlIGF0IGFsbCwgd2FzIG1hZGUgdG9vIHJlY2VudGx5LixOb1NlbGZQcm94eQAHBGRDYW5ub3QgYWRkIHNlbGYgYXMgcHJveHkuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LkUKAAAECAAEAEkKCDxwYWxsZXRfbXVsdGlzaWcgTXVsdGlzaWcQLEJsb2NrTnVtYmVyARAcQmFsYW5jZQEYJEFjY291bnRJZAEAME1heEFwcHJvdmFscwAAEAEQd2hlbhUDAVhUaW1lcG9pbnQ8QmxvY2tOdW1iZXI+AAEcZGVwb3NpdBgBHEJhbGFuY2UAASRkZXBvc2l0b3IAASRBY2NvdW50SWQAASRhcHByb3ZhbHNNCgGMQm91bmRlZFZlYzxBY2NvdW50SWQsIE1heEFwcHJvdmFscz4AAE0KDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBAARTAAAEANEBARhWZWM8VD4AAFEKDDxwYWxsZXRfbXVsdGlzaWcYcGFsbGV0FEVycm9yBARUAAE4QE1pbmltdW1UaHJlc2hvbGQAAAR8VGhyZXNob2xkIG11c3QgYmUgMiBvciBncmVhdGVyLjxBbHJlYWR5QXBwcm92ZWQAAQSsQ2FsbCBpcyBhbHJlYWR5IGFwcHJvdmVkIGJ5IHRoaXMgc2lnbmF0b3J5LkROb0FwcHJvdmFsc05lZWRlZAACBJxDYWxsIGRvZXNuJ3QgbmVlZCBhbnkgKG1vcmUpIGFwcHJvdmFscy5EVG9vRmV3U2lnbmF0b3JpZXMAAwSoVGhlcmUgYXJlIHRvbyBmZXcgc2lnbmF0b3JpZXMgaW4gdGhlIGxpc3QuSFRvb01hbnlTaWduYXRvcmllcwAEBKxUaGVyZSBhcmUgdG9vIG1hbnkgc2lnbmF0b3JpZXMgaW4gdGhlIGxpc3QuVFNpZ25hdG9yaWVzT3V0T2ZPcmRlcgAFBA0BVGhlIHNpZ25hdG9yaWVzIHdlcmUgcHJvdmlkZWQgb3V0IG9mIG9yZGVyOyB0aGV5IHNob3VsZCBiZSBvcmRlcmVkLkxTZW5kZXJJblNpZ25hdG9yaWVzAAYEDQFUaGUgc2VuZGVyIHdhcyBjb250YWluZWQgaW4gdGhlIG90aGVyIHNpZ25hdG9yaWVzOyBpdCBzaG91bGRuJ3QgYmUuIE5vdEZvdW5kAAcE3E11bHRpc2lnIG9wZXJhdGlvbiBub3QgZm91bmQgd2hlbiBhdHRlbXB0aW5nIHRvIGNhbmNlbC4gTm90T3duZXIACAQtAU9ubHkgdGhlIGFjY291bnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhlIG11bHRpc2lnIGlzIGFibGUgdG8gY2FuY2VsIGl0LixOb1RpbWVwb2ludAAJBB0BTm8gdGltZXBvaW50IHdhcyBnaXZlbiwgeWV0IHRoZSBtdWx0aXNpZyBvcGVyYXRpb24gaXMgYWxyZWFkeSB1bmRlcndheS44V3JvbmdUaW1lcG9pbnQACgQtAUEgZGlmZmVyZW50IHRpbWVwb2ludCB3YXMgZ2l2ZW4gdG8gdGhlIG11bHRpc2lnIG9wZXJhdGlvbiB0aGF0IGlzIHVuZGVyd2F5LkxVbmV4cGVjdGVkVGltZXBvaW50AAsE9EEgdGltZXBvaW50IHdhcyBnaXZlbiwgeWV0IG5vIG11bHRpc2lnIG9wZXJhdGlvbiBpcyB1bmRlcndheS48TWF4V2VpZ2h0VG9vTG93AAwE0FRoZSBtYXhpbXVtIHdlaWdodCBpbmZvcm1hdGlvbiBwcm92aWRlZCB3YXMgdG9vIGxvdy40QWxyZWFkeVN0b3JlZAANBKBUaGUgZGF0YSB0byBiZSBzdG9yZWQgaXMgYWxyZWFkeSBzdG9yZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LlUKCDxwYWxsZXRfYm91bnRpZXMYQm91bnR5DCRBY2NvdW50SWQBABxCYWxhbmNlARgsQmxvY2tOdW1iZXIBEAAYASBwcm9wb3NlcgABJEFjY291bnRJZAABFHZhbHVlGAEcQmFsYW5jZQABDGZlZRgBHEJhbGFuY2UAATxjdXJhdG9yX2RlcG9zaXQYARxCYWxhbmNlAAEQYm9uZBgBHEJhbGFuY2UAARhzdGF0dXNZCgGQQm91bnR5U3RhdHVzPEFjY291bnRJZCwgQmxvY2tOdW1iZXI+AABZCgg8cGFsbGV0X2JvdW50aWVzMEJvdW50eVN0YXR1cwgkQWNjb3VudElkAQAsQmxvY2tOdW1iZXIBEAEYIFByb3Bvc2VkAAAAIEFwcHJvdmVkAAEAGEZ1bmRlZAACADxDdXJhdG9yUHJvcG9zZWQEARxjdXJhdG9yAAEkQWNjb3VudElkAAMAGEFjdGl2ZQgBHGN1cmF0b3IAASRBY2NvdW50SWQAASh1cGRhdGVfZHVlEAEsQmxvY2tOdW1iZXIABAA0UGVuZGluZ1BheW91dAwBHGN1cmF0b3IAASRBY2NvdW50SWQAASxiZW5lZmljaWFyeQABJEFjY291bnRJZAABJHVubG9ja19hdBABLEJsb2NrTnVtYmVyAAUAAF0KDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAYQoMPHBhbGxldF9ib3VudGllcxhwYWxsZXQURXJyb3IIBFQABEkAASxwSW5zdWZmaWNpZW50UHJvcG9zZXJzQmFsYW5jZQAABHhQcm9wb3NlcidzIGJhbGFuY2UgaXMgdG9vIGxvdy4wSW52YWxpZEluZGV4AAEEkE5vIHByb3Bvc2FsIG9yIGJvdW50eSBhdCB0aGF0IGluZGV4LjBSZWFzb25Ub29CaWcAAgSEVGhlIHJlYXNvbiBnaXZlbiBpcyBqdXN0IHRvbyBiaWcuQFVuZXhwZWN0ZWRTdGF0dXMAAwSAVGhlIGJvdW50eSBzdGF0dXMgaXMgdW5leHBlY3RlZC44UmVxdWlyZUN1cmF0b3IABARcUmVxdWlyZSBib3VudHkgY3VyYXRvci4wSW52YWxpZFZhbHVlAAUEVEludmFsaWQgYm91bnR5IHZhbHVlLihJbnZhbGlkRmVlAAYETEludmFsaWQgYm91bnR5IGZlZS40UGVuZGluZ1BheW91dAAHCGxBIGJvdW50eSBwYXlvdXQgaXMgcGVuZGluZy74VG8gY2FuY2VsIHRoZSBib3VudHksIHlvdSBtdXN0IHVuYXNzaWduIGFuZCBzbGFzaCB0aGUgY3VyYXRvci4kUHJlbWF0dXJlAAgERQFUaGUgYm91bnRpZXMgY2Fubm90IGJlIGNsYWltZWQvY2xvc2VkIGJlY2F1c2UgaXQncyBzdGlsbCBpbiB0aGUgY291bnRkb3duIHBlcmlvZC5QSGFzQWN0aXZlQ2hpbGRCb3VudHkACQQFAVRoZSBib3VudHkgY2Fubm90IGJlIGNsb3NlZCBiZWNhdXNlIGl0IGhhcyBhY3RpdmUgY2hpbGQgYm91bnRpZXMuNFRvb01hbnlRdWV1ZWQACgSYVG9vIG1hbnkgYXBwcm92YWxzIGFyZSBhbHJlYWR5IHF1ZXVlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuZQoIVHBhbGxldF9jaGlsZF9ib3VudGllcyxDaGlsZEJvdW50eQwkQWNjb3VudElkAQAcQmFsYW5jZQEYLEJsb2NrTnVtYmVyARAAFAE0cGFyZW50X2JvdW50eRABLEJvdW50eUluZGV4AAEUdmFsdWUYARxCYWxhbmNlAAEMZmVlGAEcQmFsYW5jZQABPGN1cmF0b3JfZGVwb3NpdBgBHEJhbGFuY2UAARhzdGF0dXNpCgGkQ2hpbGRCb3VudHlTdGF0dXM8QWNjb3VudElkLCBCbG9ja051bWJlcj4AAGkKCFRwYWxsZXRfY2hpbGRfYm91bnRpZXNEQ2hpbGRCb3VudHlTdGF0dXMIJEFjY291bnRJZAEALEJsb2NrTnVtYmVyARABEBRBZGRlZAAAADxDdXJhdG9yUHJvcG9zZWQEARxjdXJhdG9yAAEkQWNjb3VudElkAAEAGEFjdGl2ZQQBHGN1cmF0b3IAASRBY2NvdW50SWQAAgA0UGVuZGluZ1BheW91dAwBHGN1cmF0b3IAASRBY2NvdW50SWQAASxiZW5lZmljaWFyeQABJEFjY291bnRJZAABJHVubG9ja19hdBABLEJsb2NrTnVtYmVyAAMAAG0KDFRwYWxsZXRfY2hpbGRfYm91bnRpZXMYcGFsbGV0FEVycm9yBARUAAEMVFBhcmVudEJvdW50eU5vdEFjdGl2ZQAABKRUaGUgcGFyZW50IGJvdW50eSBpcyBub3QgaW4gYWN0aXZlIHN0YXRlLmRJbnN1ZmZpY2llbnRCb3VudHlCYWxhbmNlAAEE5FRoZSBib3VudHkgYmFsYW5jZSBpcyBub3QgZW5vdWdoIHRvIGFkZCBuZXcgY2hpbGQtYm91bnR5LlBUb29NYW55Q2hpbGRCb3VudGllcwACBA0BTnVtYmVyIG9mIGNoaWxkIGJvdW50aWVzIGV4Y2VlZHMgbGltaXQgYE1heEFjdGl2ZUNoaWxkQm91bnR5Q291bnRgLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC5xCgiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlNFJlYWR5U29sdXRpb24IJEFjY291bnRJZAAoTWF4V2lubmVycwAADAEgc3VwcG9ydHN1CgGYQm91bmRlZFN1cHBvcnRzPEFjY291bnRJZCwgTWF4V2lubmVycz4AARRzY29yZfUDATRFbGVjdGlvblNjb3JlAAEcY29tcHV0ZVEHATxFbGVjdGlvbkNvbXB1dGUAAHUKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBBQQEUwAABAABBAEYVmVjPFQ+AAB5CgiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlNFJvdW5kU25hcHNob3QIJEFjY291bnRJZAEAMERhdGFQcm92aWRlcgF9CgAIARh2b3RlcnOBCgFEVmVjPERhdGFQcm92aWRlcj4AARx0YXJnZXRz0QEBOFZlYzxBY2NvdW50SWQ+AAB9CgAABAwAMOUIAIEKAAACfQoAhQoMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAGJCgRTAAAEAI0KARhWZWM8VD4AAIkKAAAEDPUDEBAAjQoAAAKJCgCRCgyQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlGHNpZ25lZEBTaWduZWRTdWJtaXNzaW9uDCRBY2NvdW50SWQBABxCYWxhbmNlARggU29sdXRpb24BKQMAEAEMd2hvAAEkQWNjb3VudElkAAEcZGVwb3NpdBgBHEJhbGFuY2UAATByYXdfc29sdXRpb24lAwFUUmF3U29sdXRpb248U29sdXRpb24+AAEgY2FsbF9mZWUYARxCYWxhbmNlAACVCgyQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlGHBhbGxldBRFcnJvcgQEVAABPGhQcmVEaXNwYXRjaEVhcmx5U3VibWlzc2lvbgAABGRTdWJtaXNzaW9uIHdhcyB0b28gZWFybHkubFByZURpc3BhdGNoV3JvbmdXaW5uZXJDb3VudAABBIhXcm9uZyBudW1iZXIgb2Ygd2lubmVycyBwcmVzZW50ZWQuZFByZURpc3BhdGNoV2Vha1N1Ym1pc3Npb24AAgSQU3VibWlzc2lvbiB3YXMgdG9vIHdlYWssIHNjb3JlLXdpc2UuPFNpZ25lZFF1ZXVlRnVsbAADBEkBVGhlIHF1ZXVlIHdhcyBmdWxsLCBhbmQgdGhlIHNvbHV0aW9uIHdhcyBub3QgYmV0dGVyIHRoYW4gYW55IG9mIHRoZSBleGlzdGluZyBvbmVzLlhTaWduZWRDYW5ub3RQYXlEZXBvc2l0AAQElFRoZSBvcmlnaW4gZmFpbGVkIHRvIHBheSB0aGUgZGVwb3NpdC5QU2lnbmVkSW52YWxpZFdpdG5lc3MABQSgV2l0bmVzcyBkYXRhIHRvIGRpc3BhdGNoYWJsZSBpcyBpbnZhbGlkLkxTaWduZWRUb29NdWNoV2VpZ2h0AAYEuFRoZSBzaWduZWQgc3VibWlzc2lvbiBjb25zdW1lcyB0b28gbXVjaCB3ZWlnaHQ8T2N3Q2FsbFdyb25nRXJhAAcEmE9DVyBzdWJtaXR0ZWQgc29sdXRpb24gZm9yIHdyb25nIHJvdW5kXE1pc3NpbmdTbmFwc2hvdE1ldGFkYXRhAAgEqFNuYXBzaG90IG1ldGFkYXRhIHNob3VsZCBleGlzdCBidXQgZGlkbid0LlhJbnZhbGlkU3VibWlzc2lvbkluZGV4AAkE0GBTZWxmOjppbnNlcnRfc3VibWlzc2lvbmAgcmV0dXJuZWQgYW4gaW52YWxpZCBpbmRleC44Q2FsbE5vdEFsbG93ZWQACgSYVGhlIGNhbGwgaXMgbm90IGFsbG93ZWQgYXQgdGhpcyBwb2ludC44RmFsbGJhY2tGYWlsZWQACwRMVGhlIGZhbGxiYWNrIGZhaWxlZCxCb3VuZE5vdE1ldAAMBEhTb21lIGJvdW5kIG5vdCBtZXQ4VG9vTWFueVdpbm5lcnMADQScU3VibWl0dGVkIHNvbHV0aW9uIGhhcyB0b28gbWFueSB3aW5uZXJzZFByZURpc3BhdGNoRGlmZmVyZW50Um91bmQADgS4U3VibWlzc2lvbiB3YXMgcHJlcGFyZWQgZm9yIGEgZGlmZmVyZW50IHJvdW5kLgQNAUVycm9yIG9mIHRoZSBwYWxsZXQgdGhhdCBjYW4gYmUgcmV0dXJuZWQgaW4gcmVzcG9uc2UgdG8gZGlzcGF0Y2hlcy6ZCgxAcGFsbGV0X2JhZ3NfbGlzdBBsaXN0EE5vZGUIBFQABEkAABQBCGlkAAEwVDo6QWNjb3VudElkAAEQcHJldv0BAVBPcHRpb248VDo6QWNjb3VudElkPgABEG5leHT9AQFQT3B0aW9uPFQ6OkFjY291bnRJZD4AASRiYWdfdXBwZXIwASBUOjpTY29yZQABFHNjb3JlMAEgVDo6U2NvcmUAAJ0KDEBwYWxsZXRfYmFnc19saXN0EGxpc3QMQmFnCARUAARJAAAIARBoZWFk/QEBUE9wdGlvbjxUOjpBY2NvdW50SWQ+AAEQdGFpbP0BAVBPcHRpb248VDo6QWNjb3VudElkPgAAoQoAAAIwAKUKDEBwYWxsZXRfYmFnc19saXN0GHBhbGxldBRFcnJvcggEVAAESQABBBBMaXN0BACpCgEkTGlzdEVycm9yAAAEtEEgZXJyb3IgaW4gdGhlIGxpc3QgaW50ZXJmYWNlIGltcGxlbWVudGF0aW9uLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6pCgxAcGFsbGV0X2JhZ3NfbGlzdBBsaXN0JExpc3RFcnJvcgABECREdXBsaWNhdGUAAAAoTm90SGVhdmllcgABADBOb3RJblNhbWVCYWcAAgAwTm9kZU5vdEZvdW5kAAMAAK0KCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyhQb29sTWVtYmVyBARUAAAQARxwb29sX2lkEAEYUG9vbElkAAEYcG9pbnRzGAEwQmFsYW5jZU9mPFQ+AAFwbGFzdF9yZWNvcmRlZF9yZXdhcmRfY291bnRlctEGAUBUOjpSZXdhcmRDb3VudGVyAAE4dW5ib25kaW5nX2VyYXOxCgHgQm91bmRlZEJUcmVlTWFwPEVyYUluZGV4LCBCYWxhbmNlT2Y8VD4sIFQ6Ok1heFVuYm9uZGluZz4AALEKDExib3VuZGVkX2NvbGxlY3Rpb25zRGJvdW5kZWRfYnRyZWVfbWFwPEJvdW5kZWRCVHJlZU1hcAwESwEQBFYBGARTAAAEALUKAThCVHJlZU1hcDxLLCBWPgAAtQoEIEJUcmVlTWFwCARLARAEVgEYAAQA5QkAAAC5CghccGFsbGV0X25vbWluYXRpb25fcG9vbHM8Qm9uZGVkUG9vbElubmVyBARUAAAUAShjb21taXNzaW9uvQoBNENvbW1pc3Npb248VD4AAThtZW1iZXJfY291bnRlchABDHUzMgABGHBvaW50cxgBMEJhbGFuY2VPZjxUPgABFHJvbGVzyQoBXFBvb2xSb2xlczxUOjpBY2NvdW50SWQ+AAEUc3RhdGUhBAEkUG9vbFN0YXRlAAC9CghccGFsbGV0X25vbWluYXRpb25fcG9vbHMoQ29tbWlzc2lvbgQEVAAAFAEcY3VycmVudDkEAXxPcHRpb248KFBlcmJpbGwsIFQ6OkFjY291bnRJZCk+AAEMbWF4wQoBPE9wdGlvbjxQZXJiaWxsPgABLGNoYW5nZV9yYXRlxQoBvE9wdGlvbjxDb21taXNzaW9uQ2hhbmdlUmF0ZTxCbG9ja051bWJlckZvcjxUPj4+AAE0dGhyb3R0bGVfZnJvbWECAWRPcHRpb248QmxvY2tOdW1iZXJGb3I8VD4+AAFAY2xhaW1fcGVybWlzc2lvbkUEAbxPcHRpb248Q29tbWlzc2lvbkNsYWltUGVybWlzc2lvbjxUOjpBY2NvdW50SWQ+PgAAwQoEGE9wdGlvbgQEVAGsAQgQTm9uZQAAABBTb21lBACsAAABAADFCgQYT3B0aW9uBARUAUEEAQgQTm9uZQAAABBTb21lBABBBAAAAQAAyQoIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzJFBvb2xSb2xlcwQkQWNjb3VudElkAQAAEAEkZGVwb3NpdG9yAAEkQWNjb3VudElkAAEQcm9vdP0BAURPcHRpb248QWNjb3VudElkPgABJG5vbWluYXRvcv0BAURPcHRpb248QWNjb3VudElkPgABHGJvdW5jZXL9AQFET3B0aW9uPEFjY291bnRJZD4AAM0KCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyhSZXdhcmRQb29sBARUAAAUAXBsYXN0X3JlY29yZGVkX3Jld2FyZF9jb3VudGVy0QYBQFQ6OlJld2FyZENvdW50ZXIAAWxsYXN0X3JlY29yZGVkX3RvdGFsX3BheW91dHMYATBCYWxhbmNlT2Y8VD4AAVR0b3RhbF9yZXdhcmRzX2NsYWltZWQYATBCYWxhbmNlT2Y8VD4AAWB0b3RhbF9jb21taXNzaW9uX3BlbmRpbmcYATBCYWxhbmNlT2Y8VD4AAWB0b3RhbF9jb21taXNzaW9uX2NsYWltZWQYATBCYWxhbmNlT2Y8VD4AANEKCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBTdWJQb29scwQEVAAACAEYbm9fZXJh1QoBNFVuYm9uZFBvb2w8VD4AASB3aXRoX2VyYdkKAQEBQm91bmRlZEJUcmVlTWFwPEVyYUluZGV4LCBVbmJvbmRQb29sPFQ+LCBUb3RhbFVuYm9uZGluZ1Bvb2xzPFQ+PgAA1QoIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzKFVuYm9uZFBvb2wEBFQAAAgBGHBvaW50cxgBMEJhbGFuY2VPZjxUPgABHGJhbGFuY2UYATBCYWxhbmNlT2Y8VD4AANkKDExib3VuZGVkX2NvbGxlY3Rpb25zRGJvdW5kZWRfYnRyZWVfbWFwPEJvdW5kZWRCVHJlZU1hcAwESwEQBFYB1QoEUwAABADdCgE4QlRyZWVNYXA8SywgVj4AAN0KBCBCVHJlZU1hcAgESwEQBFYB1QoABADhCgAAAOEKAAAC5QoA5QoAAAQIENUKAOkKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAA7QoMXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzGHBhbGxldBRFcnJvcgQEVAABkDBQb29sTm90Rm91bmQAAASIQSAoYm9uZGVkKSBwb29sIGlkIGRvZXMgbm90IGV4aXN0LkhQb29sTWVtYmVyTm90Rm91bmQAAQRsQW4gYWNjb3VudCBpcyBub3QgYSBtZW1iZXIuSFJld2FyZFBvb2xOb3RGb3VuZAACBCEBQSByZXdhcmQgcG9vbCBkb2VzIG5vdCBleGlzdC4gSW4gYWxsIGNhc2VzIHRoaXMgaXMgYSBzeXN0ZW0gbG9naWMgZXJyb3IuQFN1YlBvb2xzTm90Rm91bmQAAwRoQSBzdWIgcG9vbCBkb2VzIG5vdCBleGlzdC5kQWNjb3VudEJlbG9uZ3NUb090aGVyUG9vbAAECE0BQW4gYWNjb3VudCBpcyBhbHJlYWR5IGRlbGVnYXRpbmcgaW4gYW5vdGhlciBwb29sLiBBbiBhY2NvdW50IG1heSBvbmx5IGJlbG9uZyB0byBvbmU8cG9vbCBhdCBhIHRpbWUuOEZ1bGx5VW5ib25kaW5nAAUIPQFUaGUgbWVtYmVyIGlzIGZ1bGx5IHVuYm9uZGVkIChhbmQgdGh1cyBjYW5ub3QgYWNjZXNzIHRoZSBib25kZWQgYW5kIHJld2FyZCBwb29sqGFueW1vcmUgdG8sIGZvciBleGFtcGxlLCBjb2xsZWN0IHJld2FyZHMpLkRNYXhVbmJvbmRpbmdMaW1pdAAGBAkBVGhlIG1lbWJlciBjYW5ub3QgdW5ib25kIGZ1cnRoZXIgY2h1bmtzIGR1ZSB0byByZWFjaGluZyB0aGUgbGltaXQuRENhbm5vdFdpdGhkcmF3QW55AAcETQFOb25lIG9mIHRoZSBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIHlldCBiZWNhdXNlIHRoZSBib25kaW5nIGR1cmF0aW9uIGhhcyBub3QgcGFzc2VkLkRNaW5pbXVtQm9uZE5vdE1ldAAIFCkBVGhlIGFtb3VudCBkb2VzIG5vdCBtZWV0IHRoZSBtaW5pbXVtIGJvbmQgdG8gZWl0aGVyIGpvaW4gb3IgY3JlYXRlIGEgcG9vbC4AVQFUaGUgZGVwb3NpdG9yIGNhbiBuZXZlciB1bmJvbmQgdG8gYSB2YWx1ZSBsZXNzIHRoYW4gYFBhbGxldDo6ZGVwb3NpdG9yX21pbl9ib25kYC4gVGhlXQFjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5nIHBlcm1pc3Npb25zIGZvciB0aGUgcG9vbC4gTWVtYmVycyBjYW4gbmV2ZXIgdW5ib25kIHRvIGFodmFsdWUgYmVsb3cgYE1pbkpvaW5Cb25kYC4wT3ZlcmZsb3dSaXNrAAkEIQFUaGUgdHJhbnNhY3Rpb24gY291bGQgbm90IGJlIGV4ZWN1dGVkIGR1ZSB0byBvdmVyZmxvdyByaXNrIGZvciB0aGUgcG9vbC40Tm90RGVzdHJveWluZwAKCF0BQSBwb29sIG11c3QgYmUgaW4gW2BQb29sU3RhdGU6OkRlc3Ryb3lpbmdgXSBpbiBvcmRlciBmb3IgdGhlIGRlcG9zaXRvciB0byB1bmJvbmQgb3IgZm9yuG90aGVyIG1lbWJlcnMgdG8gYmUgcGVybWlzc2lvbmxlc3NseSB1bmJvbmRlZC4wTm90Tm9taW5hdG9yAAsE9FRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5nIHBlcm1pc3Npb25zIGZvciB0aGUgcG9vbC5UTm90S2lja2VyT3JEZXN0cm95aW5nAAwEPQFFaXRoZXIgYSkgdGhlIGNhbGxlciBjYW5ub3QgbWFrZSBhIHZhbGlkIGtpY2sgb3IgYikgdGhlIHBvb2wgaXMgbm90IGRlc3Ryb3lpbmcuHE5vdE9wZW4ADQRwVGhlIHBvb2wgaXMgbm90IG9wZW4gdG8gam9pbiBNYXhQb29scwAOBIRUaGUgc3lzdGVtIGlzIG1heGVkIG91dCBvbiBwb29scy44TWF4UG9vbE1lbWJlcnMADwScVG9vIG1hbnkgbWVtYmVycyBpbiB0aGUgcG9vbCBvciBzeXN0ZW0uRENhbk5vdENoYW5nZVN0YXRlABAEiFRoZSBwb29scyBzdGF0ZSBjYW5ub3QgYmUgY2hhbmdlZC5URG9lc05vdEhhdmVQZXJtaXNzaW9uABEEuFRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBhZGVxdWF0ZSBwZXJtaXNzaW9ucy5UTWV0YWRhdGFFeGNlZWRzTWF4TGVuABIErE1ldGFkYXRhIGV4Y2VlZHMgW2BDb25maWc6Ok1heE1ldGFkYXRhTGVuYF0kRGVmZW5zaXZlBADxCgE4RGVmZW5zaXZlRXJyb3IAEwgxAVNvbWUgZXJyb3Igb2NjdXJyZWQgdGhhdCBzaG91bGQgbmV2ZXIgaGFwcGVuLiBUaGlzIHNob3VsZCBiZSByZXBvcnRlZCB0byB0aGUwbWFpbnRhaW5lcnMunFBhcnRpYWxVbmJvbmROb3RBbGxvd2VkUGVybWlzc2lvbmxlc3NseQAUBLxQYXJ0aWFsIHVuYm9uZGluZyBub3cgYWxsb3dlZCBwZXJtaXNzaW9ubGVzc2x5LlxNYXhDb21taXNzaW9uUmVzdHJpY3RlZAAVBB0BVGhlIHBvb2wncyBtYXggY29tbWlzc2lvbiBjYW5ub3QgYmUgc2V0IGhpZ2hlciB0aGFuIHRoZSBleGlzdGluZyB2YWx1ZS5gQ29tbWlzc2lvbkV4Y2VlZHNNYXhpbXVtABYE7FRoZSBzdXBwbGllZCBjb21taXNzaW9uIGV4Y2VlZHMgdGhlIG1heCBhbGxvd2VkIGNvbW1pc3Npb24ueENvbW1pc3Npb25FeGNlZWRzR2xvYmFsTWF4aW11bQAXBOhUaGUgc3VwcGxpZWQgY29tbWlzc2lvbiBleGNlZWRzIGdsb2JhbCBtYXhpbXVtIGNvbW1pc3Npb24uZENvbW1pc3Npb25DaGFuZ2VUaHJvdHRsZWQAGAQJAU5vdCBlbm91Z2ggYmxvY2tzIGhhdmUgc3VycGFzc2VkIHNpbmNlIHRoZSBsYXN0IGNvbW1pc3Npb24gdXBkYXRlLnhDb21taXNzaW9uQ2hhbmdlUmF0ZU5vdEFsbG93ZWQAGQQBAVRoZSBzdWJtaXR0ZWQgY2hhbmdlcyB0byBjb21taXNzaW9uIGNoYW5nZSByYXRlIGFyZSBub3QgYWxsb3dlZC5MTm9QZW5kaW5nQ29tbWlzc2lvbgAaBKBUaGVyZSBpcyBubyBwZW5kaW5nIGNvbW1pc3Npb24gdG8gY2xhaW0uWE5vQ29tbWlzc2lvbkN1cnJlbnRTZXQAGwSMTm8gY29tbWlzc2lvbiBjdXJyZW50IGhhcyBiZWVuIHNldC4sUG9vbElkSW5Vc2UAHARkUG9vbCBpZCBjdXJyZW50bHkgaW4gdXNlLjRJbnZhbGlkUG9vbElkAB0EnFBvb2wgaWQgcHJvdmlkZWQgaXMgbm90IGNvcnJlY3QvdXNhYmxlLkxCb25kRXh0cmFSZXN0cmljdGVkAB4E/EJvbmRpbmcgZXh0cmEgaXMgcmVzdHJpY3RlZCB0byB0aGUgZXhhY3QgcGVuZGluZyByZXdhcmQgYW1vdW50LjxOb3RoaW5nVG9BZGp1c3QAHwSwTm8gaW1iYWxhbmNlIGluIHRoZSBFRCBkZXBvc2l0IGZvciB0aGUgcG9vbC44Tm90aGluZ1RvU2xhc2gAIATMTm8gc2xhc2ggcGVuZGluZyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBtZW1iZXIuPEFscmVhZHlNaWdyYXRlZAAhBBUBVGhlIHBvb2wgb3IgbWVtYmVyIGRlbGVnYXRpb24gaGFzIGFscmVhZHkgbWlncmF0ZWQgdG8gZGVsZWdhdGUgc3Rha2UuLE5vdE1pZ3JhdGVkACIEFQFUaGUgcG9vbCBvciBtZW1iZXIgZGVsZWdhdGlvbiBoYXMgbm90IG1pZ3JhdGVkIHlldCB0byBkZWxlZ2F0ZSBzdGFrZS4wTm90U3VwcG9ydGVkACME8FRoaXMgY2FsbCBpcyBub3QgYWxsb3dlZCBpbiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGFsbGV0LgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC7xCgxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0OERlZmVuc2l2ZUVycm9yAAEcaE5vdEVub3VnaFNwYWNlSW5VbmJvbmRQb29sAAAAMFBvb2xOb3RGb3VuZAABAEhSZXdhcmRQb29sTm90Rm91bmQAAgBAU3ViUG9vbHNOb3RGb3VuZAADAHBCb25kZWRTdGFzaEtpbGxlZFByZW1hdHVyZWx5AAQAVERlbGVnYXRpb25VbnN1cHBvcnRlZAAFADxTbGFzaE5vdEFwcGxpZWQABgAA9QoMTHBhbGxldF9mYXN0X3Vuc3Rha2UUdHlwZXM4VW5zdGFrZVJlcXVlc3QEBFQAAAgBHHN0YXNoZXP5CgHYQm91bmRlZFZlYzwoVDo6QWNjb3VudElkLCBCYWxhbmNlT2Y8VD4pLCBUOjpCYXRjaFNpemU+AAEcY2hlY2tlZP0KAZBCb3VuZGVkVmVjPEVyYUluZGV4LCBNYXhDaGVja2luZzxUPj4AAPkKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBEQQEUwAABAANBAEYVmVjPFQ+AAD9CgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUARAEUwAABADlAQEYVmVjPFQ+AAABCwxMcGFsbGV0X2Zhc3RfdW5zdGFrZRhwYWxsZXQURXJyb3IEBFQAARg0Tm90Q29udHJvbGxlcgAADLhUaGUgcHJvdmlkZWQgQ29udHJvbGxlciBhY2NvdW50IHdhcyBub3QgZm91bmQuAMBUaGlzIG1lYW5zIHRoYXQgdGhlIGdpdmVuIGFjY291bnQgaXMgbm90IGJvbmRlZC40QWxyZWFkeVF1ZXVlZAABBKxUaGUgYm9uZGVkIGFjY291bnQgaGFzIGFscmVhZHkgYmVlbiBxdWV1ZWQuOE5vdEZ1bGx5Qm9uZGVkAAIEvFRoZSBib25kZWQgYWNjb3VudCBoYXMgYWN0aXZlIHVubG9ja2luZyBjaHVua3MuJE5vdFF1ZXVlZAADBLRUaGUgcHJvdmlkZWQgdW4tc3Rha2VyIGlzIG5vdCBpbiB0aGUgYFF1ZXVlYC4sQWxyZWFkeUhlYWQABAQFAVRoZSBwcm92aWRlZCB1bi1zdGFrZXIgaXMgYWxyZWFkeSBpbiBIZWFkLCBhbmQgY2Fubm90IGRlcmVnaXN0ZXIuOENhbGxOb3RBbGxvd2VkAAUEHQFUaGUgY2FsbCBpcyBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50IGJlY2F1c2UgdGhlIHBhbGxldCBpcyBub3QgYWN0aXZlLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4FCwxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zNGNvbmZpZ3VyYXRpb25ESG9zdENvbmZpZ3VyYXRpb24ELEJsb2NrTnVtYmVyARAAjAE0bWF4X2NvZGVfc2l6ZRABDHUzMgABSG1heF9oZWFkX2RhdGFfc2l6ZRABDHUzMgABWG1heF91cHdhcmRfcXVldWVfY291bnQQAQx1MzIAAVRtYXhfdXB3YXJkX3F1ZXVlX3NpemUQAQx1MzIAAVxtYXhfdXB3YXJkX21lc3NhZ2Vfc2l6ZRABDHUzMgABkG1heF91cHdhcmRfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZRABDHUzMgABiGhybXBfbWF4X21lc3NhZ2VfbnVtX3Blcl9jYW5kaWRhdGUQAQx1MzIAAWx2YWxpZGF0aW9uX3VwZ3JhZGVfY29vbGRvd24QASxCbG9ja051bWJlcgABYHZhbGlkYXRpb25fdXBncmFkZV9kZWxheRABLEJsb2NrTnVtYmVyAAFQYXN5bmNfYmFja2luZ19wYXJhbXNVBAFIQXN5bmNCYWNraW5nUGFyYW1zAAEwbWF4X3Bvdl9zaXplEAEMdTMyAAFkbWF4X2Rvd253YXJkX21lc3NhZ2Vfc2l6ZRABDHUzMgABkGhybXBfbWF4X3BhcmFjaGFpbl9vdXRib3VuZF9jaGFubmVscxABDHUzMgABTGhybXBfc2VuZGVyX2RlcG9zaXQYARxCYWxhbmNlAAFYaHJtcF9yZWNpcGllbnRfZGVwb3NpdBgBHEJhbGFuY2UAAWRocm1wX2NoYW5uZWxfbWF4X2NhcGFjaXR5EAEMdTMyAAFsaHJtcF9jaGFubmVsX21heF90b3RhbF9zaXplEAEMdTMyAAGMaHJtcF9tYXhfcGFyYWNoYWluX2luYm91bmRfY2hhbm5lbHMQAQx1MzIAAXRocm1wX2NoYW5uZWxfbWF4X21lc3NhZ2Vfc2l6ZRABDHUzMgABPGV4ZWN1dG9yX3BhcmFtc1kEAThFeGVjdXRvclBhcmFtcwABVGNvZGVfcmV0ZW50aW9uX3BlcmlvZBABLEJsb2NrTnVtYmVyAAE4bWF4X3ZhbGlkYXRvcnNhAgEsT3B0aW9uPHUzMj4AAThkaXNwdXRlX3BlcmlvZBABMFNlc3Npb25JbmRleAABpGRpc3B1dGVfcG9zdF9jb25jbHVzaW9uX2FjY2VwdGFuY2VfcGVyaW9kEAEsQmxvY2tOdW1iZXIAATRub19zaG93X3Nsb3RzEAEMdTMyAAFAbl9kZWxheV90cmFuY2hlcxABDHUzMgABaHplcm90aF9kZWxheV90cmFuY2hlX3dpZHRoEAEMdTMyAAFAbmVlZGVkX2FwcHJvdmFscxABDHUzMgABYHJlbGF5X3ZyZl9tb2R1bG9fc2FtcGxlcxABDHUzMgABOHB2Zl92b3RpbmdfdHRsEAEwU2Vzc2lvbkluZGV4AAGAbWluaW11bV92YWxpZGF0aW9uX3VwZ3JhZGVfZGVsYXkQASxCbG9ja051bWJlcgABVG1pbmltdW1fYmFja2luZ192b3RlcxABDHUzMgABNG5vZGVfZmVhdHVyZXORBAEwTm9kZUZlYXR1cmVzAAFYYXBwcm92YWxfdm90aW5nX3BhcmFtc20EAVBBcHByb3ZhbFZvdGluZ1BhcmFtcwABQHNjaGVkdWxlcl9wYXJhbXNxBAFwU2NoZWR1bGVyUGFyYW1zPEJsb2NrTnVtYmVyPgAACQsAAAINCwANCwAABAgQBQsAEQsQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluczRjb25maWd1cmF0aW9uGHBhbGxldBRFcnJvcgQEVAABBDxJbnZhbGlkTmV3VmFsdWUAAATcVGhlIG5ldyB2YWx1ZSBmb3IgYSBjb25maWd1cmF0aW9uIHBhcmFtZXRlciBpcyBpbnZhbGlkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4VCwAAApkEABkLAAACHQIAHQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxhzaGFyZWRoQWxsb3dlZFJlbGF5UGFyZW50c1RyYWNrZXIIEEhhc2gBNCxCbG9ja051bWJlcgEQAAgBGGJ1ZmZlciELAVhWZWNEZXF1ZTwoSGFzaCwgSGFzaCk+AAE0bGF0ZXN0X251bWJlchABLEJsb2NrTnVtYmVyAAAhCwAAAiULACULAAAECDQ0ACkLAAACLQsALQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRpbmNsdXNpb25wQ2FuZGlkYXRlUGVuZGluZ0F2YWlsYWJpbGl0eQgESAE0BE4BEAAkARBjb3JlcQcBJENvcmVJbmRleAABEGhhc2jtBAE0Q2FuZGlkYXRlSGFzaAABKGRlc2NyaXB0b3KtBAFYQ2FuZGlkYXRlRGVzY3JpcHRvcjxIPgABLGNvbW1pdG1lbnRzvQQBUENhbmRpZGF0ZUNvbW1pdG1lbnRzAAFIYXZhaWxhYmlsaXR5X3ZvdGVzkQQBYEJpdFZlYzx1OCwgQml0T3JkZXJMc2IwPgABHGJhY2tlcnORBAFgQml0VmVjPHU4LCBCaXRPcmRlckxzYjA+AAFMcmVsYXlfcGFyZW50X251bWJlchABBE4AAUBiYWNrZWRfaW5fbnVtYmVyEAEETgABNGJhY2tpbmdfZ3JvdXB1BwEoR3JvdXBJbmRleAAAMQsQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRpbmNsdXNpb24YcGFsbGV0FEVycm9yBARUAAFIZFZhbGlkYXRvckluZGV4T3V0T2ZCb3VuZHMAAAR4VmFsaWRhdG9yIGluZGV4IG91dCBvZiBib3VuZHMuUFVuc2NoZWR1bGVkQ2FuZGlkYXRlAAEErENhbmRpZGF0ZSBzdWJtaXR0ZWQgYnV0IHBhcmEgbm90IHNjaGVkdWxlZC5ASGVhZERhdGFUb29MYXJnZQACBKRIZWFkIGRhdGEgZXhjZWVkcyB0aGUgY29uZmlndXJlZCBtYXhpbXVtLlBQcmVtYXR1cmVDb2RlVXBncmFkZQADBGRDb2RlIHVwZ3JhZGUgcHJlbWF0dXJlbHkuPE5ld0NvZGVUb29MYXJnZQAEBGBPdXRwdXQgY29kZSBpcyB0b28gbGFyZ2VURGlzYWxsb3dlZFJlbGF5UGFyZW50AAUI7FRoZSBjYW5kaWRhdGUncyByZWxheS1wYXJlbnQgd2FzIG5vdCBhbGxvd2VkLiBFaXRoZXIgaXQgd2FzJQFub3QgcmVjZW50IGVub3VnaCBvciBpdCBkaWRuJ3QgYWR2YW5jZSBiYXNlZCBvbiB0aGUgbGFzdCBwYXJhY2hhaW4gYmxvY2suREludmFsaWRBc3NpZ25tZW50AAYIFQFGYWlsZWQgdG8gY29tcHV0ZSBncm91cCBpbmRleCBmb3IgdGhlIGNvcmU6IGVpdGhlciBpdCdzIG91dCBvZiBib3VuZHPob3IgdGhlIHJlbGF5IHBhcmVudCBkb2Vzbid0IGJlbG9uZyB0byB0aGUgY3VycmVudCBzZXNzaW9uLkRJbnZhbGlkR3JvdXBJbmRleAAHBJxJbnZhbGlkIGdyb3VwIGluZGV4IGluIGNvcmUgYXNzaWdubWVudC5MSW5zdWZmaWNpZW50QmFja2luZwAIBJBJbnN1ZmZpY2llbnQgKG5vbi1tYWpvcml0eSkgYmFja2luZy44SW52YWxpZEJhY2tpbmcACQTkSW52YWxpZCAoYmFkIHNpZ25hdHVyZSwgdW5rbm93biB2YWxpZGF0b3IsIGV0Yy4pIGJhY2tpbmcuRE5vdENvbGxhdG9yU2lnbmVkAAoEaENvbGxhdG9yIGRpZCBub3Qgc2lnbiBQb1YuaFZhbGlkYXRpb25EYXRhSGFzaE1pc21hdGNoAAsExFRoZSB2YWxpZGF0aW9uIGRhdGEgaGFzaCBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZC6ASW5jb3JyZWN0RG93bndhcmRNZXNzYWdlSGFuZGxpbmcADATYVGhlIGRvd253YXJkIG1lc3NhZ2UgcXVldWUgaXMgbm90IHByb2Nlc3NlZCBjb3JyZWN0bHkuVEludmFsaWRVcHdhcmRNZXNzYWdlcwANBB0BQXQgbGVhc3Qgb25lIHVwd2FyZCBtZXNzYWdlIHNlbnQgZG9lcyBub3QgcGFzcyB0aGUgYWNjZXB0YW5jZSBjcml0ZXJpYS5gSHJtcFdhdGVybWFya01pc2hhbmRsaW5nAA4EEQFUaGUgY2FuZGlkYXRlIGRpZG4ndCBmb2xsb3cgdGhlIHJ1bGVzIG9mIEhSTVAgd2F0ZXJtYXJrIGFkdmFuY2VtZW50LkxJbnZhbGlkT3V0Ym91bmRIcm1wAA8E1FRoZSBIUk1QIG1lc3NhZ2VzIHNlbnQgYnkgdGhlIGNhbmRpZGF0ZSBpcyBub3QgdmFsaWQuZEludmFsaWRWYWxpZGF0aW9uQ29kZUhhc2gAEATcVGhlIHZhbGlkYXRpb24gY29kZSBoYXNoIG9mIHRoZSBjYW5kaWRhdGUgaXMgbm90IHZhbGlkLkBQYXJhSGVhZE1pc21hdGNoABEIVQFUaGUgYHBhcmFfaGVhZGAgaGFzaCBpbiB0aGUgY2FuZGlkYXRlIGRlc2NyaXB0b3IgZG9lc24ndCBtYXRjaCB0aGUgaGFzaCBvZiB0aGUgYWN0dWFsdHBhcmEgaGVhZCBpbiB0aGUgY29tbWl0bWVudHMuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LjULDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3TFNjcmFwZWRPbkNoYWluVm90ZXMEBEgBNAAMARxzZXNzaW9uEAEwU2Vzc2lvbkluZGV4AAGAYmFja2luZ192YWxpZGF0b3JzX3Blcl9jYW5kaWRhdGU5CwEdAVZlYzwoQ2FuZGlkYXRlUmVjZWlwdDxIPiwgVmVjPChWYWxpZGF0b3JJbmRleCwgVmFsaWRpdHlBdHRlc3RhdGlvbik+KQo+AAEgZGlzcHV0ZXPlBAFgTXVsdGlEaXNwdXRlU3RhdGVtZW50U2V0AAA5CwAAAj0LAD0LAAAECG0HQQsAQQsAAAJFCwBFCwAABAiZBOEEAEkLEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnM4cGFyYXNfaW5oZXJlbnQYcGFsbGV0FEVycm9yBARUAAEUZFRvb01hbnlJbmNsdXNpb25JbmhlcmVudHMAAATMSW5jbHVzaW9uIGluaGVyZW50IGNhbGxlZCBtb3JlIHRoYW4gb25jZSBwZXIgYmxvY2suTEludmFsaWRQYXJlbnRIZWFkZXIAAQhVAVRoZSBoYXNoIG9mIHRoZSBzdWJtaXR0ZWQgcGFyZW50IGhlYWRlciBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gdGhlIHNhdmVkIGJsb2NrIGhhc2ggb2YsdGhlIHBhcmVudC5ISW5oZXJlbnRPdmVyd2VpZ2h0AAIECQFUaGUgZGF0YSBnaXZlbiB0byB0aGUgaW5oZXJlbnQgd2lsbCByZXN1bHQgaW4gYW4gb3ZlcndlaWdodCBibG9jay6EQ2FuZGlkYXRlc0ZpbHRlcmVkRHVyaW5nRXhlY3V0aW9uAAMITQFBIGNhbmRpZGF0ZSB3YXMgZmlsdGVyZWQgZHVyaW5nIGluaGVyZW50IGV4ZWN1dGlvbi4gVGhpcyBzaG91bGQgaGF2ZSBvbmx5IGJlZW4gZG9uZUBkdXJpbmcgY3JlYXRpb24uUFVuc2NoZWR1bGVkQ2FuZGlkYXRlAAQEdFRvbyBtYW55IGNhbmRpZGF0ZXMgc3VwcGxpZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0Lk0LAAACFQsAUQsAAAJVCwBVCxBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJHNjaGVkdWxlchhwYWxsZXQwQ29yZU9jY3VwaWVkBAROARABCBBGcmVlAAAAFFBhcmFzBABZCwE0UGFyYXNFbnRyeTxOPgABAABZCxBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJHNjaGVkdWxlchhwYWxsZXQoUGFyYXNFbnRyeQQETgEQAAwBKGFzc2lnbm1lbnRdCwEoQXNzaWdubWVudAABVGF2YWlsYWJpbGl0eV90aW1lb3V0cxABDHUzMgABDHR0bBABBE4AAF0LEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkc2NoZWR1bGVyGGNvbW1vbihBc3NpZ25tZW50AAEIEFBvb2wIARxwYXJhX2lkjQIBGFBhcmFJZAABKGNvcmVfaW5kZXhxBwEkQ29yZUluZGV4AAAAEEJ1bGsEAI0CARhQYXJhSWQAAQAAYQsEIEJUcmVlTWFwCARLAXEHBFYBZQsABABpCwAAAGULAAACWQsAaQsAAAJtCwBtCwAABAhxB2ULAHELDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXNcUHZmQ2hlY2tBY3RpdmVWb3RlU3RhdGUELEJsb2NrTnVtYmVyARAAFAEwdm90ZXNfYWNjZXB0kQQBYEJpdFZlYzx1OCwgQml0T3JkZXJMc2IwPgABMHZvdGVzX3JlamVjdJEEAWBCaXRWZWM8dTgsIEJpdE9yZGVyTHNiMD4AAQxhZ2UQATBTZXNzaW9uSW5kZXgAAShjcmVhdGVkX2F0EAEsQmxvY2tOdW1iZXIAARhjYXVzZXN1CwF8VmVjPFB2ZkNoZWNrQ2F1c2U8QmxvY2tOdW1iZXI+PgAAdQsAAAJ5CwB5CwxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzNFB2ZkNoZWNrQ2F1c2UELEJsb2NrTnVtYmVyARABCChPbmJvYXJkaW5nBACNAgEYUGFyYUlkAAAAHFVwZ3JhZGUMAQhpZI0CARhQYXJhSWQAASxpbmNsdWRlZF9hdBABLEJsb2NrTnVtYmVyAAFAdXBncmFkZV9zdHJhdGVneX0LATxVcGdyYWRlU3RyYXRlZ3kAAQAAfQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxRwYXJhczxVcGdyYWRlU3RyYXRlZ3kAAQhAU2V0R29BaGVhZFNpZ25hbAAAAFBBcHBseUF0RXhwZWN0ZWRCbG9jawABAACBCwAAArkEAIULAAACjQIAiQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxRwYXJhczRQYXJhTGlmZWN5Y2xlAAEcKE9uYm9hcmRpbmcAAAAoUGFyYXRocmVhZAABACRQYXJhY2hhaW4AAgBMVXBncmFkaW5nUGFyYXRocmVhZAADAFBEb3duZ3JhZGluZ1BhcmFjaGFpbgAEAFRPZmZib2FyZGluZ1BhcmF0aHJlYWQABQBQT2ZmYm9hcmRpbmdQYXJhY2hhaW4ABgAAjQsAAAQIjQIQAJELDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXNAUGFyYVBhc3RDb2RlTWV0YQQETgEQAAgBNHVwZ3JhZGVfdGltZXOVCwFgVmVjPFJlcGxhY2VtZW50VGltZXM8Tj4+AAEsbGFzdF9wcnVuZWRhAgEkT3B0aW9uPE4+AACVCwAAApkLAJkLDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXNAUmVwbGFjZW1lbnRUaW1lcwQETgEQAAgBLGV4cGVjdGVkX2F0EAEETgABMGFjdGl2YXRlZF9hdBABBE4AAJ0LAAACjQsAoQsMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc4VXBncmFkZUdvQWhlYWQAAQgUQWJvcnQAAAAcR29BaGVhZAABAAClCwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N0hVcGdyYWRlUmVzdHJpY3Rpb24AAQQcUHJlc2VudAAAAACpCwxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzPFBhcmFHZW5lc2lzQXJncwAADAEwZ2VuZXNpc19oZWFk2QQBIEhlYWREYXRhAAE8dmFsaWRhdGlvbl9jb2Rl1QQBOFZhbGlkYXRpb25Db2RlAAEkcGFyYV9raW5kIAEgUGFyYUtpbmQAAK0LEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXMYcGFsbGV0FEVycm9yBARUAAE0NE5vdFJlZ2lzdGVyZWQAAASUUGFyYSBpcyBub3QgcmVnaXN0ZXJlZCBpbiBvdXIgc3lzdGVtLjRDYW5ub3RPbmJvYXJkAAEEFQFQYXJhIGNhbm5vdCBiZSBvbmJvYXJkZWQgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IHRyYWNrZWQgYnkgb3VyIHN5c3RlbS44Q2Fubm90T2ZmYm9hcmQAAgScUGFyYSBjYW5ub3QgYmUgb2ZmYm9hcmRlZCBhdCB0aGlzIHRpbWUuNENhbm5vdFVwZ3JhZGUAAwTUUGFyYSBjYW5ub3QgYmUgdXBncmFkZWQgdG8gYSBsZWFzZSBob2xkaW5nIHBhcmFjaGFpbi48Q2Fubm90RG93bmdyYWRlAAQE0FBhcmEgY2Fubm90IGJlIGRvd25ncmFkZWQgdG8gYW4gb24tZGVtYW5kIHBhcmFjaGFpbi5YUHZmQ2hlY2tTdGF0ZW1lbnRTdGFsZQAFBLBUaGUgc3RhdGVtZW50IGZvciBQVkYgcHJlLWNoZWNraW5nIGlzIHN0YWxlLlxQdmZDaGVja1N0YXRlbWVudEZ1dHVyZQAGBOxUaGUgc3RhdGVtZW50IGZvciBQVkYgcHJlLWNoZWNraW5nIGlzIGZvciBhIGZ1dHVyZSBzZXNzaW9uLoRQdmZDaGVja1ZhbGlkYXRvckluZGV4T3V0T2ZCb3VuZHMABwSkQ2xhaW1lZCB2YWxpZGF0b3IgaW5kZXggaXMgb3V0IG9mIGJvdW5kcy5gUHZmQ2hlY2tJbnZhbGlkU2lnbmF0dXJlAAgEyFRoZSBzaWduYXR1cmUgZm9yIHRoZSBQVkYgcHJlLWNoZWNraW5nIGlzIGludmFsaWQuSFB2ZkNoZWNrRG91YmxlVm90ZQAJBLBUaGUgZ2l2ZW4gdmFsaWRhdG9yIGFscmVhZHkgaGFzIGNhc3QgYSB2b3RlLlhQdmZDaGVja1N1YmplY3RJbnZhbGlkAAoE9FRoZSBnaXZlbiBQVkYgZG9lcyBub3QgZXhpc3QgYXQgdGhlIG1vbWVudCBvZiBwcm9jZXNzIGEgdm90ZS5EQ2Fubm90VXBncmFkZUNvZGUACwTMUGFyYWNoYWluIGNhbm5vdCBjdXJyZW50bHkgc2NoZWR1bGUgYSBjb2RlIHVwZ3JhZGUuLEludmFsaWRDb2RlAAwEdEludmFsaWQgdmFsaWRhdGlvbiBjb2RlIHNpemUuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LrELAAACtQsAtQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyxpbml0aWFsaXplclRCdWZmZXJlZFNlc3Npb25DaGFuZ2UAAAwBKHZhbGlkYXRvcnMZCwFAVmVjPFZhbGlkYXRvcklkPgABGHF1ZXVlZBkLAUBWZWM8VmFsaWRhdG9ySWQ+AAE0c2Vzc2lvbl9pbmRleBABMFNlc3Npb25JbmRleAAAuQsAAAK9CwC9CwhgcG9sa2Fkb3RfY29yZV9wcmltaXRpdmVzWEluYm91bmREb3dud2FyZE1lc3NhZ2UELEJsb2NrTnVtYmVyARAACAEcc2VudF9hdBABLEJsb2NrTnVtYmVyAAEMbXNnOAE8RG93bndhcmRNZXNzYWdlAADBCwxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zEGhybXBYSHJtcE9wZW5DaGFubmVsUmVxdWVzdAAAGAEkY29uZmlybWVkIAEQYm9vbAABEF9hZ2UQATBTZXNzaW9uSW5kZXgAAThzZW5kZXJfZGVwb3NpdBgBHEJhbGFuY2UAAUBtYXhfbWVzc2FnZV9zaXplEAEMdTMyAAEwbWF4X2NhcGFjaXR5EAEMdTMyAAE4bWF4X3RvdGFsX3NpemUQAQx1MzIAAMULAAACGQUAyQsMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxBocm1wLEhybXBDaGFubmVsAAAgATBtYXhfY2FwYWNpdHkQAQx1MzIAAThtYXhfdG90YWxfc2l6ZRABDHUzMgABQG1heF9tZXNzYWdlX3NpemUQAQx1MzIAASRtc2dfY291bnQQAQx1MzIAASh0b3RhbF9zaXplEAEMdTMyAAEgbXFjX2hlYWSdAgEwT3B0aW9uPEhhc2g+AAE4c2VuZGVyX2RlcG9zaXQYARxCYWxhbmNlAAFEcmVjaXBpZW50X2RlcG9zaXQYARxCYWxhbmNlAADNCwAAAtELANELCGBwb2xrYWRvdF9jb3JlX3ByaW1pdGl2ZXNISW5ib3VuZEhybXBNZXNzYWdlBCxCbG9ja051bWJlcgEQAAgBHHNlbnRfYXQQASxCbG9ja051bWJlcgABEGRhdGE4AVBzcF9zdGQ6OnZlYzo6VmVjPHU4PgAA1QsAAALZCwDZCwAABAgQhQsA3QsQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxBocm1wGHBhbGxldBRFcnJvcgQEVAABUFRPcGVuSHJtcENoYW5uZWxUb1NlbGYAAATEVGhlIHNlbmRlciB0cmllZCB0byBvcGVuIGEgY2hhbm5lbCB0byB0aGVtc2VsdmVzLnxPcGVuSHJtcENoYW5uZWxJbnZhbGlkUmVjaXBpZW50AAEEiFRoZSByZWNpcGllbnQgaXMgbm90IGEgdmFsaWQgcGFyYS5sT3BlbkhybXBDaGFubmVsWmVyb0NhcGFjaXR5AAIEfFRoZSByZXF1ZXN0ZWQgY2FwYWNpdHkgaXMgemVyby6MT3BlbkhybXBDaGFubmVsQ2FwYWNpdHlFeGNlZWRzTGltaXQAAwTAVGhlIHJlcXVlc3RlZCBjYXBhY2l0eSBleGNlZWRzIHRoZSBnbG9iYWwgbGltaXQueE9wZW5Icm1wQ2hhbm5lbFplcm9NZXNzYWdlU2l6ZQAEBKBUaGUgcmVxdWVzdGVkIG1heGltdW0gbWVzc2FnZSBzaXplIGlzIDAumE9wZW5Icm1wQ2hhbm5lbE1lc3NhZ2VTaXplRXhjZWVkc0xpbWl0AAUEKQFUaGUgb3BlbiByZXF1ZXN0IHJlcXVlc3RlZCB0aGUgbWVzc2FnZSBzaXplIHRoYXQgZXhjZWVkcyB0aGUgZ2xvYmFsIGxpbWl0LnBPcGVuSHJtcENoYW5uZWxBbHJlYWR5RXhpc3RzAAYEaFRoZSBjaGFubmVsIGFscmVhZHkgZXhpc3RzfE9wZW5Icm1wQ2hhbm5lbEFscmVhZHlSZXF1ZXN0ZWQABwTQVGhlcmUgaXMgYWxyZWFkeSBhIHJlcXVlc3QgdG8gb3BlbiB0aGUgc2FtZSBjaGFubmVsLnBPcGVuSHJtcENoYW5uZWxMaW1pdEV4Y2VlZGVkAAgEHQFUaGUgc2VuZGVyIGFscmVhZHkgaGFzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBhbGxvd2VkIG91dGJvdW5kIGNoYW5uZWxzLnBBY2NlcHRIcm1wQ2hhbm5lbERvZXNudEV4aXN0AAkE4FRoZSBjaGFubmVsIGZyb20gdGhlIHNlbmRlciB0byB0aGUgb3JpZ2luIGRvZXNuJ3QgZXhpc3QuhEFjY2VwdEhybXBDaGFubmVsQWxyZWFkeUNvbmZpcm1lZAAKBIRUaGUgY2hhbm5lbCBpcyBhbHJlYWR5IGNvbmZpcm1lZC54QWNjZXB0SHJtcENoYW5uZWxMaW1pdEV4Y2VlZGVkAAsEJQFUaGUgcmVjaXBpZW50IGFscmVhZHkgaGFzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBhbGxvd2VkIGluYm91bmQgY2hhbm5lbHMucENsb3NlSHJtcENoYW5uZWxVbmF1dGhvcml6ZWQADARVAVRoZSBvcmlnaW4gdHJpZXMgdG8gY2xvc2UgYSBjaGFubmVsIHdoZXJlIGl0IGlzIG5laXRoZXIgdGhlIHNlbmRlciBub3IgdGhlIHJlY2lwaWVudC5sQ2xvc2VIcm1wQ2hhbm5lbERvZXNudEV4aXN0AA0EnFRoZSBjaGFubmVsIHRvIGJlIGNsb3NlZCBkb2Vzbid0IGV4aXN0LnxDbG9zZUhybXBDaGFubmVsQWxyZWFkeVVuZGVyd2F5AA4EvFRoZSBjaGFubmVsIGNsb3NlIHJlcXVlc3QgaXMgYWxyZWFkeSByZXF1ZXN0ZWQuhENhbmNlbEhybXBPcGVuQ2hhbm5lbFVuYXV0aG9yaXplZAAPBF0BQ2FuY2VsaW5nIGlzIHJlcXVlc3RlZCBieSBuZWl0aGVyIHRoZSBzZW5kZXIgbm9yIHJlY2lwaWVudCBvZiB0aGUgb3BlbiBjaGFubmVsIHJlcXVlc3QuaE9wZW5Icm1wQ2hhbm5lbERvZXNudEV4aXN0ABAEfFRoZSBvcGVuIHJlcXVlc3QgZG9lc24ndCBleGlzdC58T3BlbkhybXBDaGFubmVsQWxyZWFkeUNvbmZpcm1lZAARBC0BQ2Fubm90IGNhbmNlbCBhbiBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0IGJlY2F1c2UgaXQgaXMgYWxyZWFkeSBjb25maXJtZWQuMFdyb25nV2l0bmVzcwASBIxUaGUgcHJvdmlkZWQgd2l0bmVzcyBkYXRhIGlzIHdyb25nLnBDaGFubmVsQ3JlYXRpb25Ob3RBdXRob3JpemVkABME6FRoZSBjaGFubmVsIGJldHdlZW4gdGhlc2UgdHdvIGNoYWlucyBjYW5ub3QgYmUgYXV0aG9yaXplZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQu4QsAAAIhAgDlCwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NyxTZXNzaW9uSW5mbwAANAFgYWN0aXZlX3ZhbGlkYXRvcl9pbmRpY2VzFQsBTFZlYzxWYWxpZGF0b3JJbmRleD4AASxyYW5kb21fc2VlZAQBIFt1ODsgMzJdAAE4ZGlzcHV0ZV9wZXJpb2QQATBTZXNzaW9uSW5kZXgAASh2YWxpZGF0b3Jz6QsBnEluZGV4ZWRWZWM8VmFsaWRhdG9ySW5kZXgsIFZhbGlkYXRvcklkPgABOGRpc2NvdmVyeV9rZXlzaQkBZFZlYzxBdXRob3JpdHlEaXNjb3ZlcnlJZD4AATxhc3NpZ25tZW50X2tleXPhCwFEVmVjPEFzc2lnbm1lbnRJZD4AAUB2YWxpZGF0b3JfZ3JvdXBz7QsBrEluZGV4ZWRWZWM8R3JvdXBJbmRleCwgVmVjPFZhbGlkYXRvckluZGV4Pj4AARxuX2NvcmVzEAEMdTMyAAFoemVyb3RoX2RlbGF5X3RyYW5jaGVfd2lkdGgQAQx1MzIAAWByZWxheV92cmZfbW9kdWxvX3NhbXBsZXMQAQx1MzIAAUBuX2RlbGF5X3RyYW5jaGVzEAEMdTMyAAE0bm9fc2hvd19zbG90cxABDHUzMgABQG5lZWRlZF9hcHByb3ZhbHMQAQx1MzIAAOkLDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3KEluZGV4ZWRWZWMIBEsBmQQEVgEdAgAEABkLARhWZWM8Vj4AAO0LDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3KEluZGV4ZWRWZWMIBEsBdQcEVgEVCwAEAE0LARhWZWM8Vj4AAPELAAAECBDtBAD1CwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NzBEaXNwdXRlU3RhdGUEBE4BEAAQATh2YWxpZGF0b3JzX2ZvcpEEAXxCaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+AAFIdmFsaWRhdG9yc19hZ2FpbnN0kQQBfEJpdFZlYzx1OCwgYml0dmVjOjpvcmRlcjo6THNiMD4AARRzdGFydBABBE4AATBjb25jbHVkZWRfYXRhAgEkT3B0aW9uPE4+AAD5CwQgQlRyZWVTZXQEBFQBmQQABAAVCwAAAP0LEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMYcGFsbGV0FEVycm9yBARUAAEkdER1cGxpY2F0ZURpc3B1dGVTdGF0ZW1lbnRTZXRzAAAEqER1cGxpY2F0ZSBkaXNwdXRlIHN0YXRlbWVudCBzZXRzIHByb3ZpZGVkLlxBbmNpZW50RGlzcHV0ZVN0YXRlbWVudAABBIxBbmNpZW50IGRpc3B1dGUgc3RhdGVtZW50IHByb3ZpZGVkLmRWYWxpZGF0b3JJbmRleE91dE9mQm91bmRzAAIE6FZhbGlkYXRvciBpbmRleCBvbiBzdGF0ZW1lbnQgaXMgb3V0IG9mIGJvdW5kcyBmb3Igc2Vzc2lvbi5ASW52YWxpZFNpZ25hdHVyZQADBHxJbnZhbGlkIHNpZ25hdHVyZSBvbiBzdGF0ZW1lbnQuSER1cGxpY2F0ZVN0YXRlbWVudAAEBMxWYWxpZGF0b3Igdm90ZSBzdWJtaXR0ZWQgbW9yZSB0aGFuIG9uY2UgdG8gZGlzcHV0ZS5IU2luZ2xlU2lkZWREaXNwdXRlAAUExEEgZGlzcHV0ZSB3aGVyZSB0aGVyZSBhcmUgb25seSB2b3RlcyBvbiBvbmUgc2lkZS48TWFsaWNpb3VzQmFja2VyAAYEnEEgZGlzcHV0ZSB2b3RlIGZyb20gYSBtYWxpY2lvdXMgYmFja2VyLkxNaXNzaW5nQmFja2luZ1ZvdGVzAAcE4E5vIGJhY2tpbmcgdm90ZXMgd2VyZSBwcm92aWRlcyBhbG9uZyBkaXNwdXRlIHN0YXRlbWVudHMuSFVuY29uZmlybWVkRGlzcHV0ZQAIBLBVbmNvbmZpcm1lZCBkaXNwdXRlIHN0YXRlbWVudCBzZXRzIHByb3ZpZGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4BDBBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NyBzbGFzaGluZzhQZW5kaW5nU2xhc2hlcwAACAEQa2V5cwUMAZRCVHJlZU1hcDxWYWxpZGF0b3JJbmRleCwgVmFsaWRhdG9ySWQ+AAEQa2luZC0FAUxTbGFzaGluZ09mZmVuY2VLaW5kAAAFDAQgQlRyZWVNYXAIBEsBmQQEVgEdAgAEAAkMAAAACQwAAAINDAANDAAABAiZBB0CABEMFGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMgc2xhc2hpbmcYcGFsbGV0FEVycm9yBARUAAEYYEludmFsaWRLZXlPd25lcnNoaXBQcm9vZgAABIxUaGUga2V5IG93bmVyc2hpcCBwcm9vZiBpcyBpbnZhbGlkLkxJbnZhbGlkU2Vzc2lvbkluZGV4AAEEoFRoZSBzZXNzaW9uIGluZGV4IGlzIHRvbyBvbGQgb3IgaW52YWxpZC5QSW52YWxpZENhbmRpZGF0ZUhhc2gAAgR4VGhlIGNhbmRpZGF0ZSBoYXNoIGlzIGludmFsaWQuVEludmFsaWRWYWxpZGF0b3JJbmRleAADCAEBVGhlcmUgaXMgbm8gcGVuZGluZyBzbGFzaCBmb3IgdGhlIGdpdmVuIHZhbGlkYXRvciBpbmRleCBhbmQgdGltZRRzbG90LmBWYWxpZGF0b3JJbmRleElkTWlzbWF0Y2gABATQVGhlIHZhbGlkYXRvciBpbmRleCBkb2VzIG5vdCBtYXRjaCB0aGUgdmFsaWRhdG9yIGlkLlxEdXBsaWNhdGVTbGFzaGluZ1JlcG9ydAAFBA0BVGhlIGdpdmVuIHNsYXNoaW5nIHJlcG9ydCBpcyB2YWxpZCBidXQgYWxyZWFkeSBwcmV2aW91c2x5IHJlcG9ydGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4VDBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zSGFzc2lnbmVyX29uX2RlbWFuZBR0eXBlc0RDb3JlQWZmaW5pdHlDb3VudAAACAEoY29yZV9pbmRleHEHASRDb3JlSW5kZXgAARRjb3VudBABDHUzMgAAGQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0hhc3NpZ25lcl9vbl9kZW1hbmQUdHlwZXM8UXVldWVTdGF0dXNUeXBlAAAQARx0cmFmZmlj0QYBJEZpeGVkVTEyOAABKG5leHRfaW5kZXgdDAEoUXVldWVJbmRleAABOHNtYWxsZXN0X2luZGV4HQwBKFF1ZXVlSW5kZXgAATRmcmVlZF9pbmRpY2VzIQwBdEJpbmFyeUhlYXA8UmV2ZXJzZVF1ZXVlSW5kZXg+AAAdDBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zSGFzc2lnbmVyX29uX2RlbWFuZBR0eXBlcyhRdWV1ZUluZGV4AAAEABABDHUzMgAAIQwEKEJpbmFyeUhlYXAEBFQBJQwABAApDAAAACUMEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnNIYXNzaWduZXJfb25fZGVtYW5kFHR5cGVzRFJldmVyc2VRdWV1ZUluZGV4AAAEABABDHUzMgAAKQwAAAIlDAAtDAQoQmluYXJ5SGVhcAQEVAExDAAEADUMAAAAMQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0hhc3NpZ25lcl9vbl9kZW1hbmQUdHlwZXM0RW5xdWV1ZWRPcmRlcgAACAEccGFyYV9pZI0CARhQYXJhSWQAAQxpZHgdDAEoUXVldWVJbmRleAAANQwAAAIxDAA5DAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUARgEUwAABAA9DAEYVmVjPFQ+AAA9DAAAAhgAQQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0hhc3NpZ25lcl9vbl9kZW1hbmQYcGFsbGV0FEVycm9yBARUAAEIJFF1ZXVlRnVsbAAABORUaGUgb3JkZXIgcXVldWUgaXMgZnVsbCwgYHBsYWNlX29yZGVyYCB3aWxsIG5vdCBjb250aW51ZS5wU3BvdFByaWNlSGlnaGVyVGhhbk1heEFtb3VudAABCE0BVGhlIGN1cnJlbnQgc3BvdCBwcmljZSBpcyBoaWdoZXIgdGhhbiB0aGUgbWF4IGFtb3VudCBzcGVjaWZpZWQgaW4gdGhlIGBwbGFjZV9vcmRlcmBgY2FsbCwgbWFraW5nIGl0IGludmFsaWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LkUMAAAECBBxBwBJDAxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zRGFzc2lnbmVyX2NvcmV0aW1lIFNjaGVkdWxlBAROARAADAEsYXNzaWdubWVudHNdBQGMVmVjPChDb3JlQXNzaWdubWVudCwgUGFydHNPZjU3NjAwKT4AASBlbmRfaGludGECASRPcHRpb248Tj4AATRuZXh0X3NjaGVkdWxlYQIBJE9wdGlvbjxOPgAATQwMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZThDb3JlRGVzY3JpcHRvcgQETgEQAAgBFHF1ZXVlUQwBaE9wdGlvbjxRdWV1ZURlc2NyaXB0b3I8Tj4+AAEwY3VycmVudF93b3JrWQwBUE9wdGlvbjxXb3JrU3RhdGU8Tj4+AABRDAQYT3B0aW9uBARUAVUMAQgQTm9uZQAAABBTb21lBABVDAAAAQAAVQwMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZTxRdWV1ZURlc2NyaXB0b3IEBE4BEAAIARRmaXJzdBABBE4AARBsYXN0EAEETgAAWQwEGE9wdGlvbgQEVAFdDAEIEE5vbmUAAAAQU29tZQQAXQwAAAEAAF0MDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnNEYXNzaWduZXJfY29yZXRpbWUkV29ya1N0YXRlBAROARAAEAEsYXNzaWdubWVudHNhDAGYVmVjPChDb3JlQXNzaWdubWVudCwgQXNzaWdubWVudFN0YXRlKT4AASBlbmRfaGludGECASRPcHRpb248Tj4AAQxwb3NtAQEMdTE2AAEQc3RlcGkFATBQYXJ0c09mNTc2MDAAAGEMAAACZQwAZQwAAAQIZQVpDABpDAxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zRGFzc2lnbmVyX2NvcmV0aW1lPEFzc2lnbm1lbnRTdGF0ZQAACAEUcmF0aW9pBQEwUGFydHNPZjU3NjAwAAEkcmVtYWluaW5naQUBMFBhcnRzT2Y1NzYwMAAAbQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZRhwYWxsZXQURXJyb3IEBFQAARhAQXNzaWdubWVudHNFbXB0eQAAADRPdmVyU2NoZWR1bGVkAAEEkEFzc2lnbm1lbnRzIHRvZ2V0aGVyIGV4Y2VlZGVkIDU3NjAwLjhVbmRlclNjaGVkdWxlZAACBJBBc3NpZ25tZW50cyB0b2dldGhlciBsZXNzIHRoYW4gNTc2MDBARGlzYWxsb3dlZEluc2VydAADCFEBYXNzaWduX2NvcmUgaXMgb25seSBhbGxvd2VkIHRvIGFwcGVuZCBuZXcgYXNzaWdubWVudHMgYXQgdGhlIGVuZCBvZiBhbHJlYWR5IGV4aXN0aW5nFG9uZXMuPER1cGxpY2F0ZUluc2VydAAEBFUBVHJpZWQgdG8gaW5zZXJ0IGEgc2NoZWR1bGUgZm9yIHRoZSBzYW1lIGNvcmUgYW5kIGJsb2NrIG51bWJlciBhcyBhbiBleGlzdGluZyBzY2hlZHVsZVBBc3NpZ25tZW50c05vdFNvcnRlZAAFBKxUcmllZCB0byBhZGQgYW4gdW5zb3J0ZWQgc2V0IG9mIGFzc2lnbm1lbnRzBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LnEMDFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIgUGFyYUluZm8IHEFjY291bnQBABxCYWxhbmNlARgADAEcbWFuYWdlcgABHEFjY291bnQAARxkZXBvc2l0GAEcQmFsYW5jZQABGGxvY2tlZM0CATBPcHRpb248Ym9vbD4AAHUMEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIYcGFsbGV0FEVycm9yBARUAAE4NE5vdFJlZ2lzdGVyZWQAAARkVGhlIElEIGlzIG5vdCByZWdpc3RlcmVkLkRBbHJlYWR5UmVnaXN0ZXJlZAABBHRUaGUgSUQgaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBOb3RPd25lcgACBJxUaGUgY2FsbGVyIGlzIG5vdCB0aGUgb3duZXIgb2YgdGhpcyBJZC4wQ29kZVRvb0xhcmdlAAMEXEludmFsaWQgcGFyYSBjb2RlIHNpemUuQEhlYWREYXRhVG9vTGFyZ2UABARwSW52YWxpZCBwYXJhIGhlYWQgZGF0YSBzaXplLjBOb3RQYXJhY2hhaW4ABQRgUGFyYSBpcyBub3QgYSBQYXJhY2hhaW4uNE5vdFBhcmF0aHJlYWQABgS8UGFyYSBpcyBub3QgYSBQYXJhdGhyZWFkIChvbi1kZW1hbmQgcGFyYWNoYWluKS5AQ2Fubm90RGVyZWdpc3RlcgAHBFhDYW5ub3QgZGVyZWdpc3RlciBwYXJhPENhbm5vdERvd25ncmFkZQAIBC0BQ2Fubm90IHNjaGVkdWxlIGRvd25ncmFkZSBvZiBsZWFzZSBob2xkaW5nIHBhcmFjaGFpbiB0byBvbi1kZW1hbmQgcGFyYWNoYWluNENhbm5vdFVwZ3JhZGUACQQlAUNhbm5vdCBzY2hlZHVsZSB1cGdyYWRlIG9mIG9uLWRlbWFuZCBwYXJhY2hhaW4gdG8gbGVhc2UgaG9sZGluZyBwYXJhY2hhaW4oUGFyYUxvY2tlZAAKCEkBUGFyYSBpcyBsb2NrZWQgZnJvbSBtYW5pcHVsYXRpb24gYnkgdGhlIG1hbmFnZXIuIE11c3QgdXNlIHBhcmFjaGFpbiBvciByZWxheSBjaGFpbixnb3Zlcm5hbmNlLixOb3RSZXNlcnZlZAALBNBUaGUgSUQgZ2l2ZW4gZm9yIHJlZ2lzdHJhdGlvbiBoYXMgbm90IGJlZW4gcmVzZXJ2ZWQuLEludmFsaWRDb2RlAAwEfFRoZSB2YWxpZGF0aW9uIGNvZGUgaXMgaW52YWxpZC4oQ2Fubm90U3dhcAANCFEBQ2Fubm90IHBlcmZvcm0gYSBwYXJhY2hhaW4gc2xvdCAvIGxpZmVjeWNsZSBzd2FwLiBDaGVjayB0aGF0IHRoZSBzdGF0ZSBvZiBib3RoIHBhcmFzhGFyZSBjb3JyZWN0IGZvciB0aGUgc3dhcCB0byB3b3JrLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC55DAAAAiEIAH0MEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhRzbG90cxhwYWxsZXQURXJyb3IEBFQAAQhEUGFyYU5vdE9uYm9hcmRpbmcAAASMVGhlIHBhcmFjaGFpbiBJRCBpcyBub3Qgb25ib2FyZGluZy4oTGVhc2VFcnJvcgABBIhUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgbGVhc2UuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LoEMAAAECACNAgCFDAAAAyQAAACJDACJDAQYT3B0aW9uBARUAY0MAQgQTm9uZQAAABBTb21lBACNDAAAAQAAjQwAAAQMAI0CGACRDBBccG9sa2Fkb3RfcnVudGltZV9jb21tb24gYXVjdGlvbnMYcGFsbGV0FEVycm9yBARUAAEcREF1Y3Rpb25JblByb2dyZXNzAAAEkFRoaXMgYXVjdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLkRMZWFzZVBlcmlvZEluUGFzdAABBIBUaGUgbGVhc2UgcGVyaW9kIGlzIGluIHRoZSBwYXN0LkRQYXJhTm90UmVnaXN0ZXJlZAACBFhQYXJhIGlzIG5vdCByZWdpc3RlcmVkRE5vdEN1cnJlbnRBdWN0aW9uAAMEWE5vdCBhIGN1cnJlbnQgYXVjdGlvbi4oTm90QXVjdGlvbgAEBDxOb3QgYW4gYXVjdGlvbi4wQXVjdGlvbkVuZGVkAAUEaEF1Y3Rpb24gaGFzIGFscmVhZHkgZW5kZWQuQEFscmVhZHlMZWFzZWRPdXQABgTYVGhlIHBhcmEgaXMgYWxyZWFkeSBsZWFzZWQgb3V0IGZvciBwYXJ0IG9mIHRoaXMgcmFuZ2UuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LpUMDFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbiRjcm93ZGxvYW4gRnVuZEluZm8QJEFjY291bnRJZAEAHEJhbGFuY2UBGCxCbG9ja051bWJlcgEQLExlYXNlUGVyaW9kARAAKAEkZGVwb3NpdG9yAAEkQWNjb3VudElkAAEgdmVyaWZpZXJJBQFMT3B0aW9uPE11bHRpU2lnbmVyPgABHGRlcG9zaXQYARxCYWxhbmNlAAEYcmFpc2VkGAEcQmFsYW5jZQABDGVuZBABLEJsb2NrTnVtYmVyAAEMY2FwGAEcQmFsYW5jZQABRGxhc3RfY29udHJpYnV0aW9umQwBdExhc3RDb250cmlidXRpb248QmxvY2tOdW1iZXI+AAEwZmlyc3RfcGVyaW9kEAEsTGVhc2VQZXJpb2QAASxsYXN0X3BlcmlvZBABLExlYXNlUGVyaW9kAAEoZnVuZF9pbmRleBABJEZ1bmRJbmRleAAAmQwMXHBvbGthZG90X3J1bnRpbWVfY29tbW9uJGNyb3dkbG9hbkBMYXN0Q29udHJpYnV0aW9uBCxCbG9ja051bWJlcgEQAQwUTmV2ZXIAAAAkUHJlRW5kaW5nBAAQAQx1MzIAAQAYRW5kaW5nBAAQASxCbG9ja051bWJlcgACAACdDBBccG9sa2Fkb3RfcnVudGltZV9jb21tb24kY3Jvd2Rsb2FuGHBhbGxldBRFcnJvcgQEVAABXERGaXJzdFBlcmlvZEluUGFzdAAABPRUaGUgY3VycmVudCBsZWFzZSBwZXJpb2QgaXMgbW9yZSB0aGFuIHRoZSBmaXJzdCBsZWFzZSBwZXJpb2QuZEZpcnN0UGVyaW9kVG9vRmFySW5GdXR1cmUAAQQRAVRoZSBmaXJzdCBsZWFzZSBwZXJpb2QgbmVlZHMgdG8gYXQgbGVhc3QgYmUgbGVzcyB0aGFuIDMgYG1heF92YWx1ZWAubExhc3RQZXJpb2RCZWZvcmVGaXJzdFBlcmlvZAACBOhMYXN0IGxlYXNlIHBlcmlvZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBmaXJzdCBsZWFzZSBwZXJpb2QuYExhc3RQZXJpb2RUb29GYXJJbkZ1dHVyZQADBC0BVGhlIGxhc3QgbGVhc2UgcGVyaW9kIGNhbm5vdCBiZSBtb3JlIHRoYW4gMyBwZXJpb2RzIGFmdGVyIHRoZSBmaXJzdCBwZXJpb2QuPENhbm5vdEVuZEluUGFzdAAEBEUBVGhlIGNhbXBhaWduIGVuZHMgYmVmb3JlIHRoZSBjdXJyZW50IGJsb2NrIG51bWJlci4gVGhlIGVuZCBtdXN0IGJlIGluIHRoZSBmdXR1cmUuREVuZFRvb0ZhckluRnV0dXJlAAUEwFRoZSBlbmQgZGF0ZSBmb3IgdGhpcyBjcm93ZGxvYW4gaXMgbm90IHNlbnNpYmxlLiBPdmVyZmxvdwAGBFhUaGVyZSB3YXMgYW4gb3ZlcmZsb3cuUENvbnRyaWJ1dGlvblRvb1NtYWxsAAcE6FRoZSBjb250cmlidXRpb24gd2FzIGJlbG93IHRoZSBtaW5pbXVtLCBgTWluQ29udHJpYnV0aW9uYC40SW52YWxpZFBhcmFJZAAIBExJbnZhbGlkIGZ1bmQgaW5kZXguLENhcEV4Y2VlZGVkAAkEkENvbnRyaWJ1dGlvbnMgZXhjZWVkIG1heGltdW0gYW1vdW50LlhDb250cmlidXRpb25QZXJpb2RPdmVyAAoEqFRoZSBjb250cmlidXRpb24gcGVyaW9kIGhhcyBhbHJlYWR5IGVuZGVkLjRJbnZhbGlkT3JpZ2luAAsEjFRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsIGlzIGludmFsaWQuME5vdFBhcmFjaGFpbgAMBMhUaGlzIGNyb3dkbG9hbiBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGEgcGFyYWNoYWluLixMZWFzZUFjdGl2ZQANBBUBVGhpcyBwYXJhY2hhaW4gbGVhc2UgaXMgc3RpbGwgYWN0aXZlIGFuZCByZXRpcmVtZW50IGNhbm5vdCB5ZXQgYmVnaW4uQEJpZE9yTGVhc2VBY3RpdmUADgQxAVRoaXMgcGFyYWNoYWluJ3MgYmlkIG9yIGxlYXNlIGlzIHN0aWxsIGFjdGl2ZSBhbmQgd2l0aGRyYXcgY2Fubm90IHlldCBiZWdpbi4wRnVuZE5vdEVuZGVkAA8EgFRoZSBjcm93ZGxvYW4gaGFzIG5vdCB5ZXQgZW5kZWQuPE5vQ29udHJpYnV0aW9ucwAQBNBUaGVyZSBhcmUgbm8gY29udHJpYnV0aW9ucyBzdG9yZWQgaW4gdGhpcyBjcm93ZGxvYW4uSE5vdFJlYWR5VG9EaXNzb2x2ZQARCFUBVGhlIGNyb3dkbG9hbiBpcyBub3QgcmVhZHkgdG8gZGlzc29sdmUuIFBvdGVudGlhbGx5IHN0aWxsIGhhcyBhIHNsb3Qgb3IgaW4gcmV0aXJlbWVudBxwZXJpb2QuQEludmFsaWRTaWduYXR1cmUAEgRISW52YWxpZCBzaWduYXR1cmUuME1lbW9Ub29MYXJnZQATBHxUaGUgcHJvdmlkZWQgbWVtbyBpcyB0b28gbGFyZ2UuREFscmVhZHlJbk5ld1JhaXNlABQEhFRoZSBmdW5kIGlzIGFscmVhZHkgaW4gYE5ld1JhaXNlYEhWcmZEZWxheUluUHJvZ3Jlc3MAFQS0Tm8gY29udHJpYnV0aW9ucyBhbGxvd2VkIGR1cmluZyB0aGUgVlJGIGRlbGF5NE5vTGVhc2VQZXJpb2QAFgQtAUEgbGVhc2UgcGVyaW9kIGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGR1ZSB0byBhbiBvZmZzZXQgaW4gdGhlIHN0YXJ0aW5nIGJsb2NrLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6hDBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zIGNvcmV0aW1lGHBhbGxldBRFcnJvcgQEVAABDCROb3RCcm9rZXIAAAQpAVRoZSBwYXJhaWQgbWFraW5nIHRoZSBjYWxsIGlzIG5vdCB0aGUgY29yZXRpbWUgYnJva2VyYWdlIHN5c3RlbSBwYXJhY2hhaW4uWFJlcXVlc3RlZEZ1dHVyZVJldmVudWUAAQhFAVJlcXVlc3RlZCByZXZlbnVlIGluZm9ybWF0aW9uIGB3aGVuYCBwYXJhbWV0ZXIgd2FzIGluIHRoZSBmdXR1cmUgZnJvbSB0aGUgY3VycmVudDRibG9jayBoZWlnaHQuTEFzc2V0VHJhbnNmZXJGYWlsZWQAAgS8RmFpbGVkIHRvIHRyYW5zZmVyIGFzc2V0cyB0byB0aGUgY29yZXRpbWUgY2hhaW4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQupQwMKHBhbGxldF94Y20YcGFsbGV0LFF1ZXJ5U3RhdHVzBCxCbG9ja051bWJlcgEQAQwcUGVuZGluZxABJHJlc3BvbmRlckUBAURWZXJzaW9uZWRMb2NhdGlvbgABTG1heWJlX21hdGNoX3F1ZXJpZXKpDAFkT3B0aW9uPFZlcnNpb25lZExvY2F0aW9uPgABMG1heWJlX25vdGlmea0MAUBPcHRpb248KHU4LCB1OCk+AAEcdGltZW91dBABLEJsb2NrTnVtYmVyAAAAPFZlcnNpb25Ob3RpZmllcggBGG9yaWdpbkUBAURWZXJzaW9uZWRMb2NhdGlvbgABJGlzX2FjdGl2ZSABEGJvb2wAAQAUUmVhZHkIASByZXNwb25zZbUMAURWZXJzaW9uZWRSZXNwb25zZQABCGF0EAEsQmxvY2tOdW1iZXIAAgAAqQwEGE9wdGlvbgQEVAFFAQEIEE5vbmUAAAAQU29tZQQARQEAAAEAAK0MBBhPcHRpb24EBFQBsQwBCBBOb25lAAAAEFNvbWUEALEMAAABAACxDAAABAgICAC1DAgMeGNtRFZlcnNpb25lZFJlc3BvbnNlAAEMCFYyBAC1BQEwdjI6OlJlc3BvbnNlAAIACFYzBAD9BQEwdjM6OlJlc3BvbnNlAAMACFY0BABhBgEwdjQ6OlJlc3BvbnNlAAQAALkMAAAECBBFAQC9DAAABAwwKBAAwQwMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAHFDARTAAAEAMkMARhWZWM8VD4AAMUMAAAECEUBEADJDAAAAsUMAM0MDChwYWxsZXRfeGNtGHBhbGxldFRWZXJzaW9uTWlncmF0aW9uU3RhZ2UAARBcTWlncmF0ZVN1cHBvcnRlZFZlcnNpb24AAABcTWlncmF0ZVZlcnNpb25Ob3RpZmllcnMAAQBQTm90aWZ5Q3VycmVudFRhcmdldHMEANEMATxPcHRpb248VmVjPHU4Pj4AAgBoTWlncmF0ZUFuZE5vdGlmeU9sZFRhcmdldHMAAwAA0QwEGE9wdGlvbgQEVAE4AQgQTm9uZQAAABBTb21lBAA4AAABAADVDAAABAwQAL0GANkMDChwYWxsZXRfeGNtGHBhbGxldGhSZW1vdGVMb2NrZWRGdW5naWJsZVJlY29yZAhIQ29uc3VtZXJJZGVudGlmaWVyAYwwTWF4Q29uc3VtZXJzAAAQARhhbW91bnQYARB1MTI4AAEUb3duZXJFAQFEVmVyc2lvbmVkTG9jYXRpb24AARhsb2NrZXJFAQFEVmVyc2lvbmVkTG9jYXRpb24AASRjb25zdW1lcnPdDAHQQm91bmRlZFZlYzwoQ29uc3VtZXJJZGVudGlmaWVyLCB1MTI4KSwgTWF4Q29uc3VtZXJzPgAA3QwMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAHhDARTAAAEAOUMARhWZWM8VD4AAOEMAAAECIwYAOUMAAAC4QwA6QwMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAHtDARTAAAEAPEMARhWZWM8VD4AAO0MAAAECBhFAQDxDAAAAu0MAPUMDChwYWxsZXRfeGNtGHBhbGxldBRFcnJvcgQEVAABYCxVbnJlYWNoYWJsZQAACF0BVGhlIGRlc2lyZWQgZGVzdGluYXRpb24gd2FzIHVucmVhY2hhYmxlLCBnZW5lcmFsbHkgYmVjYXVzZSB0aGVyZSBpcyBhIG5vIHdheSBvZiByb3V0aW5nGHRvIGl0LixTZW5kRmFpbHVyZQABCEEBVGhlcmUgd2FzIHNvbWUgb3RoZXIgaXNzdWUgKGkuZS4gbm90IHRvIGRvIHdpdGggcm91dGluZykgaW4gc2VuZGluZyB0aGUgbWVzc2FnZS7IUGVyaGFwcyBhIGxhY2sgb2Ygc3BhY2UgZm9yIGJ1ZmZlcmluZyB0aGUgbWVzc2FnZS4gRmlsdGVyZWQAAgScVGhlIG1lc3NhZ2UgZXhlY3V0aW9uIGZhaWxzIHRoZSBmaWx0ZXIuSFVud2VpZ2hhYmxlTWVzc2FnZQADBLRUaGUgbWVzc2FnZSdzIHdlaWdodCBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC5gRGVzdGluYXRpb25Ob3RJbnZlcnRpYmxlAAQE3FRoZSBkZXN0aW5hdGlvbiBgTG9jYXRpb25gIHByb3ZpZGVkIGNhbm5vdCBiZSBpbnZlcnRlZC4URW1wdHkABQSAVGhlIGFzc2V0cyB0byBiZSBzZW50IGFyZSBlbXB0eS44Q2Fubm90UmVhbmNob3IABgQ1AUNvdWxkIG5vdCByZS1hbmNob3IgdGhlIGFzc2V0cyB0byBkZWNsYXJlIHRoZSBmZWVzIGZvciB0aGUgZGVzdGluYXRpb24gY2hhaW4uNFRvb01hbnlBc3NldHMABwTEVG9vIG1hbnkgYXNzZXRzIGhhdmUgYmVlbiBhdHRlbXB0ZWQgZm9yIHRyYW5zZmVyLjRJbnZhbGlkT3JpZ2luAAgEeE9yaWdpbiBpcyBpbnZhbGlkIGZvciBzZW5kaW5nLihCYWRWZXJzaW9uAAkEIQFUaGUgdmVyc2lvbiBvZiB0aGUgYFZlcnNpb25lZGAgdmFsdWUgdXNlZCBpcyBub3QgYWJsZSB0byBiZSBpbnRlcnByZXRlZC4sQmFkTG9jYXRpb24ACghBAVRoZSBnaXZlbiBsb2NhdGlvbiBjb3VsZCBub3QgYmUgdXNlZCAoZS5nLiBiZWNhdXNlIGl0IGNhbm5vdCBiZSBleHByZXNzZWQgaW4gdGhlYGRlc2lyZWQgdmVyc2lvbiBvZiBYQ00pLjhOb1N1YnNjcmlwdGlvbgALBLxUaGUgcmVmZXJlbmNlZCBzdWJzY3JpcHRpb24gY291bGQgbm90IGJlIGZvdW5kLkRBbHJlYWR5U3Vic2NyaWJlZAAMBBEBVGhlIGxvY2F0aW9uIGlzIGludmFsaWQgc2luY2UgaXQgYWxyZWFkeSBoYXMgYSBzdWJzY3JpcHRpb24gZnJvbSB1cy5YQ2Fubm90Q2hlY2tPdXRUZWxlcG9ydAANBCkBQ291bGQgbm90IGNoZWNrLW91dCB0aGUgYXNzZXRzIGZvciB0ZWxlcG9ydGF0aW9uIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbi4oTG93QmFsYW5jZQAOBEEBVGhlIG93bmVyIGRvZXMgbm90IG93biAoYWxsKSBvZiB0aGUgYXNzZXQgdGhhdCB0aGV5IHdpc2ggdG8gZG8gdGhlIG9wZXJhdGlvbiBvbi4wVG9vTWFueUxvY2tzAA8EwFRoZSBhc3NldCBvd25lciBoYXMgdG9vIG1hbnkgbG9ja3Mgb24gdGhlIGFzc2V0LkxBY2NvdW50Tm90U292ZXJlaWduABAEMQFUaGUgZ2l2ZW4gYWNjb3VudCBpcyBub3QgYW4gaWRlbnRpZmlhYmxlIHNvdmVyZWlnbiBhY2NvdW50IGZvciBhbnkgbG9jYXRpb24uKEZlZXNOb3RNZXQAEQQpAVRoZSBvcGVyYXRpb24gcmVxdWlyZWQgZmVlcyB0byBiZSBwYWlkIHdoaWNoIHRoZSBpbml0aWF0b3IgY291bGQgbm90IG1lZXQuMExvY2tOb3RGb3VuZAASBPRBIHJlbW90ZSBsb2NrIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgZGF0YSBjb3VsZCBub3QgYmUgZm91bmQuFEluVXNlABMESQFUaGUgdW5sb2NrIG9wZXJhdGlvbiBjYW5ub3Qgc3VjY2VlZCBiZWNhdXNlIHRoZXJlIGFyZSBzdGlsbCBjb25zdW1lcnMgb2YgdGhlIGxvY2suaEludmFsaWRBc3NldFVua25vd25SZXNlcnZlABUE8EludmFsaWQgYXNzZXQsIHJlc2VydmUgY2hhaW4gY291bGQgbm90IGJlIGRldGVybWluZWQgZm9yIGl0LnhJbnZhbGlkQXNzZXRVbnN1cHBvcnRlZFJlc2VydmUAFgRFAUludmFsaWQgYXNzZXQsIGRvIG5vdCBzdXBwb3J0IHJlbW90ZSBhc3NldCByZXNlcnZlcyB3aXRoIGRpZmZlcmVudCBmZWVzIHJlc2VydmVzLjxUb29NYW55UmVzZXJ2ZXMAFwRJAVRvbyBtYW55IGFzc2V0cyB3aXRoIGRpZmZlcmVudCByZXNlcnZlIGxvY2F0aW9ucyBoYXZlIGJlZW4gYXR0ZW1wdGVkIGZvciB0cmFuc2Zlci5gTG9jYWxFeGVjdXRpb25JbmNvbXBsZXRlABgEfExvY2FsIFhDTSBleGVjdXRpb24gaW5jb21wbGV0ZS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQu+QwIUHBhbGxldF9tZXNzYWdlX3F1ZXVlJEJvb2tTdGF0ZQQ0TWVzc2FnZU9yaWdpbgHFBgAYARRiZWdpbhABJFBhZ2VJbmRleAABDGVuZBABJFBhZ2VJbmRleAABFGNvdW50EAEkUGFnZUluZGV4AAFAcmVhZHlfbmVpZ2hib3Vyc/0MAYRPcHRpb248TmVpZ2hib3VyczxNZXNzYWdlT3JpZ2luPj4AATRtZXNzYWdlX2NvdW50MAEMdTY0AAEQc2l6ZTABDHU2NAAA/QwEGE9wdGlvbgQEVAEBDQEIEE5vbmUAAAAQU29tZQQAAQ0AAAEAAAENCFBwYWxsZXRfbWVzc2FnZV9xdWV1ZShOZWlnaGJvdXJzBDRNZXNzYWdlT3JpZ2luAcUGAAgBEHByZXbFBgE0TWVzc2FnZU9yaWdpbgABEG5leHTFBgE0TWVzc2FnZU9yaWdpbgAABQ0AAAQIxQYQAAkNCFBwYWxsZXRfbWVzc2FnZV9xdWV1ZRBQYWdlCBBTaXplARAgSGVhcFNpemUAABgBJHJlbWFpbmluZxABEFNpemUAAThyZW1haW5pbmdfc2l6ZRABEFNpemUAASxmaXJzdF9pbmRleBABEFNpemUAARRmaXJzdBABEFNpemUAARBsYXN0EAEQU2l6ZQABEGhlYXANDQGcQm91bmRlZFZlYzx1OCwgSW50b1UzMjxIZWFwU2l6ZSwgU2l6ZT4+AAANDQxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AABENDFBwYWxsZXRfbWVzc2FnZV9xdWV1ZRhwYWxsZXQURXJyb3IEBFQAASQsTm90UmVhcGFibGUAAAhJAVBhZ2UgaXMgbm90IHJlYXBhYmxlIGJlY2F1c2UgaXQgaGFzIGl0ZW1zIHJlbWFpbmluZyB0byBiZSBwcm9jZXNzZWQgYW5kIGlzIG5vdCBvbGQcZW5vdWdoLhhOb1BhZ2UAAQSEUGFnZSB0byBiZSByZWFwZWQgZG9lcyBub3QgZXhpc3QuJE5vTWVzc2FnZQACBKhUaGUgcmVmZXJlbmNlZCBtZXNzYWdlIGNvdWxkIG5vdCBiZSBmb3VuZC5AQWxyZWFkeVByb2Nlc3NlZAADBAEBVGhlIG1lc3NhZ2Ugd2FzIGFscmVhZHkgcHJvY2Vzc2VkIGFuZCBjYW5ub3QgYmUgcHJvY2Vzc2VkIGFnYWluLhhRdWV1ZWQABASsVGhlIG1lc3NhZ2UgaXMgcXVldWVkIGZvciBmdXR1cmUgZXhlY3V0aW9uLkhJbnN1ZmZpY2llbnRXZWlnaHQABQQZAVRoZXJlIGlzIHRlbXBvcmFyaWx5IG5vdCBlbm91Z2ggd2VpZ2h0IHRvIGNvbnRpbnVlIHNlcnZpY2luZyBtZXNzYWdlcy5gVGVtcG9yYXJpbHlVbnByb2Nlc3NhYmxlAAYQqFRoaXMgbWVzc2FnZSBpcyB0ZW1wb3JhcmlseSB1bnByb2Nlc3NhYmxlLgBZAVN1Y2ggZXJyb3JzIGFyZSBleHBlY3RlZCwgYnV0IG5vdCBndWFyYW50ZWVkLCB0byByZXNvbHZlIHRoZW1zZWx2ZXMgZXZlbnR1YWxseSB0aHJvdWdoJHJldHJ5aW5nLixRdWV1ZVBhdXNlZAAHDOxUaGUgcXVldWUgaXMgcGF1c2VkIGFuZCBubyBtZXNzYWdlIGNhbiBiZSBleGVjdXRlZCBmcm9tIGl0LgAdAVRoaXMgY2FuIGNoYW5nZSBhdCBhbnkgdGltZSBhbmQgbWF5IHJlc29sdmUgaW4gdGhlIGZ1dHVyZSBieSByZS10cnlpbmcuTFJlY3Vyc2l2ZURpc2FsbG93ZWQACAQxAUFub3RoZXIgY2FsbCBpcyBpbiBwcm9ncmVzcyBhbmQgbmVlZHMgdG8gZmluaXNoIGJlZm9yZSB0aGlzIGNhbGwgY2FuIGhhcHBlbi4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuFQ0MRHBhbGxldF9hc3NldF9yYXRlGHBhbGxldBRFcnJvcgQEVAABDEBVbmtub3duQXNzZXRLaW5kAAAEeFRoZSBnaXZlbiBhc3NldCBJRCBpcyB1bmtub3duLjRBbHJlYWR5RXhpc3RzAAEEUQFUaGUgZ2l2ZW4gYXNzZXQgSUQgYWxyZWFkeSBoYXMgYW4gYXNzaWduZWQgY29udmVyc2lvbiByYXRlIGFuZCBjYW5ub3QgYmUgcmUtY3JlYXRlZC4gT3ZlcmZsb3cAAgTMT3ZlcmZsb3cgb2N1cnJlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBpbnZlcnNlIHJhdGUuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LhkNDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBKQIEUwAABAAdDQEYVmVjPFQ+AAAdDQAAAikCACENDDBwYWxsZXRfYmVlZnkYcGFsbGV0FEVycm9yBARUAAEQYEludmFsaWRLZXlPd25lcnNoaXBQcm9vZgAABDEBQSBrZXkgb3duZXJzaGlwIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLmBJbnZhbGlkRXF1aXZvY2F0aW9uUHJvb2YAAQQxAUFuIGVxdWl2b2NhdGlvbiBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC5YRHVwbGljYXRlT2ZmZW5jZVJlcG9ydAACBBUBQSBnaXZlbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIHZhbGlkIGJ1dCBhbHJlYWR5IHByZXZpb3VzbHkgcmVwb3J0ZWQuUEludmFsaWRDb25maWd1cmF0aW9uAAMEjFN1Ym1pdHRlZCBjb25maWd1cmF0aW9uIGlzIGludmFsaWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LiUNDEhzcF9jb25zZW5zdXNfYmVlZnkMbW1yREJlZWZ5QXV0aG9yaXR5U2V0BFhBdXRob3JpdHlTZXRDb21taXRtZW50ATQADAEIaWQwAVRjcmF0ZTo6VmFsaWRhdG9yU2V0SWQAAQxsZW4QAQx1MzIAAURrZXlzZXRfY29tbWl0bWVudDQBWEF1dGhvcml0eVNldENvbW1pdG1lbnQAACkNAAAEKC0NMQ01DTkNPQ1FDUkNTQ1RDVUNAC0NEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9uc1RjaGVja19ub25femVyb19zZW5kZXJIQ2hlY2tOb25aZXJvU2VuZGVyBARUAAAAADENEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9uc0hjaGVja19zcGVjX3ZlcnNpb25AQ2hlY2tTcGVjVmVyc2lvbgQEVAAAAAA1DRAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnNAY2hlY2tfdHhfdmVyc2lvbjhDaGVja1R4VmVyc2lvbgQEVAAAAAA5DRAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnM0Y2hlY2tfZ2VuZXNpczBDaGVja0dlbmVzaXMEBFQAAAAAPQ0QMGZyYW1lX3N5c3RlbShleHRlbnNpb25zPGNoZWNrX21vcnRhbGl0eThDaGVja01vcnRhbGl0eQQEVAAABABBDQEMRXJhAABBDRAoc3BfcnVudGltZRxnZW5lcmljDGVyYQxFcmEAAQEEIEltbW9ydGFsAAAAHE1vcnRhbDEEAAgAAAEAHE1vcnRhbDIEAAgAAAIAHE1vcnRhbDMEAAgAAAMAHE1vcnRhbDQEAAgAAAQAHE1vcnRhbDUEAAgAAAUAHE1vcnRhbDYEAAgAAAYAHE1vcnRhbDcEAAgAAAcAHE1vcnRhbDgEAAgAAAgAHE1vcnRhbDkEAAgAAAkAIE1vcnRhbDEwBAAIAAAKACBNb3J0YWwxMQQACAAACwAgTW9ydGFsMTIEAAgAAAwAIE1vcnRhbDEzBAAIAAANACBNb3J0YWwxNAQACAAADgAgTW9ydGFsMTUEAAgAAA8AIE1vcnRhbDE2BAAIAAAQACBNb3J0YWwxNwQACAAAEQAgTW9ydGFsMTgEAAgAABIAIE1vcnRhbDE5BAAIAAATACBNb3J0YWwyMAQACAAAFAAgTW9ydGFsMjEEAAgAABUAIE1vcnRhbDIyBAAIAAAWACBNb3J0YWwyMwQACAAAFwAgTW9ydGFsMjQEAAgAABgAIE1vcnRhbDI1BAAIAAAZACBNb3J0YWwyNgQACAAAGgAgTW9ydGFsMjcEAAgAABsAIE1vcnRhbDI4BAAIAAAcACBNb3J0YWwyOQQACAAAHQAgTW9ydGFsMzAEAAgAAB4AIE1vcnRhbDMxBAAIAAAfACBNb3J0YWwzMgQACAAAIAAgTW9ydGFsMzMEAAgAACEAIE1vcnRhbDM0BAAIAAAiACBNb3J0YWwzNQQACAAAIwAgTW9ydGFsMzYEAAgAACQAIE1vcnRhbDM3BAAIAAAlACBNb3J0YWwzOAQACAAAJgAgTW9ydGFsMzkEAAgAACcAIE1vcnRhbDQwBAAIAAAoACBNb3J0YWw0MQQACAAAKQAgTW9ydGFsNDIEAAgAACoAIE1vcnRhbDQzBAAIAAArACBNb3J0YWw0NAQACAAALAAgTW9ydGFsNDUEAAgAAC0AIE1vcnRhbDQ2BAAIAAAuACBNb3J0YWw0NwQACAAALwAgTW9ydGFsNDgEAAgAADAAIE1vcnRhbDQ5BAAIAAAxACBNb3J0YWw1MAQACAAAMgAgTW9ydGFsNTEEAAgAADMAIE1vcnRhbDUyBAAIAAA0ACBNb3J0YWw1MwQACAAANQAgTW9ydGFsNTQEAAgAADYAIE1vcnRhbDU1BAAIAAA3ACBNb3J0YWw1NgQACAAAOAAgTW9ydGFsNTcEAAgAADkAIE1vcnRhbDU4BAAIAAA6ACBNb3J0YWw1OQQACAAAOwAgTW9ydGFsNjAEAAgAADwAIE1vcnRhbDYxBAAIAAA9ACBNb3J0YWw2MgQACAAAPgAgTW9ydGFsNjMEAAgAAD8AIE1vcnRhbDY0BAAIAABAACBNb3J0YWw2NQQACAAAQQAgTW9ydGFsNjYEAAgAAEIAIE1vcnRhbDY3BAAIAABDACBNb3J0YWw2OAQACAAARAAgTW9ydGFsNjkEAAgAAEUAIE1vcnRhbDcwBAAIAABGACBNb3J0YWw3MQQACAAARwAgTW9ydGFsNzIEAAgAAEgAIE1vcnRhbDczBAAIAABJACBNb3J0YWw3NAQACAAASgAgTW9ydGFsNzUEAAgAAEsAIE1vcnRhbDc2BAAIAABMACBNb3J0YWw3NwQACAAATQAgTW9ydGFsNzgEAAgAAE4AIE1vcnRhbDc5BAAIAABPACBNb3J0YWw4MAQACAAAUAAgTW9ydGFsODEEAAgAAFEAIE1vcnRhbDgyBAAIAABSACBNb3J0YWw4MwQACAAAUwAgTW9ydGFsODQEAAgAAFQAIE1vcnRhbDg1BAAIAABVACBNb3J0YWw4NgQACAAAVgAgTW9ydGFsODcEAAgAAFcAIE1vcnRhbDg4BAAIAABYACBNb3J0YWw4OQQACAAAWQAgTW9ydGFsOTAEAAgAAFoAIE1vcnRhbDkxBAAIAABbACBNb3J0YWw5MgQACAAAXAAgTW9ydGFsOTMEAAgAAF0AIE1vcnRhbDk0BAAIAABeACBNb3J0YWw5NQQACAAAXwAgTW9ydGFsOTYEAAgAAGAAIE1vcnRhbDk3BAAIAABhACBNb3J0YWw5OAQACAAAYgAgTW9ydGFsOTkEAAgAAGMAJE1vcnRhbDEwMAQACAAAZAAkTW9ydGFsMTAxBAAIAABlACRNb3J0YWwxMDIEAAgAAGYAJE1vcnRhbDEwMwQACAAAZwAkTW9ydGFsMTA0BAAIAABoACRNb3J0YWwxMDUEAAgAAGkAJE1vcnRhbDEwNgQACAAAagAkTW9ydGFsMTA3BAAIAABrACRNb3J0YWwxMDgEAAgAAGwAJE1vcnRhbDEwOQQACAAAbQAkTW9ydGFsMTEwBAAIAABuACRNb3J0YWwxMTEEAAgAAG8AJE1vcnRhbDExMgQACAAAcAAkTW9ydGFsMTEzBAAIAABxACRNb3J0YWwxMTQEAAgAAHIAJE1vcnRhbDExNQQACAAAcwAkTW9ydGFsMTE2BAAIAAB0ACRNb3J0YWwxMTcEAAgAAHUAJE1vcnRhbDExOAQACAAAdgAkTW9ydGFsMTE5BAAIAAB3ACRNb3J0YWwxMjAEAAgAAHgAJE1vcnRhbDEyMQQACAAAeQAkTW9ydGFsMTIyBAAIAAB6ACRNb3J0YWwxMjMEAAgAAHsAJE1vcnRhbDEyNAQACAAAfAAkTW9ydGFsMTI1BAAIAAB9ACRNb3J0YWwxMjYEAAgAAH4AJE1vcnRhbDEyNwQACAAAfwAkTW9ydGFsMTI4BAAIAACAACRNb3J0YWwxMjkEAAgAAIEAJE1vcnRhbDEzMAQACAAAggAkTW9ydGFsMTMxBAAIAACDACRNb3J0YWwxMzIEAAgAAIQAJE1vcnRhbDEzMwQACAAAhQAkTW9ydGFsMTM0BAAIAACGACRNb3J0YWwxMzUEAAgAAIcAJE1vcnRhbDEzNgQACAAAiAAkTW9ydGFsMTM3BAAIAACJACRNb3J0YWwxMzgEAAgAAIoAJE1vcnRhbDEzOQQACAAAiwAkTW9ydGFsMTQwBAAIAACMACRNb3J0YWwxNDEEAAgAAI0AJE1vcnRhbDE0MgQACAAAjgAkTW9ydGFsMTQzBAAIAACPACRNb3J0YWwxNDQEAAgAAJAAJE1vcnRhbDE0NQQACAAAkQAkTW9ydGFsMTQ2BAAIAACSACRNb3J0YWwxNDcEAAgAAJMAJE1vcnRhbDE0OAQACAAAlAAkTW9ydGFsMTQ5BAAIAACVACRNb3J0YWwxNTAEAAgAAJYAJE1vcnRhbDE1MQQACAAAlwAkTW9ydGFsMTUyBAAIAACYACRNb3J0YWwxNTMEAAgAAJkAJE1vcnRhbDE1NAQACAAAmgAkTW9ydGFsMTU1BAAIAACbACRNb3J0YWwxNTYEAAgAAJwAJE1vcnRhbDE1NwQACAAAnQAkTW9ydGFsMTU4BAAIAACeACRNb3J0YWwxNTkEAAgAAJ8AJE1vcnRhbDE2MAQACAAAoAAkTW9ydGFsMTYxBAAIAAChACRNb3J0YWwxNjIEAAgAAKIAJE1vcnRhbDE2MwQACAAAowAkTW9ydGFsMTY0BAAIAACkACRNb3J0YWwxNjUEAAgAAKUAJE1vcnRhbDE2NgQACAAApgAkTW9ydGFsMTY3BAAIAACnACRNb3J0YWwxNjgEAAgAAKgAJE1vcnRhbDE2OQQACAAAqQAkTW9ydGFsMTcwBAAIAACqACRNb3J0YWwxNzEEAAgAAKsAJE1vcnRhbDE3MgQACAAArAAkTW9ydGFsMTczBAAIAACtACRNb3J0YWwxNzQEAAgAAK4AJE1vcnRhbDE3NQQACAAArwAkTW9ydGFsMTc2BAAIAACwACRNb3J0YWwxNzcEAAgAALEAJE1vcnRhbDE3OAQACAAAsgAkTW9ydGFsMTc5BAAIAACzACRNb3J0YWwxODAEAAgAALQAJE1vcnRhbDE4MQQACAAAtQAkTW9ydGFsMTgyBAAIAAC2ACRNb3J0YWwxODMEAAgAALcAJE1vcnRhbDE4NAQACAAAuAAkTW9ydGFsMTg1BAAIAAC5ACRNb3J0YWwxODYEAAgAALoAJE1vcnRhbDE4NwQACAAAuwAkTW9ydGFsMTg4BAAIAAC8ACRNb3J0YWwxODkEAAgAAL0AJE1vcnRhbDE5MAQACAAAvgAkTW9ydGFsMTkxBAAIAAC/ACRNb3J0YWwxOTIEAAgAAMAAJE1vcnRhbDE5MwQACAAAwQAkTW9ydGFsMTk0BAAIAADCACRNb3J0YWwxOTUEAAgAAMMAJE1vcnRhbDE5NgQACAAAxAAkTW9ydGFsMTk3BAAIAADFACRNb3J0YWwxOTgEAAgAAMYAJE1vcnRhbDE5OQQACAAAxwAkTW9ydGFsMjAwBAAIAADIACRNb3J0YWwyMDEEAAgAAMkAJE1vcnRhbDIwMgQACAAAygAkTW9ydGFsMjAzBAAIAADLACRNb3J0YWwyMDQEAAgAAMwAJE1vcnRhbDIwNQQACAAAzQAkTW9ydGFsMjA2BAAIAADOACRNb3J0YWwyMDcEAAgAAM8AJE1vcnRhbDIwOAQACAAA0AAkTW9ydGFsMjA5BAAIAADRACRNb3J0YWwyMTAEAAgAANIAJE1vcnRhbDIxMQQACAAA0wAkTW9ydGFsMjEyBAAIAADUACRNb3J0YWwyMTMEAAgAANUAJE1vcnRhbDIxNAQACAAA1gAkTW9ydGFsMjE1BAAIAADXACRNb3J0YWwyMTYEAAgAANgAJE1vcnRhbDIxNwQACAAA2QAkTW9ydGFsMjE4BAAIAADaACRNb3J0YWwyMTkEAAgAANsAJE1vcnRhbDIyMAQACAAA3AAkTW9ydGFsMjIxBAAIAADdACRNb3J0YWwyMjIEAAgAAN4AJE1vcnRhbDIyMwQACAAA3wAkTW9ydGFsMjI0BAAIAADgACRNb3J0YWwyMjUEAAgAAOEAJE1vcnRhbDIyNgQACAAA4gAkTW9ydGFsMjI3BAAIAADjACRNb3J0YWwyMjgEAAgAAOQAJE1vcnRhbDIyOQQACAAA5QAkTW9ydGFsMjMwBAAIAADmACRNb3J0YWwyMzEEAAgAAOcAJE1vcnRhbDIzMgQACAAA6AAkTW9ydGFsMjMzBAAIAADpACRNb3J0YWwyMzQEAAgAAOoAJE1vcnRhbDIzNQQACAAA6wAkTW9ydGFsMjM2BAAIAADsACRNb3J0YWwyMzcEAAgAAO0AJE1vcnRhbDIzOAQACAAA7gAkTW9ydGFsMjM5BAAIAADvACRNb3J0YWwyNDAEAAgAAPAAJE1vcnRhbDI0MQQACAAA8QAkTW9ydGFsMjQyBAAIAADyACRNb3J0YWwyNDMEAAgAAPMAJE1vcnRhbDI0NAQACAAA9AAkTW9ydGFsMjQ1BAAIAAD1ACRNb3J0YWwyNDYEAAgAAPYAJE1vcnRhbDI0NwQACAAA9wAkTW9ydGFsMjQ4BAAIAAD4ACRNb3J0YWwyNDkEAAgAAPkAJE1vcnRhbDI1MAQACAAA+gAkTW9ydGFsMjUxBAAIAAD7ACRNb3J0YWwyNTIEAAgAAPwAJE1vcnRhbDI1MwQACAAA/QAkTW9ydGFsMjU0BAAIAAD+ACRNb3J0YWwyNTUEAAgAAP8AAEUNEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9ucyxjaGVja19ub25jZShDaGVja05vbmNlBARUAAAEAOwBIFQ6Ok5vbmNlAABJDRAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnMwY2hlY2tfd2VpZ2h0LENoZWNrV2VpZ2h0BARUAAAAAE0NCGhwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudGBDaGFyZ2VUcmFuc2FjdGlvblBheW1lbnQEBFQAAAQA/AEwQmFsYW5jZU9mPFQ+AABRDQxccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zSFByZXZhbGlkYXRlQXR0ZXN0cwQEVAAAAABVDQh0ZnJhbWVfbWV0YWRhdGFfaGFzaF9leHRlbnNpb25EQ2hlY2tNZXRhZGF0YUhhc2gEBFQAAAQBEG1vZGVZDQEQTW9kZQAAWQ0IdGZyYW1lX21ldGFkYXRhX2hhc2hfZXh0ZW5zaW9uEE1vZGUAAQggRGlzYWJsZWQAAAAcRW5hYmxlZAABAABdDQhAcG9sa2Fkb3RfcnVudGltZRxSdW50aW1lAAAAAGENDDByZWxheV9jb21tb24QYXBpczRJbmZsYXRpb25JbmZvAAAIASRpbmZsYXRpb265AgFcc3BfcnVudGltZTo6UGVycXVpbnRpbGwAASRuZXh0X21pbnRlDQHwKHBvbGthZG90X3ByaW1pdGl2ZXM6OkJhbGFuY2UsIHBvbGthZG90X3ByaW1pdGl2ZXM6OkJhbGFuY2UpAABlDQAABAgYGABpDRAoc3BfcnVudGltZRxnZW5lcmljFGJsb2NrFEJsb2NrCBhIZWFkZXIBoQEkRXh0cmluc2ljAW0NAAgBGGhlYWRlcqEBARhIZWFkZXIAAShleHRyaW5zaWNzcQ0BOFZlYzxFeHRyaW5zaWM+AABtDRAoc3BfcnVudGltZRxnZW5lcmljTHVuY2hlY2tlZF9leHRyaW5zaWNIVW5jaGVja2VkRXh0cmluc2ljEBxBZGRyZXNzAcUBEENhbGwBdQEkU2lnbmF0dXJlAVUFFEV4dHJhASkNAAQAOAAAAHENAAACbQ0AdQ0IKHNwX3J1bnRpbWVYRXh0cmluc2ljSW5jbHVzaW9uTW9kZQABCDRBbGxFeHRyaW5zaWNzAAAANE9ubHlJbmhlcmVudHMAAQAAeQ0IHHNwX2NvcmU4T3BhcXVlTWV0YWRhdGEAAAQAOAEcVmVjPHU4PgAAfQ0EGE9wdGlvbgQEVAF5DQEIEE5vbmUAAAAQU29tZQQAeQ0AAAEAAIENBBhSZXN1bHQIBFQBiARFAYUNAQgIT2sEAIgAAAAADEVycgQAhQ0AAAEAAIUNDChzcF9ydW50aW1lUHRyYW5zYWN0aW9uX3ZhbGlkaXR5YFRyYW5zYWN0aW9uVmFsaWRpdHlFcnJvcgABCBxJbnZhbGlkBACJDQFISW52YWxpZFRyYW5zYWN0aW9uAAAAHFVua25vd24EAI0NAUhVbmtub3duVHJhbnNhY3Rpb24AAQAAiQ0MKHNwX3J1bnRpbWVQdHJhbnNhY3Rpb25fdmFsaWRpdHlISW52YWxpZFRyYW5zYWN0aW9uAAEsEENhbGwAAAAcUGF5bWVudAABABhGdXR1cmUAAgAUU3RhbGUAAwAgQmFkUHJvb2YABABEQW5jaWVudEJpcnRoQmxvY2sABQBERXhoYXVzdHNSZXNvdXJjZXMABgAYQ3VzdG9tBAAIAQh1OAAHADBCYWRNYW5kYXRvcnkACABMTWFuZGF0b3J5VmFsaWRhdGlvbgAJACRCYWRTaWduZXIACgAAjQ0MKHNwX3J1bnRpbWVQdHJhbnNhY3Rpb25fdmFsaWRpdHlIVW5rbm93blRyYW5zYWN0aW9uAAEMMENhbm5vdExvb2t1cAAAAExOb1Vuc2lnbmVkVmFsaWRhdG9yAAEAGEN1c3RvbQQACAEIdTgAAgAAkQ0IMHNwX2luaGVyZW50czBJbmhlcmVudERhdGEAAAQBEGRhdGGVDQGUQlRyZWVNYXA8SW5oZXJlbnRJZGVudGlmaWVyLCBWZWM8dTg+PgAAlQ0EIEJUcmVlTWFwCARLAbEFBFYBOAAEAJkNAAAAmQ0AAAKdDQCdDQAABAixBTgAoQ0IMHNwX2luaGVyZW50c1BDaGVja0luaGVyZW50c1Jlc3VsdAAADAEQb2theSABEGJvb2wAASxmYXRhbF9lcnJvciABEGJvb2wAARhlcnJvcnORDQEwSW5oZXJlbnREYXRhAAClDQwoc3BfcnVudGltZVB0cmFuc2FjdGlvbl92YWxpZGl0eURUcmFuc2FjdGlvblNvdXJjZQABDBxJbkJsb2NrAAAAFExvY2FsAAEAIEV4dGVybmFsAAIAAKkNBBhSZXN1bHQIBFQBrQ0ERQGFDQEICE9rBACtDQAAAAAMRXJyBACFDQAAAQAArQ0MKHNwX3J1bnRpbWVQdHJhbnNhY3Rpb25fdmFsaWRpdHlAVmFsaWRUcmFuc2FjdGlvbgAAFAEgcHJpb3JpdHkwAUxUcmFuc2FjdGlvblByaW9yaXR5AAEgcmVxdWlyZXOFAQFMVmVjPFRyYW5zYWN0aW9uVGFnPgABIHByb3ZpZGVzhQEBTFZlYzxUcmFuc2FjdGlvblRhZz4AASRsb25nZXZpdHkwAVBUcmFuc2FjdGlvbkxvbmdldml0eQABJHByb3BhZ2F0ZSABEGJvb2wAALENAAAECE0LtQ0AtQ0MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjdER3JvdXBSb3RhdGlvbkluZm8EBE4BEAAMAUxzZXNzaW9uX3N0YXJ0X2Jsb2NrEAEETgABYGdyb3VwX3JvdGF0aW9uX2ZyZXF1ZW5jeRABBE4AAQxub3cQAQROAAC5DQAAAr0NAL0NDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3JENvcmVTdGF0ZQgESAE0BE4BEAEMIE9jY3VwaWVkBADBDQFIT2NjdXBpZWRDb3JlPEgsIE4+AAAAJFNjaGVkdWxlZAQAyQ0BNFNjaGVkdWxlZENvcmUAAQAQRnJlZQACAADBDQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NzBPY2N1cGllZENvcmUIBEgBNAROARAAIAFQbmV4dF91cF9vbl9hdmFpbGFibGXFDQFUT3B0aW9uPFNjaGVkdWxlZENvcmU+AAE4b2NjdXBpZWRfc2luY2UQAQROAAEsdGltZV9vdXRfYXQQAQROAAFMbmV4dF91cF9vbl90aW1lX291dMUNAVRPcHRpb248U2NoZWR1bGVkQ29yZT4AATBhdmFpbGFiaWxpdHmRBAF8Qml0VmVjPHU4LCBiaXR2ZWM6Om9yZGVyOjpMc2IwPgABRGdyb3VwX3Jlc3BvbnNpYmxldQcBKEdyb3VwSW5kZXgAAThjYW5kaWRhdGVfaGFzaO0EATRDYW5kaWRhdGVIYXNoAAFQY2FuZGlkYXRlX2Rlc2NyaXB0b3KtBAFYQ2FuZGlkYXRlRGVzY3JpcHRvcjxIPgAAxQ0EGE9wdGlvbgQEVAHJDQEIEE5vbmUAAAAQU29tZQQAyQ0AAAEAAMkNDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3NFNjaGVkdWxlZENvcmUAAAgBHHBhcmFfaWSNAgEISWQAASBjb2xsYXRvcs0NAUhPcHRpb248Q29sbGF0b3JJZD4AAM0NBBhPcHRpb24EBFQBsQQBCBBOb25lAAAAEFNvbWUEALEEAAABAADRDQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2N1hPY2N1cGllZENvcmVBc3N1bXB0aW9uAAEMIEluY2x1ZGVkAAAAIFRpbWVkT3V0AAEAEEZyZWUAAgAA1Q0EGE9wdGlvbgQEVAHZDQEIEE5vbmUAAAAQU29tZQQA2Q0AAAEAANkNDExwb2xrYWRvdF9wcmltaXRpdmVzCHY3XFBlcnNpc3RlZFZhbGlkYXRpb25EYXRhCARIATQETgEQABABLHBhcmVudF9oZWFk2QQBIEhlYWREYXRhAAFMcmVsYXlfcGFyZW50X251bWJlchABBE4AAWRyZWxheV9wYXJlbnRfc3RvcmFnZV9yb290NAEESAABMG1heF9wb3Zfc2l6ZRABDHUzMgAA3Q0EGE9wdGlvbgQEVAHhDQEIEE5vbmUAAAAQU29tZQQA4Q0AAAEAAOENAAAECNkNuQQA5Q0EGE9wdGlvbgQEVAGpBAEIEE5vbmUAAAAQU29tZQQAqQQAAAEAAOkNAAAC7Q0A7Q0MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc4Q2FuZGlkYXRlRXZlbnQEBEgBNAEMPENhbmRpZGF0ZUJhY2tlZBAAbQcBTENhbmRpZGF0ZVJlY2VpcHQ8SD4AANkEASBIZWFkRGF0YQAAcQcBJENvcmVJbmRleAAAdQcBKEdyb3VwSW5kZXgAAABEQ2FuZGlkYXRlSW5jbHVkZWQQAG0HAUxDYW5kaWRhdGVSZWNlaXB0PEg+AADZBAEgSGVhZERhdGEAAHEHASRDb3JlSW5kZXgAAHUHAShHcm91cEluZGV4AAEARENhbmRpZGF0ZVRpbWVkT3V0DABtBwFMQ2FuZGlkYXRlUmVjZWlwdDxIPgAA2QQBIEhlYWREYXRhAABxBwEkQ29yZUluZGV4AAIAAPENBCBCVHJlZU1hcAgESwGNAgRWAc0LAAQA9Q0AAAD1DQAAAvkNAPkNAAAECI0CzQsA/Q0EGE9wdGlvbgQEVAE1CwEIEE5vbmUAAAAQU29tZQQANQsAAAEAAAEOBBhPcHRpb24EBFQB5QsBCBBOb25lAAAAEFNvbWUEAOULAAABAAAFDgQYT3B0aW9uBARUAbkEAQgQTm9uZQAAABBTb21lBAC5BAAAAQAACQ4AAAINDgANDgAABAwQ7QT1CwARDgQYT3B0aW9uBARUAVkEAQgQTm9uZQAAABBTb21lBABZBAAAAQAAFQ4AAAIZDgAZDgAABAwQ7QQBDAAdDgQYT3B0aW9uBARUASEOAQgQTm9uZQAAABBTb21lBAAhDgAAAQAAIQ4QTHBvbGthZG90X3ByaW1pdGl2ZXMIdjcgc2xhc2hpbmdcT3BhcXVlS2V5T3duZXJzaGlwUHJvb2YAAAQAOAEcVmVjPHU4PgAAJQ4EGE9wdGlvbgQEVAGMAQgQTm9uZQAAABBTb21lBACMAAABAAApDgQYT3B0aW9uBARUAS0OAQgQTm9uZQAAABBTb21lBAAtDgAAAQAALQ4QTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc0YXN5bmNfYmFja2luZzBCYWNraW5nU3RhdGUIBEgBNAROARAACAEsY29uc3RyYWludHMxDgE4Q29uc3RyYWludHM8Tj4AAVBwZW5kaW5nX2F2YWlsYWJpbGl0eVEOAZxWZWM8Q2FuZGlkYXRlUGVuZGluZ0F2YWlsYWJpbGl0eTxILCBOPj4AADEOEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3NGFzeW5jX2JhY2tpbmcsQ29uc3RyYWludHMEBE4BEAA4AVxtaW5fcmVsYXlfcGFyZW50X251bWJlchABBE4AATBtYXhfcG92X3NpemUQAQx1MzIAATRtYXhfY29kZV9zaXplEAEMdTMyAAE0dW1wX3JlbWFpbmluZxABDHUzMgABTHVtcF9yZW1haW5pbmdfYnl0ZXMQAQx1MzIAAWRtYXhfdW1wX251bV9wZXJfY2FuZGlkYXRlEAEMdTMyAAFYZG1wX3JlbWFpbmluZ19tZXNzYWdlc+UBARhWZWM8Tj4AATBocm1wX2luYm91bmQ1DgFkSW5ib3VuZEhybXBMaW1pdGF0aW9uczxOPgABRGhybXBfY2hhbm5lbHNfb3V0OQ4BpFZlYzwoSWQsIE91dGJvdW5kSHJtcENoYW5uZWxMaW1pdGF0aW9ucyk+AAFobWF4X2hybXBfbnVtX3Blcl9jYW5kaWRhdGUQAQx1MzIAATxyZXF1aXJlZF9wYXJlbnTZBAEgSGVhZERhdGEAAVB2YWxpZGF0aW9uX2NvZGVfaGFzaLkEAUhWYWxpZGF0aW9uQ29kZUhhc2gAAUx1cGdyYWRlX3Jlc3RyaWN0aW9uRQ4BaE9wdGlvbjxVcGdyYWRlUmVzdHJpY3Rpb24+AAFYZnV0dXJlX3ZhbGlkYXRpb25fY29kZUkOAXxPcHRpb248KE4sIFZhbGlkYXRpb25Db2RlSGFzaCk+AAA1DhBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2NzRhc3luY19iYWNraW5nWEluYm91bmRIcm1wTGltaXRhdGlvbnMEBE4BEAAEAUB2YWxpZF93YXRlcm1hcmtz5QEBGFZlYzxOPgAAOQ4AAAI9DgA9DgAABAiNAkEOAEEOEExwb2xrYWRvdF9wcmltaXRpdmVzCHY3NGFzeW5jX2JhY2tpbmd4T3V0Ym91bmRIcm1wQ2hhbm5lbExpbWl0YXRpb25zAAAIATxieXRlc19yZW1haW5pbmcQAQx1MzIAAUhtZXNzYWdlc19yZW1haW5pbmcQAQx1MzIAAEUOBBhPcHRpb24EBFQBpQsBCBBOb25lAAAAEFNvbWUEAKULAAABAABJDgQYT3B0aW9uBARUAU0OAQgQTm9uZQAAABBTb21lBABNDgAAAQAATQ4AAAQIELkEAFEOAAACVQ4AVQ4QTHBvbGthZG90X3ByaW1pdGl2ZXMIdjc0YXN5bmNfYmFja2luZ3BDYW5kaWRhdGVQZW5kaW5nQXZhaWxhYmlsaXR5CARIATQETgEQABQBOGNhbmRpZGF0ZV9oYXNo7QQBNENhbmRpZGF0ZUhhc2gAAShkZXNjcmlwdG9yrQQBWENhbmRpZGF0ZURlc2NyaXB0b3I8SD4AASxjb21taXRtZW50c70EAVBDYW5kaWRhdGVDb21taXRtZW50cwABTHJlbGF5X3BhcmVudF9udW1iZXIQAQROAAEwbWF4X3Bvdl9zaXplEAEMdTMyAABZDgQgQlRyZWVNYXAIBEsBcQcEVgGFCwAEAF0OAAAAXQ4AAAJhDgBhDgAABAhxB4ULAGUOAAACqQQAaQ4EGE9wdGlvbgQEVAFtDgEIEE5vbmUAAAAQU29tZQQAbQ4AAAEAAG0OCEhzcF9jb25zZW5zdXNfYmVlZnkwVmFsaWRhdG9yU2V0BCxBdXRob3JpdHlJZAEpAgAIASh2YWxpZGF0b3JzHQ0BQFZlYzxBdXRob3JpdHlJZD4AAQhpZDABOFZhbGlkYXRvclNldElkAABxDggoc3BfcnVudGltZSxPcGFxdWVWYWx1ZQAABAA4ARxWZWM8dTg+AAB1DgQYT3B0aW9uBARUAXEOAQgQTm9uZQAAABBTb21lBABxDgAAAQAAeQ4EGFJlc3VsdAgEVAE0BEUBfQ4BCAhPawQANAAAAAAMRXJyBAB9DgAAAQAAfQ4IRHNwX21tcl9wcmltaXRpdmVzFEVycm9yAAEoQEludmFsaWROdW1lcmljT3AAAAAQUHVzaAABABxHZXRSb290AAIAGENvbW1pdAADADRHZW5lcmF0ZVByb29mAAQAGFZlcmlmeQAFADBMZWFmTm90Rm91bmQABgBEUGFsbGV0Tm90SW5jbHVkZWQABwBASW52YWxpZExlYWZJbmRleAAIAFRJbnZhbGlkQmVzdEtub3duQmxvY2sACQAAgQ4EGFJlc3VsdAgEVAEwBEUBfQ4BCAhPawQAMAAAAAAMRXJyBAB9DgAAAQAAhQ4EGFJlc3VsdAgEVAGJDgRFAX0OAQgIT2sEAIkOAAAAAAxFcnIEAH0OAAABAACJDgAABAiNDpUOAI0OAAACkQ4AkQ4IRHNwX21tcl9wcmltaXRpdmVzTEVuY29kYWJsZU9wYXF1ZUxlYWYAAAQAOAEcVmVjPHU4PgAAlQ4IRHNwX21tcl9wcmltaXRpdmVzJExlYWZQcm9vZgQQSGFzaAE0AAwBMGxlYWZfaW5kaWNlc6EKAThWZWM8TGVhZkluZGV4PgABKGxlYWZfY291bnQwASROb2RlSW5kZXgAARRpdGVtc5UBASRWZWM8SGFzaD4AAJkOBBhSZXN1bHQIBFQBjARFAX0OAQgIT2sEAIwAAAAADEVycgQAfQ4AAAEAAJ0OCERzcF9jb25zZW5zdXNfYmFiZURCYWJlQ29uZmlndXJhdGlvbgAAGAE0c2xvdF9kdXJhdGlvbjABDHU2NAABMGVwb2NoX2xlbmd0aDABDHU2NAABBGO1AQEoKHU2NCwgdTY0KQABLGF1dGhvcml0aWVzSQgBnFZlYzwoQXV0aG9yaXR5SWQsIEJhYmVBdXRob3JpdHlXZWlnaHQpPgABKHJhbmRvbW5lc3MEAShSYW5kb21uZXNzAAE0YWxsb3dlZF9zbG90c7kBATBBbGxvd2VkU2xvdHMAAKEOCERzcF9jb25zZW5zdXNfYmFiZRRFcG9jaAAAGAEsZXBvY2hfaW5kZXgwAQx1NjQAAShzdGFydF9zbG90qQEBEFNsb3QAASBkdXJhdGlvbjABDHU2NAABLGF1dGhvcml0aWVzSQgBnFZlYzwoQXV0aG9yaXR5SWQsIEJhYmVBdXRob3JpdHlXZWlnaHQpPgABKHJhbmRvbW5lc3MEAShSYW5kb21uZXNzAAEYY29uZmlnbQgBWEJhYmVFcG9jaENvbmZpZ3VyYXRpb24AAKUOBBhPcHRpb24EBFQBqQ4BCBBOb25lAAAAEFNvbWUEAKkOAAABAACpDghEc3BfY29uc2Vuc3VzX2JhYmVcT3BhcXVlS2V5T3duZXJzaGlwUHJvb2YAAAQAOAEcVmVjPHU4PgAArQ4EGE9wdGlvbgQEVAGxDgEIEE5vbmUAAAAQU29tZQQAsQ4AAAEAALEOAAACtQ4AtQ4AAAQIOE0JALkODGhwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudBR0eXBlc0xSdW50aW1lRGlzcGF0Y2hJbmZvCBxCYWxhbmNlARgYV2VpZ2h0ASgADAEYd2VpZ2h0KAEYV2VpZ2h0AAEUY2xhc3NgATREaXNwYXRjaENsYXNzAAEscGFydGlhbF9mZWUYARxCYWxhbmNlAAC9DgxocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQUdHlwZXMoRmVlRGV0YWlscwQcQmFsYW5jZQEYAAgBNGluY2x1c2lvbl9mZWXBDgF0T3B0aW9uPEluY2x1c2lvbkZlZTxCYWxhbmNlPj4AAQx0aXAYARxCYWxhbmNlAADBDgQYT3B0aW9uBARUAcUOAQgQTm9uZQAAABBTb21lBADFDgAAAQAAxQ4MaHBhbGxldF90cmFuc2FjdGlvbl9wYXltZW50FHR5cGVzMEluY2x1c2lvbkZlZQQcQmFsYW5jZQEYAAwBIGJhc2VfZmVlGAEcQmFsYW5jZQABHGxlbl9mZWUYARxCYWxhbmNlAAFMYWRqdXN0ZWRfd2VpZ2h0X2ZlZRgBHEJhbGFuY2UAAMkOBBhSZXN1bHQIBFQBzQ4ERQHRDgEICE9rBADNDgAAAAAMRXJyBADRDgAAAQAAzQ4AAAK9BgDRDgxAeGNtX3J1bnRpbWVfYXBpcxBmZWVzFEVycm9yAAEYNFVuaW1wbGVtZW50ZWQAAABkVmVyc2lvbmVkQ29udmVyc2lvbkZhaWxlZAABAExXZWlnaHROb3RDb21wdXRhYmxlAAIATFVuaGFuZGxlZFhjbVZlcnNpb24AAwA0QXNzZXROb3RGb3VuZAAEAChVbnJvdXRhYmxlAAUAANUOBBhSZXN1bHQIBFQBKARFAdEOAQgIT2sEACgAAAAADEVycgQA0Q4AAAEAANkOBBhSZXN1bHQIBFQBGARFAdEOAQgIT2sEABgAAAAADEVycgQA0Q4AAAEAAN0OBBhSZXN1bHQIBFQBiQYERQHRDgEICE9rBACJBgAAAAAMRXJyBADRDgAAAQAA4Q4EGFJlc3VsdAgEVAHlDgRFAf0OAQgIT2sEAOUOAAAAAAxFcnIEAP0OAAABAADlDgxAeGNtX3J1bnRpbWVfYXBpcxxkcnlfcnVuRENhbGxEcnlSdW5FZmZlY3RzBBRFdmVudAFUABABQGV4ZWN1dGlvbl9yZXN1bHQJBwFoRGlzcGF0Y2hSZXN1bHRXaXRoUG9zdEluZm8AAThlbWl0dGVkX2V2ZW50c+kOAShWZWM8RXZlbnQ+AAEkbG9jYWxfeGNt7Q4BYE9wdGlvbjxWZXJzaW9uZWRYY208KCk+PgABOGZvcndhcmRlZF94Y21z8Q4BvFZlYzwoVmVyc2lvbmVkTG9jYXRpb24sIFZlYzxWZXJzaW9uZWRYY208KCk+Pik+AADpDgAAAlQA7Q4EGE9wdGlvbgQEVAGJBQEIEE5vbmUAAAAQU29tZQQAiQUAAAEAAPEOAAAC9Q4A9Q4AAAQIRQH5DgD5DgAAAokFAP0ODEB4Y21fcnVudGltZV9hcGlzHGRyeV9ydW4URXJyb3IAAQg0VW5pbXBsZW1lbnRlZAAAAGRWZXJzaW9uZWRDb252ZXJzaW9uRmFpbGVkAAEAAAEPBBhSZXN1bHQIBFQBBQ8ERQH9DgEICE9rBAAFDwAAAAAMRXJyBAD9DgAAAQAABQ8MQHhjbV9ydW50aW1lX2FwaXMcZHJ5X3J1bkBYY21EcnlSdW5FZmZlY3RzBBRFdmVudAFUAAwBQGV4ZWN1dGlvbl9yZXN1bHS1BwEcT3V0Y29tZQABOGVtaXR0ZWRfZXZlbnRz6Q4BKFZlYzxFdmVudD4AAThmb3J3YXJkZWRfeGNtc/EOAbxWZWM8KFZlcnNpb25lZExvY2F0aW9uLCBWZWM8VmVyc2lvbmVkWGNtPCgpPj4pPgAACQ8EGFJlc3VsdAgEVAEABEUBDQ8BCAhPawQAAAAAAAAMRXJyBAANDwAAAQAADQ8MQHhjbV9ydW50aW1lX2FwaXMsY29udmVyc2lvbnMURXJyb3IAAQgsVW5zdXBwb3J0ZWQAAABkVmVyc2lvbmVkQ29udmVyc2lvbkZhaWxlZAABAAARDwQYUmVzdWx0CARUAYwERQHRBwEICE9rBACMAAAAAAxFcnIEANEHAAABAAAVDwQYT3B0aW9uBARUAdEHAQgQTm9uZQAAABBTb21lBADRBwAAAQAAGQ8AAALRBwAdDwhAcG9sa2Fkb3RfcnVudGltZTBSdW50aW1lRXJyb3IAAawYU3lzdGVtBAABCAFwZnJhbWVfc3lzdGVtOjpFcnJvcjxSdW50aW1lPgAAACRTY2hlZHVsZXIEABkIAYBwYWxsZXRfc2NoZWR1bGVyOjpFcnJvcjxSdW50aW1lPgABACBQcmVpbWFnZQQAPQgBfHBhbGxldF9wcmVpbWFnZTo6RXJyb3I8UnVudGltZT4ACgAQQmFiZQQAfQgBbHBhbGxldF9iYWJlOjpFcnJvcjxSdW50aW1lPgACABxJbmRpY2VzBACFCAF4cGFsbGV0X2luZGljZXM6OkVycm9yPFJ1bnRpbWU+AAQAIEJhbGFuY2VzBADRCAF8cGFsbGV0X2JhbGFuY2VzOjpFcnJvcjxSdW50aW1lPgAFABxTdGFraW5nBAAxCQF4cGFsbGV0X3N0YWtpbmc6OkVycm9yPFJ1bnRpbWU+AAcAHFNlc3Npb24EAFEJAXhwYWxsZXRfc2Vzc2lvbjo6RXJyb3I8UnVudGltZT4ACQAcR3JhbmRwYQQAYQkBeHBhbGxldF9ncmFuZHBhOjpFcnJvcjxSdW50aW1lPgALACBUcmVhc3VyeQQAhQkBfHBhbGxldF90cmVhc3VyeTo6RXJyb3I8UnVudGltZT4AEwBAQ29udmljdGlvblZvdGluZwQAuQkBoHBhbGxldF9jb252aWN0aW9uX3ZvdGluZzo6RXJyb3I8UnVudGltZT4AFAAkUmVmZXJlbmRhBAABCgGAcGFsbGV0X3JlZmVyZW5kYTo6RXJyb3I8UnVudGltZT4AFQAkV2hpdGVsaXN0BAAFCgGAcGFsbGV0X3doaXRlbGlzdDo6RXJyb3I8UnVudGltZT4AFwAYQ2xhaW1zBAAJCgFYY2xhaW1zOjpFcnJvcjxSdW50aW1lPgAYABxWZXN0aW5nBAAZCgF4cGFsbGV0X3Zlc3Rpbmc6OkVycm9yPFJ1bnRpbWU+ABkAHFV0aWxpdHkEAB0KAXhwYWxsZXRfdXRpbGl0eTo6RXJyb3I8UnVudGltZT4AGgAUUHJveHkEAEEKAXBwYWxsZXRfcHJveHk6OkVycm9yPFJ1bnRpbWU+AB0AIE11bHRpc2lnBABRCgF8cGFsbGV0X211bHRpc2lnOjpFcnJvcjxSdW50aW1lPgAeACBCb3VudGllcwQAYQoBfHBhbGxldF9ib3VudGllczo6RXJyb3I8UnVudGltZT4AIgA0Q2hpbGRCb3VudGllcwQAbQoBlHBhbGxldF9jaGlsZF9ib3VudGllczo6RXJyb3I8UnVudGltZT4AJgBoRWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2UEAJUKAdBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2U6OkVycm9yPFJ1bnRpbWU+ACQAJFZvdGVyTGlzdAQApQoB9HBhbGxldF9iYWdzX2xpc3Q6OkVycm9yPFJ1bnRpbWUsIHBhbGxldF9iYWdzX2xpc3Q6Okluc3RhbmNlMT4AJQA8Tm9taW5hdGlvblBvb2xzBADtCgGccGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkVycm9yPFJ1bnRpbWU+ACcALEZhc3RVbnN0YWtlBAABCwGMcGFsbGV0X2Zhc3RfdW5zdGFrZTo6RXJyb3I8UnVudGltZT4AKAA0Q29uZmlndXJhdGlvbgQAEQsBoHBhcmFjaGFpbnNfY29uZmlndXJhdGlvbjo6RXJyb3I8UnVudGltZT4AMwA0UGFyYUluY2x1c2lvbgQAMQsBkHBhcmFjaGFpbnNfaW5jbHVzaW9uOjpFcnJvcjxSdW50aW1lPgA1ADBQYXJhSW5oZXJlbnQEAEkLAaRwYXJhY2hhaW5zX3BhcmFzX2luaGVyZW50OjpFcnJvcjxSdW50aW1lPgA2ABRQYXJhcwQArQsBgHBhcmFjaGFpbnNfcGFyYXM6OkVycm9yPFJ1bnRpbWU+ADgAEEhybXAEAN0LAXxwYXJhY2hhaW5zX2hybXA6OkVycm9yPFJ1bnRpbWU+ADwANFBhcmFzRGlzcHV0ZXMEAP0LAYxwYXJhY2hhaW5zX2Rpc3B1dGVzOjpFcnJvcjxSdW50aW1lPgA+ADRQYXJhc1NsYXNoaW5nBAARDAGMcGFyYWNoYWluc19zbGFzaGluZzo6RXJyb3I8UnVudGltZT4APwAgT25EZW1hbmQEAEEMAbRwYXJhY2hhaW5zX2Fzc2lnbmVyX29uX2RlbWFuZDo6RXJyb3I8UnVudGltZT4AQABoQ29yZXRpbWVBc3NpZ25tZW50UHJvdmlkZXIEAG0MAbBwYXJhY2hhaW5zX2Fzc2lnbmVyX2NvcmV0aW1lOjpFcnJvcjxSdW50aW1lPgBBACRSZWdpc3RyYXIEAHUMAXxwYXJhc19yZWdpc3RyYXI6OkVycm9yPFJ1bnRpbWU+AEYAFFNsb3RzBAB9DAFUc2xvdHM6OkVycm9yPFJ1bnRpbWU+AEcAIEF1Y3Rpb25zBACRDAFgYXVjdGlvbnM6OkVycm9yPFJ1bnRpbWU+AEgAJENyb3dkbG9hbgQAnQwBZGNyb3dkbG9hbjo6RXJyb3I8UnVudGltZT4ASQAgQ29yZXRpbWUEAKEMAWBjb3JldGltZTo6RXJyb3I8UnVudGltZT4ASgBIU3RhdGVUcmllTWlncmF0aW9uBACtBwGscGFsbGV0X3N0YXRlX3RyaWVfbWlncmF0aW9uOjpFcnJvcjxSdW50aW1lPgBiACRYY21QYWxsZXQEAPUMAWhwYWxsZXRfeGNtOjpFcnJvcjxSdW50aW1lPgBjADBNZXNzYWdlUXVldWUEABENAZBwYWxsZXRfbWVzc2FnZV9xdWV1ZTo6RXJyb3I8UnVudGltZT4AZAAkQXNzZXRSYXRlBAAVDQGEcGFsbGV0X2Fzc2V0X3JhdGU6OkVycm9yPFJ1bnRpbWU+AGUAFEJlZWZ5BAAhDQFwcGFsbGV0X2JlZWZ5OjpFcnJvcjxSdW50aW1lPgDIAADsGFN5c3RlbQEYU3lzdGVtSBxBY2NvdW50AQEEAgAMQQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAToIFRoZSBmdWxsIGFjY291bnQgaW5mb3JtYXRpb24gZm9yIGEgcGFydGljdWxhciBhY2NvdW50IElELjhFeHRyaW5zaWNDb3VudAAAEAQABLggVG90YWwgZXh0cmluc2ljcyBjb3VudCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suQEluaGVyZW50c0FwcGxpZWQBACAEAASkIFdoZXRoZXIgYWxsIGluaGVyZW50cyBoYXZlIGJlZW4gYXBwbGllZC4sQmxvY2tXZWlnaHQBACQYAAAAAAAABIggVGhlIGN1cnJlbnQgd2VpZ2h0IGZvciB0aGUgYmxvY2suQEFsbEV4dHJpbnNpY3NMZW4AABAEAARBASBUb3RhbCBsZW5ndGggKGluIGJ5dGVzKSBmb3IgYWxsIGV4dHJpbnNpY3MgcHV0IHRvZ2V0aGVyLCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suJEJsb2NrSGFzaAEBBAUQNIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASYIE1hcCBvZiBibG9jayBudW1iZXJzIHRvIGJsb2NrIGhhc2hlcy40RXh0cmluc2ljRGF0YQEBBAUQOAQABD0BIEV4dHJpbnNpY3MgZGF0YSBmb3IgdGhlIGN1cnJlbnQgYmxvY2sgKG1hcHMgYW4gZXh0cmluc2ljJ3MgaW5kZXggdG8gaXRzIGRhdGEpLhhOdW1iZXIBABAQAAAAAAQJASBUaGUgY3VycmVudCBibG9jayBudW1iZXIgYmVpbmcgcHJvY2Vzc2VkLiBTZXQgYnkgYGV4ZWN1dGVfYmxvY2tgLihQYXJlbnRIYXNoAQA0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHAgSGFzaCBvZiB0aGUgcHJldmlvdXMgYmxvY2suGERpZ2VzdAEAPAQABPAgRGlnZXN0IG9mIHRoZSBjdXJyZW50IGJsb2NrLCBhbHNvIHBhcnQgb2YgdGhlIGJsb2NrIGhlYWRlci4YRXZlbnRzAQBMBAAcoCBFdmVudHMgZGVwb3NpdGVkIGZvciB0aGUgY3VycmVudCBibG9jay4AHQEgTk9URTogVGhlIGl0ZW0gaXMgdW5ib3VuZCBhbmQgc2hvdWxkIHRoZXJlZm9yZSBuZXZlciBiZSByZWFkIG9uIGNoYWluLtAgSXQgY291bGQgb3RoZXJ3aXNlIGluZmxhdGUgdGhlIFBvViBzaXplIG9mIGEgYmxvY2suAC0BIEV2ZW50cyBoYXZlIGEgbGFyZ2UgaW4tbWVtb3J5IHNpemUuIEJveCB0aGUgZXZlbnRzIHRvIG5vdCBnbyBvdXQtb2YtbWVtb3J5/CBqdXN0IGluIGNhc2Ugc29tZW9uZSBzdGlsbCByZWFkcyB0aGVtIGZyb20gd2l0aGluIHRoZSBydW50aW1lLihFdmVudENvdW50AQAQEAAAAAAEuCBUaGUgbnVtYmVyIG9mIGV2ZW50cyBpbiB0aGUgYEV2ZW50czxUPmAgbGlzdC4sRXZlbnRUb3BpY3MBAQQCNMkHBAAoJQEgTWFwcGluZyBiZXR3ZWVuIGEgdG9waWMgKHJlcHJlc2VudGVkIGJ5IFQ6Okhhc2gpIGFuZCBhIHZlY3RvciBvZiBpbmRleGVzlCBvZiBldmVudHMgaW4gdGhlIGA8RXZlbnRzPFQ+PmAgbGlzdC4AUQEgQWxsIHRvcGljIHZlY3RvcnMgaGF2ZSBkZXRlcm1pbmlzdGljIHN0b3JhZ2UgbG9jYXRpb25zIGRlcGVuZGluZyBvbiB0aGUgdG9waWMuIFRoaXNFASBhbGxvd3MgbGlnaHQtY2xpZW50cyB0byBsZXZlcmFnZSB0aGUgY2hhbmdlcyB0cmllIHN0b3JhZ2UgdHJhY2tpbmcgbWVjaGFuaXNtIGFuZOQgaW4gY2FzZSBvZiBjaGFuZ2VzIGZldGNoIHRoZSBsaXN0IG9mIGV2ZW50cyBvZiBpbnRlcmVzdC4AWQEgVGhlIHZhbHVlIGhhcyB0aGUgdHlwZSBgKEJsb2NrTnVtYmVyRm9yPFQ+LCBFdmVudEluZGV4KWAgYmVjYXVzZSBpZiB3ZSB1c2VkIG9ubHkganVzdE0BIHRoZSBgRXZlbnRJbmRleGAgdGhlbiBpbiBjYXNlIGlmIHRoZSB0b3BpYyBoYXMgdGhlIHNhbWUgY29udGVudHMgb24gdGhlIG5leHQgYmxvY2sBASBubyBub3RpZmljYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgdGh1cyB0aGUgZXZlbnQgbWlnaHQgYmUgbG9zdC5ITGFzdFJ1bnRpbWVVcGdyYWRlAADNBwQABFUBIFN0b3JlcyB0aGUgYHNwZWNfdmVyc2lvbmAgYW5kIGBzcGVjX25hbWVgIG9mIHdoZW4gdGhlIGxhc3QgcnVudGltZSB1cGdyYWRlIGhhcHBlbmVkLlRVcGdyYWRlZFRvVTMyUmVmQ291bnQBACAEAARNASBUcnVlIGlmIHdlIGhhdmUgdXBncmFkZWQgc28gdGhhdCBgdHlwZSBSZWZDb3VudGAgaXMgYHUzMmAuIEZhbHNlIChkZWZhdWx0KSBpZiBub3QuYFVwZ3JhZGVkVG9UcmlwbGVSZWZDb3VudAEAIAQACF0BIFRydWUgaWYgd2UgaGF2ZSB1cGdyYWRlZCBzbyB0aGF0IEFjY291bnRJbmZvIGNvbnRhaW5zIHRocmVlIHR5cGVzIG9mIGBSZWZDb3VudGAuIEZhbHNlSCAoZGVmYXVsdCkgaWYgbm90LjhFeGVjdXRpb25QaGFzZQAAxQcEAASIIFRoZSBleGVjdXRpb24gcGhhc2Ugb2YgdGhlIGJsb2NrLkRBdXRob3JpemVkVXBncmFkZQAA1QcEAAS4IGBTb21lYCBpZiBhIGNvZGUgdXBncmFkZSBoYXMgYmVlbiBhdXRob3JpemVkLgF5AQFYGDBCbG9ja1dlaWdodHPZBwECB7C96TYDAAsAIEqp0QET//////////8iLQ0eAAELuIRcj1gBE6NwPQrXo3C9AQsAmPc+XQET/////////78BAAAiLQ0eAAELuAyv+cwBE6NwPQrXo3D9AQsAIEqp0QET//////////8BBwCIUmp0EwAAAAAAAABAIi0NHgAAAAAE0CBCbG9jayAmIGV4dHJpbnNpY3Mgd2VpZ2h0czogYmFzZSB2YWx1ZXMgYW5kIGxpbWl0cy4sQmxvY2tMZW5ndGjlBzAAADwAAABQAAAAUAAEqCBUaGUgbWF4aW11bSBsZW5ndGggb2YgYSBibG9jayAoaW4gYnl0ZXMpLjhCbG9ja0hhc2hDb3VudBAQABAAAARVASBNYXhpbXVtIG51bWJlciBvZiBibG9jayBudW1iZXIgdG8gYmxvY2sgaGFzaCBtYXBwaW5ncyB0byBrZWVwIChvbGRlc3QgcHJ1bmVkIGZpcnN0KS4gRGJXZWlnaHTtB0A4yjgBAAAAAJiq+QQAAAAABAkBIFRoZSB3ZWlnaHQgb2YgcnVudGltZSBkYXRhYmFzZSBvcGVyYXRpb25zIHRoZSBydW50aW1lIGNhbiBpbnZva2UuHFZlcnNpb27xB/0EIHBvbGthZG90PHBhcml0eS1wb2xrYWRvdAAAAAD8TQ8AAAAAAFzFH/H6P10MygEAAADfastomQdgmwUAAAA345f8fJH15AIAAABA/jrUAfiVmgYAAAAXprwNAGKuswEAAAAY71ijtnuncAEAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAACvLAKXoj5tPQsAAABJ6q8bVIoMsAMAAACR1d8YsNLPWAIAAAAqXpJGVTmeYAEAAADtmcWssl7t9QMAAADLyiXjnxQjhwIAAABoetRK038DwgEAAACrPAVyKR/riwEAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAQAAADz/xTVq1JwWQMAAABv9S7oWObFvQEAAACRscixYyjrkgEAAACf+1BapzjWnAEAAAD7xXe510fv1gEAAAAaAAAAAQSEIEdldCB0aGUgY2hhaW4ncyBpbi1jb2RlIHZlcnNpb24uKFNTNThQcmVmaXhtAQgAABSoIFRoZSBkZXNpZ25hdGVkIFNTNTggcHJlZml4IG9mIHRoaXMgY2hhaW4uADkBIFRoaXMgcmVwbGFjZXMgdGhlICJzczU4Rm9ybWF0IiBwcm9wZXJ0eSBkZWNsYXJlZCBpbiB0aGUgY2hhaW4gc3BlYy4gUmVhc29uIGlzMQEgdGhhdCB0aGUgcnVudGltZSBzaG91bGQga25vdyBhYm91dCB0aGUgcHJlZml4IGluIG9yZGVyIHRvIG1ha2UgdXNlIG9mIGl0IGFzcCBhbiBpZGVudGlmaWVyIG9mIHRoZSBjaGFpbi4BAQgAACRTY2hlZHVsZXIBJFNjaGVkdWxlchA8SW5jb21wbGV0ZVNpbmNlAAAQBAAAGEFnZW5kYQEBBAUQBQgEAARNASBJdGVtcyB0byBiZSBleGVjdXRlZCwgaW5kZXhlZCBieSB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhleSBzaG91bGQgYmUgZXhlY3V0ZWQgb24uHFJldHJpZXMAAQQCgBUIBAAEIQEgUmV0cnkgY29uZmlndXJhdGlvbnMgZm9yIGl0ZW1zIHRvIGJlIGV4ZWN1dGVkLCBpbmRleGVkIGJ5IHRhc2sgYWRkcmVzcy4YTG9va3VwAAEEBQSABAAQ+CBMb29rdXAgZnJvbSBhIG5hbWUgdG8gdGhlIGJsb2NrIG51bWJlciBhbmQgaW5kZXggb2YgdGhlIHRhc2suAFkBIEZvciB2MyAtPiB2NCB0aGUgcHJldmlvdXNseSB1bmJvdW5kZWQgaWRlbnRpdGllcyBhcmUgQmxha2UyLTI1NiBoYXNoZWQgdG8gZm9ybSB0aGUgdjQwIGlkZW50aXRpZXMuAYkBAXwINE1heGltdW1XZWlnaHQoQAsAgG6HdAETzMzMzMzMzMwEKQEgVGhlIG1heGltdW0gd2VpZ2h0IHRoYXQgbWF5IGJlIHNjaGVkdWxlZCBwZXIgYmxvY2sgZm9yIGFueSBkaXNwYXRjaGFibGVzLlBNYXhTY2hlZHVsZWRQZXJCbG9jaxAQMgAAABQdASBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc2NoZWR1bGVkIGNhbGxzIGluIHRoZSBxdWV1ZSBmb3IgYSBzaW5nbGUgYmxvY2suABggTk9URTpRASArIERlcGVuZGVudCBwYWxsZXRzJyBiZW5jaG1hcmtzIG1pZ2h0IHJlcXVpcmUgYSBoaWdoZXIgbGltaXQgZm9yIHRoZSBzZXR0aW5nLiBTZXQgYcQgaGlnaGVyIGxpbWl0IHVuZGVyIGBydW50aW1lLWJlbmNobWFya3NgIGZlYXR1cmUuARkIAQAgUHJlaW1hZ2UBIFByZWltYWdlDCRTdGF0dXNGb3IAAQQGNB0IBAAEkCBUaGUgcmVxdWVzdCBzdGF0dXMgb2YgYSBnaXZlbiBoYXNoLkBSZXF1ZXN0U3RhdHVzRm9yAAEEBjQlCAQABJAgVGhlIHJlcXVlc3Qgc3RhdHVzIG9mIGEgZ2l2ZW4gaGFzaC4sUHJlaW1hZ2VGb3IAAQQGNQg5CAQAAAGRAQGQAAE9CAoAEEJhYmUBEEJhYmVEKEVwb2NoSW5kZXgBADAgAAAAAAAAAAAEVCBDdXJyZW50IGVwb2NoIGluZGV4LixBdXRob3JpdGllcwEAQQgEAARsIEN1cnJlbnQgZXBvY2ggYXV0aG9yaXRpZXMuLEdlbmVzaXNTbG90AQCpASAAAAAAAAAAAAj4IFRoZSBzbG90IGF0IHdoaWNoIHRoZSBmaXJzdCBlcG9jaCBhY3R1YWxseSBzdGFydGVkLiBUaGlzIGlzIDCQIHVudGlsIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgY2hhaW4uLEN1cnJlbnRTbG90AQCpASAAAAAAAAAAAARUIEN1cnJlbnQgc2xvdCBudW1iZXIuKFJhbmRvbW5lc3MBAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAouCBUaGUgZXBvY2ggcmFuZG9tbmVzcyBmb3IgdGhlICpjdXJyZW50KiBlcG9jaC4ALCAjIFNlY3VyaXR5AAUBIFRoaXMgTVVTVCBOT1QgYmUgdXNlZCBmb3IgZ2FtYmxpbmcsIGFzIGl0IGNhbiBiZSBpbmZsdWVuY2VkIGJ5IGH4IG1hbGljaW91cyB2YWxpZGF0b3IgaW4gdGhlIHNob3J0IHRlcm0uIEl0IE1BWSBiZSB1c2VkIGluIG1hbnkVASBjcnlwdG9ncmFwaGljIHByb3RvY29scywgaG93ZXZlciwgc28gbG9uZyBhcyBvbmUgcmVtZW1iZXJzIHRoYXQgdGhpcxUBIChsaWtlIGV2ZXJ5dGhpbmcgZWxzZSBvbi1jaGFpbikgaXQgaXMgcHVibGljLiBGb3IgZXhhbXBsZSwgaXQgY2FuIGJlBQEgdXNlZCB3aGVyZSBhIG51bWJlciBpcyBuZWVkZWQgdGhhdCBjYW5ub3QgaGF2ZSBiZWVuIGNob3NlbiBieSBhbg0BIGFkdmVyc2FyeSwgZm9yIHB1cnBvc2VzIHN1Y2ggYXMgcHVibGljLWNvaW4gemVyby1rbm93bGVkZ2UgcHJvb2ZzLmBQZW5kaW5nRXBvY2hDb25maWdDaGFuZ2UAALEBBAAEYQEgUGVuZGluZyBlcG9jaCBjb25maWd1cmF0aW9uIGNoYW5nZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBuZXh0IGVwb2NoIGlzIGVuYWN0ZWQuOE5leHRSYW5kb21uZXNzAQAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFwgTmV4dCBlcG9jaCByYW5kb21uZXNzLjxOZXh0QXV0aG9yaXRpZXMBAEEIBAAEYCBOZXh0IGVwb2NoIGF1dGhvcml0aWVzLjBTZWdtZW50SW5kZXgBABAQAAAAACR8IFJhbmRvbW5lc3MgdW5kZXIgY29uc3RydWN0aW9uLgD4IFdlIG1ha2UgYSB0cmFkZS1vZmYgYmV0d2VlbiBzdG9yYWdlIGFjY2Vzc2VzIGFuZCBsaXN0IGxlbmd0aC4BASBXZSBzdG9yZSB0aGUgdW5kZXItY29uc3RydWN0aW9uIHJhbmRvbW5lc3MgaW4gc2VnbWVudHMgb2YgdXAgdG+UIGBVTkRFUl9DT05TVFJVQ1RJT05fU0VHTUVOVF9MRU5HVEhgLgDsIE9uY2UgYSBzZWdtZW50IHJlYWNoZXMgdGhpcyBsZW5ndGgsIHdlIGJlZ2luIHRoZSBuZXh0IG9uZS4JASBXZSByZXNldCBhbGwgc2VnbWVudHMgYW5kIHJldHVybiB0byBgMGAgYXQgdGhlIGJlZ2lubmluZyBvZiBldmVyeRwgZXBvY2guRFVuZGVyQ29uc3RydWN0aW9uAQEEBRBNCAQABBUBIFRXT1gtTk9URTogYFNlZ21lbnRJbmRleGAgaXMgYW4gaW5jcmVhc2luZyBpbnRlZ2VyLCBzbyB0aGlzIGlzIG9rYXkuLEluaXRpYWxpemVkAABVCAQACAEBIFRlbXBvcmFyeSB2YWx1ZSAoY2xlYXJlZCBhdCBibG9jayBmaW5hbGl6YXRpb24pIHdoaWNoIGlzIGBTb21lYB0BIGlmIHBlci1ibG9jayBpbml0aWFsaXphdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCBmb3IgY3VycmVudCBibG9jay5MQXV0aG9yVnJmUmFuZG9tbmVzcwEAhAQAEBUBIFRoaXMgZmllbGQgc2hvdWxkIGFsd2F5cyBiZSBwb3B1bGF0ZWQgZHVyaW5nIGJsb2NrIHByb2Nlc3NpbmcgdW5sZXNzGQEgc2Vjb25kYXJ5IHBsYWluIHNsb3RzIGFyZSBlbmFibGVkICh3aGljaCBkb24ndCBjb250YWluIGEgVlJGIG91dHB1dCkuAEkBIEl0IGlzIHNldCBpbiBgb25fZmluYWxpemVgLCBiZWZvcmUgaXQgd2lsbCBjb250YWluIHRoZSB2YWx1ZSBmcm9tIHRoZSBsYXN0IGJsb2NrLihFcG9jaFN0YXJ0AQCAIAAAAAAAAAAAFF0BIFRoZSBibG9jayBudW1iZXJzIHdoZW4gdGhlIGxhc3QgYW5kIGN1cnJlbnQgZXBvY2ggaGF2ZSBzdGFydGVkLCByZXNwZWN0aXZlbHkgYE4tMWAgYW5kFCBgTmAuSQEgTk9URTogV2UgdHJhY2sgdGhpcyBpcyBpbiBvcmRlciB0byBhbm5vdGF0ZSB0aGUgYmxvY2sgbnVtYmVyIHdoZW4gYSBnaXZlbiBwb29sIG9mWQEgZW50cm9weSB3YXMgZml4ZWQgKGkuZS4gaXQgd2FzIGtub3duIHRvIGNoYWluIG9ic2VydmVycykuIFNpbmNlIGVwb2NocyBhcmUgZGVmaW5lZCBpblkBIHNsb3RzLCB3aGljaCBtYXkgYmUgc2tpcHBlZCwgdGhlIGJsb2NrIG51bWJlcnMgbWF5IG5vdCBsaW5lIHVwIHdpdGggdGhlIHNsb3QgbnVtYmVycy4gTGF0ZW5lc3MBABAQAAAAABTYIEhvdyBsYXRlIHRoZSBjdXJyZW50IGJsb2NrIGlzIGNvbXBhcmVkIHRvIGl0cyBwYXJlbnQuABUBIFRoaXMgZW50cnkgaXMgcG9wdWxhdGVkIGFzIHBhcnQgb2YgYmxvY2sgZXhlY3V0aW9uIGFuZCBpcyBjbGVhbmVkIHVwEQEgb24gYmxvY2sgZmluYWxpemF0aW9uLiBRdWVyeWluZyB0aGlzIHN0b3JhZ2UgZW50cnkgb3V0c2lkZSBvZiBibG9ja7AgZXhlY3V0aW9uIGNvbnRleHQgc2hvdWxkIGFsd2F5cyB5aWVsZCB6ZXJvLixFcG9jaENvbmZpZwAAbQgEAAhhASBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGN1cnJlbnQgZXBvY2guIFNob3VsZCBuZXZlciBiZSBgTm9uZWAgYXMgaXQgaXMgaW5pdGlhbGl6ZWQgaW4kIGdlbmVzaXMuPE5leHRFcG9jaENvbmZpZwAAbQgEAAgtASBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIG5leHQgZXBvY2gsIGBOb25lYCBpZiB0aGUgY29uZmlnIHdpbGwgbm90IGNoYW5nZeggKHlvdSBjYW4gZmFsbGJhY2sgdG8gYEVwb2NoQ29uZmlnYCBpbnN0ZWFkIGluIHRoYXQgY2FzZSkuNFNraXBwZWRFcG9jaHMBAHEIBAAgKQEgQSBsaXN0IG9mIHRoZSBsYXN0IDEwMCBza2lwcGVkIGVwb2NocyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgc2Vzc2lvbiBpbmRleHAgd2hlbiB0aGUgZXBvY2ggd2FzIHNraXBwZWQuADEBIFRoaXMgaXMgb25seSB1c2VkIGZvciB2YWxpZGF0aW5nIGVxdWl2b2NhdGlvbiBwcm9vZnMuIEFuIGVxdWl2b2NhdGlvbiBwcm9vZjUBIG11c3QgY29udGFpbnMgYSBrZXktb3duZXJzaGlwIHByb29mIGZvciBhIGdpdmVuIHNlc3Npb24sIHRoZXJlZm9yZSB3ZSBuZWVkIGE5ASB3YXkgdG8gdGllIHRvZ2V0aGVyIHNlc3Npb25zIGFuZCBlcG9jaCBpbmRpY2VzLCBpLmUuIHdlIG5lZWQgdG8gdmFsaWRhdGUgdGhhdCkBIGEgdmFsaWRhdG9yIHdhcyB0aGUgb3duZXIgb2YgYSBnaXZlbiBrZXkgb24gYSBnaXZlbiBzZXNzaW9uLCBhbmQgd2hhdCB0aGWwIGFjdGl2ZSBlcG9jaCBpbmRleCB3YXMgZHVyaW5nIHRoYXQgc2Vzc2lvbi4BmQEAEDRFcG9jaER1cmF0aW9uMCBgCQAAAAAAAAzsIFRoZSBhbW91bnQgb2YgdGltZSwgaW4gc2xvdHMsIHRoYXQgZWFjaCBlcG9jaCBzaG91bGQgbGFzdC4ZASBOT1RFOiBDdXJyZW50bHkgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGNoYW5nZSB0aGUgZXBvY2ggZHVyYXRpb24gYWZ0ZXIhASB0aGUgY2hhaW4gaGFzIHN0YXJ0ZWQuIEF0dGVtcHRpbmcgdG8gZG8gc28gd2lsbCBicmljayBibG9jayBwcm9kdWN0aW9uLkRFeHBlY3RlZEJsb2NrVGltZTAgcBcAAAAAAAAUBQEgVGhlIGV4cGVjdGVkIGF2ZXJhZ2UgYmxvY2sgdGltZSBhdCB3aGljaCBCQUJFIHNob3VsZCBiZSBjcmVhdGluZxEBIGJsb2Nrcy4gU2luY2UgQkFCRSBpcyBwcm9iYWJpbGlzdGljIGl0IGlzIG5vdCB0cml2aWFsIHRvIGZpZ3VyZSBvdXQFASB3aGF0IHRoZSBleHBlY3RlZCBhdmVyYWdlIGJsb2NrIHRpbWUgc2hvdWxkIGJlIGJhc2VkIG9uIHRoZSBzbG90CQEgZHVyYXRpb24gYW5kIHRoZSBzZWN1cml0eSBwYXJhbWV0ZXIgYGNgICh3aGVyZSBgMSAtIGNgIHJlcHJlc2VudHOgIHRoZSBwcm9iYWJpbGl0eSBvZiBhIHNsb3QgYmVpbmcgZW1wdHkpLjhNYXhBdXRob3JpdGllcxAQoIYBAASIIE1heCBudW1iZXIgb2YgYXV0aG9yaXRpZXMgYWxsb3dlZDRNYXhOb21pbmF0b3JzEBAAAgAABNQgVGhlIG1heGltdW0gbnVtYmVyIG9mIG5vbWluYXRvcnMgZm9yIGVhY2ggdmFsaWRhdG9yLgF9CAIAJFRpbWVzdGFtcAEkVGltZXN0YW1wCAxOb3cBADAgAAAAAAAAAAAEoCBUaGUgY3VycmVudCB0aW1lIGZvciB0aGUgY3VycmVudCBibG9jay4kRGlkVXBkYXRlAQAgBAAQ2CBXaGV0aGVyIHRoZSB0aW1lc3RhbXAgaGFzIGJlZW4gdXBkYXRlZCBpbiB0aGlzIGJsb2NrLgBVASBUaGlzIHZhbHVlIGlzIHVwZGF0ZWQgdG8gYHRydWVgIHVwb24gc3VjY2Vzc2Z1bCBzdWJtaXNzaW9uIG9mIGEgdGltZXN0YW1wIGJ5IGEgbm9kZS5FASBJdCBpcyB0aGVuIGNoZWNrZWQgYXQgdGhlIGVuZCBvZiBlYWNoIGJsb2NrIGV4ZWN1dGlvbiBpbiB0aGUgYG9uX2ZpbmFsaXplYCBob29rLgG9AQAENE1pbmltdW1QZXJpb2QwILgLAAAAAAAAGIwgVGhlIG1pbmltdW0gcGVyaW9kIGJldHdlZW4gYmxvY2tzLgBNASBCZSBhd2FyZSB0aGF0IHRoaXMgaXMgZGlmZmVyZW50IHRvIHRoZSAqZXhwZWN0ZWQqIHBlcmlvZCB0aGF0IHRoZSBibG9jayBwcm9kdWN0aW9uSQEgYXBwYXJhdHVzIHByb3ZpZGVzLiBZb3VyIGNob3NlbiBjb25zZW5zdXMgc3lzdGVtIHdpbGwgZ2VuZXJhbGx5IHdvcmsgd2l0aCB0aGlzIHRvYQEgZGV0ZXJtaW5lIGEgc2Vuc2libGUgYmxvY2sgdGltZS4gRm9yIGV4YW1wbGUsIGluIHRoZSBBdXJhIHBhbGxldCBpdCB3aWxsIGJlIGRvdWJsZSB0aGlzcCBwZXJpb2Qgb24gZGVmYXVsdCBzZXR0aW5ncy4AAwAcSW5kaWNlcwEcSW5kaWNlcwQgQWNjb3VudHMAAQQCEIEIBAAEiCBUaGUgbG9va3VwIGZyb20gaW5kZXggdG8gYWNjb3VudC4BwQEBlAQcRGVwb3NpdBhAAOh2SBcAAAAAAAAAAAAAAASsIFRoZSBkZXBvc2l0IG5lZWRlZCBmb3IgcmVzZXJ2aW5nIGFuIGluZGV4LgGFCAQAIEJhbGFuY2VzASBCYWxhbmNlcxw0VG90YWxJc3N1YW5jZQEAGEAAAAAAAAAAAAAAAAAAAAAABJggVGhlIHRvdGFsIHVuaXRzIGlzc3VlZCBpbiB0aGUgc3lzdGVtLkBJbmFjdGl2ZUlzc3VhbmNlAQAYQAAAAAAAAAAAAAAAAAAAAAAECQEgVGhlIHRvdGFsIHVuaXRzIG9mIG91dHN0YW5kaW5nIGRlYWN0aXZhdGVkIGJhbGFuY2UgaW4gdGhlIHN5c3RlbS4cQWNjb3VudAEBBAIAFAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgGAJASBUaGUgQmFsYW5jZXMgcGFsbGV0IGV4YW1wbGUgb2Ygc3RvcmluZyB0aGUgYmFsYW5jZSBvZiBhbiBhY2NvdW50LgAoICMgRXhhbXBsZQA0IGBgYG5vY29tcGlsZbAgIGltcGwgcGFsbGV0X2JhbGFuY2VzOjpDb25maWcgZm9yIFJ1bnRpbWUgexkCICAgIHR5cGUgQWNjb3VudFN0b3JlID0gU3RvcmFnZU1hcFNoaW08U2VsZjo6QWNjb3VudDxSdW50aW1lPiwgZnJhbWVfc3lzdGVtOjpQcm92aWRlcjxSdW50aW1lPiwgQWNjb3VudElkLCBTZWxmOjpBY2NvdW50RGF0YTxCYWxhbmNlPj4MICB9ECBgYGAAFQEgWW91IGNhbiBhbHNvIHN0b3JlIHRoZSBiYWxhbmNlIG9mIGFuIGFjY291bnQgaW4gdGhlIGBTeXN0ZW1gIHBhbGxldC4AKCAjIEV4YW1wbGUANCBgYGBub2NvbXBpbGWwICBpbXBsIHBhbGxldF9iYWxhbmNlczo6Q29uZmlnIGZvciBSdW50aW1lIHt0ICAgdHlwZSBBY2NvdW50U3RvcmUgPSBTeXN0ZW0MICB9ECBgYGAAUQEgQnV0IHRoaXMgY29tZXMgd2l0aCB0cmFkZW9mZnMsIHN0b3JpbmcgYWNjb3VudCBiYWxhbmNlcyBpbiB0aGUgc3lzdGVtIHBhbGxldCBzdG9yZXNtASBgZnJhbWVfc3lzdGVtYCBkYXRhIGFsb25nc2lkZSB0aGUgYWNjb3VudCBkYXRhIGNvbnRyYXJ5IHRvIHN0b3JpbmcgYWNjb3VudCBiYWxhbmNlcyBpbiB0aGUpASBgQmFsYW5jZXNgIHBhbGxldCwgd2hpY2ggdXNlcyBhIGBTdG9yYWdlTWFwYCB0byBzdG9yZSBiYWxhbmNlcyBkYXRhIG9ubHkuQQEgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgaW4gdGhlIGNhc2UgdGhhdCB0aGlzIHBhbGxldCBpcyB1c2VkIHRvIHN0b3JlIGJhbGFuY2VzLhRMb2NrcwEBBAIAiQgEABC4IEFueSBsaXF1aWRpdHkgbG9ja3Mgb24gc29tZSBhY2NvdW50IGJhbGFuY2VzLiUBIE5PVEU6IFNob3VsZCBvbmx5IGJlIGFjY2Vzc2VkIHdoZW4gc2V0dGluZywgY2hhbmdpbmcgYW5kIGZyZWVpbmcgYSBsb2NrLgCtASBVc2Ugb2YgbG9ja3MgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgZnJlZXplcy4gU2VlIGBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvcHVsbC8xMjk1MS9gIFJlc2VydmVzAQEEAgCZCAQADKQgTmFtZWQgcmVzZXJ2ZXMgb24gc29tZSBhY2NvdW50IGJhbGFuY2VzLgCxASBVc2Ugb2YgcmVzZXJ2ZXMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgaG9sZHMuIFNlZSBgaHR0cHM6Ly9naXRodWIuY29tL3Bhcml0eXRlY2gvc3Vic3RyYXRlL3B1bGwvMTI5NTEvYBRIb2xkcwEBBAIApQgEAARsIEhvbGRzIG9uIGFjY291bnQgYmFsYW5jZXMuHEZyZWV6ZXMBAQQCAL0IBAAEiCBGcmVlemUgbG9ja3Mgb24gYWNjb3VudCBiYWxhbmNlcy4BzQEBmBBIRXhpc3RlbnRpYWxEZXBvc2l0GEAA5AtUAgAAAAAAAAAAAAAAIEEBIFRoZSBtaW5pbXVtIGFtb3VudCByZXF1aXJlZCB0byBrZWVwIGFuIGFjY291bnQgb3Blbi4gTVVTVCBCRSBHUkVBVEVSIFRIQU4gWkVSTyEAWQEgSWYgeW91ICpyZWFsbHkqIG5lZWQgaXQgdG8gYmUgemVybywgeW91IGNhbiBlbmFibGUgdGhlIGZlYXR1cmUgYGluc2VjdXJlX3plcm9fZWRgIGZvcmEBIHRoaXMgcGFsbGV0LiBIb3dldmVyLCB5b3UgZG8gc28gYXQgeW91ciBvd24gcmlzazogdGhpcyB3aWxsIG9wZW4gdXAgYSBtYWpvciBEb1MgdmVjdG9yLlkBIEluIGNhc2UgeW91IGhhdmUgbXVsdGlwbGUgc291cmNlcyBvZiBwcm92aWRlciByZWZlcmVuY2VzLCB5b3UgbWF5IGFsc28gZ2V0IHVuZXhwZWN0ZWSMIGJlaGF2aW91ciBpZiB5b3Ugc2V0IHRoaXMgdG8gemVyby4A8CBCb3R0b20gbGluZTogRG8geW91cnNlbGYgYSBmYXZvdXIgYW5kIG1ha2UgaXQgYXQgbGVhc3Qgb25lISBNYXhMb2NrcxAQMgAAABD0IFRoZSBtYXhpbXVtIG51bWJlciBvZiBsb2NrcyB0aGF0IHNob3VsZCBleGlzdCBvbiBhbiBhY2NvdW50LtwgTm90IHN0cmljdGx5IGVuZm9yY2VkLCBidXQgdXNlZCBmb3Igd2VpZ2h0IGVzdGltYXRpb24uAK0BIFVzZSBvZiBsb2NrcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBmcmVlemVzLiBTZWUgYGh0dHBzOi8vZ2l0aHViLmNvbS9wYXJpdHl0ZWNoL3N1YnN0cmF0ZS9wdWxsLzEyOTUxL2AsTWF4UmVzZXJ2ZXMQEDIAAAAMDQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIG5hbWVkIHJlc2VydmVzIHRoYXQgY2FuIGV4aXN0IG9uIGFuIGFjY291bnQuALEBIFVzZSBvZiByZXNlcnZlcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBob2xkcy4gU2VlIGBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvcHVsbC8xMjk1MS9gKE1heEZyZWV6ZXMQEAgAAAAEYQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGl2aWR1YWwgZnJlZXplIGxvY2tzIHRoYXQgY2FuIGV4aXN0IG9uIGFuIGFjY291bnQgYXQgYW55IHRpbWUuAdEIBQBIVHJhbnNhY3Rpb25QYXltZW50AUhUcmFuc2FjdGlvblBheW1lbnQIRE5leHRGZWVNdWx0aXBsaWVyAQDRBkAAAGSns7bgDQAAAAAAAAAAADhTdG9yYWdlVmVyc2lvbgEA1QgEAAAAAaAEYE9wZXJhdGlvbmFsRmVlTXVsdGlwbGllcggEBVRZASBBIGZlZSBtdWx0aXBsaWVyIGZvciBgT3BlcmF0aW9uYWxgIGV4dHJpbnNpY3MgdG8gY29tcHV0ZSAidmlydHVhbCB0aXAiIHRvIGJvb3N0IHRoZWlyLCBgcHJpb3JpdHlgAFEBIFRoaXMgdmFsdWUgaXMgbXVsdGlwbGllZCBieSB0aGUgYGZpbmFsX2ZlZWAgdG8gb2J0YWluIGEgInZpcnR1YWwgdGlwIiB0aGF0IGlzIGxhdGVy9CBhZGRlZCB0byBhIHRpcCBjb21wb25lbnQgaW4gcmVndWxhciBgcHJpb3JpdHlgIGNhbGN1bGF0aW9ucy5NASBJdCBtZWFucyB0aGF0IGEgYE5vcm1hbGAgdHJhbnNhY3Rpb24gY2FuIGZyb250LXJ1biBhIHNpbWlsYXJseS1zaXplZCBgT3BlcmF0aW9uYWxgQQEgZXh0cmluc2ljICh3aXRoIG5vIHRpcCksIGJ5IGluY2x1ZGluZyBhIHRpcCB2YWx1ZSBncmVhdGVyIHRoYW4gdGhlIHZpcnR1YWwgdGlwLgA8IGBgYHJ1c3QsaWdub3JlQCAvLyBGb3IgYE5vcm1hbGCMIGxldCBwcmlvcml0eSA9IHByaW9yaXR5X2NhbGModGlwKTsAVCAvLyBGb3IgYE9wZXJhdGlvbmFsYBEBIGxldCB2aXJ0dWFsX3RpcCA9IChpbmNsdXNpb25fZmVlICsgdGlwKSAqIE9wZXJhdGlvbmFsRmVlTXVsdGlwbGllcjvEIGxldCBwcmlvcml0eSA9IHByaW9yaXR5X2NhbGModGlwICsgdmlydHVhbF90aXApOxAgYGBgAFEBIE5vdGUgdGhhdCBzaW5jZSB3ZSB1c2UgYGZpbmFsX2ZlZWAgdGhlIG11bHRpcGxpZXIgYXBwbGllcyBhbHNvIHRvIHRoZSByZWd1bGFyIGB0aXBgXQEgc2VudCB3aXRoIHRoZSB0cmFuc2FjdGlvbi4gU28sIG5vdCBvbmx5IGRvZXMgdGhlIHRyYW5zYWN0aW9uIGdldCBhIHByaW9yaXR5IGJ1bXAgYmFzZWRhASBvbiB0aGUgYGluY2x1c2lvbl9mZWVgLCBidXQgd2UgYWxzbyBhbXBsaWZ5IHRoZSBpbXBhY3Qgb2YgdGlwcyBhcHBsaWVkIHRvIGBPcGVyYXRpb25hbGA4IHRyYW5zYWN0aW9ucy4AIAAoQXV0aG9yc2hpcAEoQXV0aG9yc2hpcAQYQXV0aG9yAAAABAAEZCBBdXRob3Igb2YgY3VycmVudCBibG9jay4AAAAABgAcU3Rha2luZwEcU3Rha2luZ6w4VmFsaWRhdG9yQ291bnQBABAQAAAAAAScIFRoZSBpZGVhbCBudW1iZXIgb2YgYWN0aXZlIHZhbGlkYXRvcnMuVE1pbmltdW1WYWxpZGF0b3JDb3VudAEAEBAAAAAABEEBIE1pbmltdW0gbnVtYmVyIG9mIHN0YWtpbmcgcGFydGljaXBhbnRzIGJlZm9yZSBlbWVyZ2VuY3kgY29uZGl0aW9ucyBhcmUgaW1wb3NlZC40SW52dWxuZXJhYmxlcwEA0QEEAAxZASBBbnkgdmFsaWRhdG9ycyB0aGF0IG1heSBuZXZlciBiZSBzbGFzaGVkIG9yIGZvcmNpYmx5IGtpY2tlZC4gSXQncyBhIFZlYyBzaW5jZSB0aGV5J3JlTQEgZWFzeSB0byBpbml0aWFsaXplIGFuZCB0aGUgcGVyZm9ybWFuY2UgaGl0IGlzIG1pbmltYWwgKHdlIGV4cGVjdCBubyBtb3JlIHRoYW4gZm91cqwgaW52dWxuZXJhYmxlcykgYW5kIHJlc3RyaWN0ZWQgdG8gdGVzdG5ldHMuGEJvbmRlZAABBAUAAAQADAEBIE1hcCBmcm9tIGFsbCBsb2NrZWQgInN0YXNoIiBhY2NvdW50cyB0byB0aGUgY29udHJvbGxlciBhY2NvdW50LgDQIFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLkBNaW5Ob21pbmF0b3JCb25kAQAYQAAAAAAAAAAAAAAAAAAAAAAEIQEgVGhlIG1pbmltdW0gYWN0aXZlIGJvbmQgdG8gYmVjb21lIGFuZCBtYWludGFpbiB0aGUgcm9sZSBvZiBhIG5vbWluYXRvci5ATWluVmFsaWRhdG9yQm9uZAEAGEAAAAAAAAAAAAAAAAAAAAAABCEBIFRoZSBtaW5pbXVtIGFjdGl2ZSBib25kIHRvIGJlY29tZSBhbmQgbWFpbnRhaW4gdGhlIHJvbGUgb2YgYSB2YWxpZGF0b3IuSE1pbmltdW1BY3RpdmVTdGFrZQEAGEAAAAAAAAAAAAAAAAAAAAAABBEBIFRoZSBtaW5pbXVtIGFjdGl2ZSBub21pbmF0b3Igc3Rha2Ugb2YgdGhlIGxhc3Qgc3VjY2Vzc2Z1bCBlbGVjdGlvbi40TWluQ29tbWlzc2lvbgEArBAAAAAADOggVGhlIG1pbmltdW0gYW1vdW50IG9mIGNvbW1pc3Npb24gdGhhdCB2YWxpZGF0b3JzIGNhbiBzZXQuAIAgSWYgc2V0IHRvIGAwYCwgbm8gbGltaXQgZXhpc3RzLhhMZWRnZXIAAQQCANkIBAAQRQEgTWFwIGZyb20gYWxsICh1bmxvY2tlZCkgImNvbnRyb2xsZXIiIGFjY291bnRzIHRvIHRoZSBpbmZvIHJlZ2FyZGluZyB0aGUgc3Rha2luZy4AdQEgTm90ZTogQWxsIHRoZSByZWFkcyBhbmQgbXV0YXRpb25zIHRvIHRoaXMgc3RvcmFnZSAqTVVTVCogYmUgZG9uZSB0aHJvdWdoIHRoZSBtZXRob2RzIGV4cG9zZWToIGJ5IFtgU3Rha2luZ0xlZGdlcmBdIHRvIGVuc3VyZSBkYXRhIGFuZCBsb2NrIGNvbnNpc3RlbmN5LhRQYXllZQABBAUAqAQADOQgV2hlcmUgdGhlIHJld2FyZCBwYXltZW50IHNob3VsZCBiZSBtYWRlLiBLZXllZCBieSBzdGFzaC4A0CBUV09YLU5PVEU6IFNBRkUgc2luY2UgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC4oVmFsaWRhdG9ycwEBBAUAsAgAAAxFASBUaGUgbWFwIGZyb20gKHdhbm5hYmUpIHZhbGlkYXRvciBzdGFzaCBrZXkgdG8gdGhlIHByZWZlcmVuY2VzIG9mIHRoYXQgdmFsaWRhdG9yLgDQIFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLlBDb3VudGVyRm9yVmFsaWRhdG9ycwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwSE1heFZhbGlkYXRvcnNDb3VudAAAEAQADDEBIFRoZSBtYXhpbXVtIHZhbGlkYXRvciBjb3VudCBiZWZvcmUgd2Ugc3RvcCBhbGxvd2luZyBuZXcgdmFsaWRhdG9ycyB0byBqb2luLgDQIFdoZW4gdGhpcyB2YWx1ZSBpcyBub3Qgc2V0LCBubyBsaW1pdHMgYXJlIGVuZm9yY2VkLihOb21pbmF0b3JzAAEEBQDhCAQATHUBIFRoZSBtYXAgZnJvbSBub21pbmF0b3Igc3Rhc2gga2V5IHRvIHRoZWlyIG5vbWluYXRpb24gcHJlZmVyZW5jZXMsIG5hbWVseSB0aGUgdmFsaWRhdG9ycyB0aGF0WCB0aGV5IHdpc2ggdG8gc3VwcG9ydC4AOQEgTm90ZSB0aGF0IHRoZSBrZXlzIG9mIHRoaXMgc3RvcmFnZSBtYXAgbWlnaHQgYmVjb21lIG5vbi1kZWNvZGFibGUgaW4gY2FzZSB0aGUtASBhY2NvdW50J3MgW2BOb21pbmF0aW9uc1F1b3RhOjpNYXhOb21pbmF0aW9uc2BdIGNvbmZpZ3VyYXRpb24gaXMgZGVjcmVhc2VkLpAgSW4gdGhpcyByYXJlIGNhc2UsIHRoZXNlIG5vbWluYXRvcnNlASBhcmUgc3RpbGwgZXhpc3RlbnQgaW4gc3RvcmFnZSwgdGhlaXIga2V5IGlzIGNvcnJlY3QgYW5kIHJldHJpZXZhYmxlIChpLmUuIGBjb250YWluc19rZXlgcQEgaW5kaWNhdGVzIHRoYXQgdGhleSBleGlzdCksIGJ1dCB0aGVpciB2YWx1ZSBjYW5ub3QgYmUgZGVjb2RlZC4gVGhlcmVmb3JlLCB0aGUgbm9uLWRlY29kYWJsZW0BIG5vbWluYXRvcnMgd2lsbCBlZmZlY3RpdmVseSBub3QtZXhpc3QsIHVudGlsIHRoZXkgcmUtc3VibWl0IHRoZWlyIHByZWZlcmVuY2VzIHN1Y2ggdGhhdCBpdAEBIGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBuZXdseSBzZXQgYENvbmZpZzo6TWF4Tm9taW5hdGlvbnNgLgBhASBUaGlzIGltcGxpZXMgdGhhdCBgOjppdGVyX2tleXMoKS5jb3VudCgpYCBhbmQgYDo6aXRlcigpLmNvdW50KClgIG1pZ2h0IHJldHVybiBkaWZmZXJlbnRtASB2YWx1ZXMgZm9yIHRoaXMgbWFwLiBNb3Jlb3ZlciwgdGhlIG1haW4gYDo6Y291bnQoKWAgaXMgYWxpZ25lZCB3aXRoIHRoZSBmb3JtZXIsIG5hbWVseSB0aGVsIG51bWJlciBvZiBrZXlzIHRoYXQgZXhpc3QuAG0BIExhc3RseSwgaWYgYW55IG9mIHRoZSBub21pbmF0b3JzIGJlY29tZSBub24tZGVjb2RhYmxlLCB0aGV5IGNhbiBiZSBjaGlsbGVkIGltbWVkaWF0ZWx5IHZpYbggW2BDYWxsOjpjaGlsbF9vdGhlcmBdIGRpc3BhdGNoYWJsZSBieSBhbnlvbmUuANAgVFdPWC1OT1RFOiBTQUZFIHNpbmNlIGBBY2NvdW50SWRgIGlzIGEgc2VjdXJlIGhhc2guUENvdW50ZXJGb3JOb21pbmF0b3JzAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXA4VmlydHVhbFN0YWtlcnMAAQQFAIwEABjIIFN0YWtlcnMgd2hvc2UgZnVuZHMgYXJlIG1hbmFnZWQgYnkgb3RoZXIgcGFsbGV0cy4AdQEgVGhpcyBwYWxsZXQgZG9lcyBub3QgYXBwbHkgYW55IGxvY2tzIG9uIHRoZW0sIHRoZXJlZm9yZSB0aGV5IGFyZSBvbmx5IHZpcnR1YWxseSBib25kZWQuIFRoZXltASBhcmUgZXhwZWN0ZWQgdG8gYmUga2V5bGVzcyBhY2NvdW50cyBhbmQgaGVuY2Ugc2hvdWxkIG5vdCBiZSBhbGxvd2VkIHRvIG11dGF0ZSB0aGVpciBsZWRnZXJxASBkaXJlY3RseSB2aWEgdGhpcyBwYWxsZXQuIEluc3RlYWQsIHRoZXNlIGFjY291bnRzIGFyZSBtYW5hZ2VkIGJ5IG90aGVyIHBhbGxldHMgYW5kIGFjY2Vzc2VkKQEgdmlhIGxvdyBsZXZlbCBhcGlzLiBXZSBrZWVwIHRyYWNrIG9mIHRoZW0gdG8gZG8gbWluaW1hbCBpbnRlZ3JpdHkgY2hlY2tzLmBDb3VudGVyRm9yVmlydHVhbFN0YWtlcnMBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcEhNYXhOb21pbmF0b3JzQ291bnQAABAEAAwxASBUaGUgbWF4aW11bSBub21pbmF0b3IgY291bnQgYmVmb3JlIHdlIHN0b3AgYWxsb3dpbmcgbmV3IHZhbGlkYXRvcnMgdG8gam9pbi4A0CBXaGVuIHRoaXMgdmFsdWUgaXMgbm90IHNldCwgbm8gbGltaXRzIGFyZSBlbmZvcmNlZC4oQ3VycmVudEVyYQAAEAQAEFwgVGhlIGN1cnJlbnQgZXJhIGluZGV4LgBlASBUaGlzIGlzIHRoZSBsYXRlc3QgcGxhbm5lZCBlcmEsIGRlcGVuZGluZyBvbiBob3cgdGhlIFNlc3Npb24gcGFsbGV0IHF1ZXVlcyB0aGUgdmFsaWRhdG9ygCBzZXQsIGl0IG1pZ2h0IGJlIGFjdGl2ZSBvciBub3QuJEFjdGl2ZUVyYQAA6QgEABDYIFRoZSBhY3RpdmUgZXJhIGluZm9ybWF0aW9uLCBpdCBob2xkcyBpbmRleCBhbmQgc3RhcnQuAFkBIFRoZSBhY3RpdmUgZXJhIGlzIHRoZSBlcmEgYmVpbmcgY3VycmVudGx5IHJld2FyZGVkLiBWYWxpZGF0b3Igc2V0IG9mIHRoaXMgZXJhIG11c3QgYmWsIGVxdWFsIHRvIFtgU2Vzc2lvbkludGVyZmFjZTo6dmFsaWRhdG9yc2BdLlRFcmFzU3RhcnRTZXNzaW9uSW5kZXgAAQQFEBAEABBVASBUaGUgc2Vzc2lvbiBpbmRleCBhdCB3aGljaCB0aGUgZXJhIHN0YXJ0IGZvciB0aGUgbGFzdCBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy4AYQEgTm90ZTogVGhpcyB0cmFja3MgdGhlIHN0YXJ0aW5nIHNlc3Npb24gKGkuZS4gc2Vzc2lvbiBpbmRleCB3aGVuIGVyYSBzdGFydCBiZWluZyBhY3RpdmUp8CBmb3IgdGhlIGVyYXMgaW4gYFtDdXJyZW50RXJhIC0gSElTVE9SWV9ERVBUSCwgQ3VycmVudEVyYV1gLixFcmFzU3Rha2VycwEBCAUF8Qj1CAwAAAAgeCBFeHBvc3VyZSBvZiB2YWxpZGF0b3IgYXQgZXJhLgBhASBUaGlzIGlzIGtleWVkIGZpcnN0IGJ5IHRoZSBlcmEgaW5kZXggdG8gYWxsb3cgYnVsayBkZWxldGlvbiBhbmQgdGhlbiB0aGUgc3Rhc2ggYWNjb3VudC4AzCBJcyBpdCByZW1vdmVkIGFmdGVyIFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLkEBIElmIHN0YWtlcnMgaGFzbid0IGJlZW4gc2V0IG9yIGhhcyBiZWVuIHJlbW92ZWQgdGhlbiBlbXB0eSBleHBvc3VyZSBpcyByZXR1cm5lZC4AKQEgTm90ZTogRGVwcmVjYXRlZCBzaW5jZSB2MTQuIFVzZSBgRXJhSW5mb2AgaW5zdGVhZCB0byB3b3JrIHdpdGggZXhwb3N1cmVzLkxFcmFzU3Rha2Vyc092ZXJ2aWV3AAEIBQXxCAEJBAAwuCBTdW1tYXJ5IG9mIHZhbGlkYXRvciBleHBvc3VyZSBhdCBhIGdpdmVuIGVyYS4AcQEgVGhpcyBjb250YWlucyB0aGUgdG90YWwgc3Rha2UgaW4gc3VwcG9ydCBvZiB0aGUgdmFsaWRhdG9yIGFuZCB0aGVpciBvd24gc3Rha2UuIEluIGFkZGl0aW9uLHUBIGl0IGNhbiBhbHNvIGJlIHVzZWQgdG8gZ2V0IHRoZSBudW1iZXIgb2Ygbm9taW5hdG9ycyBiYWNraW5nIHRoaXMgdmFsaWRhdG9yIGFuZCB0aGUgbnVtYmVyIG9maQEgZXhwb3N1cmUgcGFnZXMgdGhleSBhcmUgZGl2aWRlZCBpbnRvLiBUaGUgcGFnZSBjb3VudCBpcyB1c2VmdWwgdG8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2asIHBhZ2VzIG9mIHJld2FyZHMgdGhhdCBuZWVkcyB0byBiZSBjbGFpbWVkLgBhASBUaGlzIGlzIGtleWVkIGZpcnN0IGJ5IHRoZSBlcmEgaW5kZXggdG8gYWxsb3cgYnVsayBkZWxldGlvbiBhbmQgdGhlbiB0aGUgc3Rhc2ggYWNjb3VudC6sIFNob3VsZCBvbmx5IGJlIGFjY2Vzc2VkIHRocm91Z2ggYEVyYUluZm9gLgDMIElzIGl0IHJlbW92ZWQgYWZ0ZXIgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuQQEgSWYgc3Rha2VycyBoYXNuJ3QgYmVlbiBzZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCB0aGVuIGVtcHR5IG92ZXJ2aWV3IGlzIHJldHVybmVkLkhFcmFzU3Rha2Vyc0NsaXBwZWQBAQgFBfEI9QgMAAAAQJggQ2xpcHBlZCBFeHBvc3VyZSBvZiB2YWxpZGF0b3IgYXQgZXJhLgBlASBOb3RlOiBUaGlzIGlzIGRlcHJlY2F0ZWQsIHNob3VsZCBiZSB1c2VkIGFzIHJlYWQtb25seSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuMQEgTmV3IGBFeHBvc3VyZWBzIGFyZSBzdG9yZWQgaW4gYSBwYWdlZCBtYW5uZXIgaW4gYEVyYXNTdGFrZXJzUGFnZWRgIGluc3RlYWQuAFkBIFRoaXMgaXMgc2ltaWxhciB0byBbYEVyYXNTdGFrZXJzYF0gYnV0IG51bWJlciBvZiBub21pbmF0b3JzIGV4cG9zZWQgaXMgcmVkdWNlZCB0byB0aGWoIGBUOjpNYXhFeHBvc3VyZVBhZ2VTaXplYCBiaWdnZXN0IHN0YWtlcnMuHQEgKE5vdGU6IHRoZSBmaWVsZCBgdG90YWxgIGFuZCBgb3duYCBvZiB0aGUgZXhwb3N1cmUgcmVtYWlucyB1bmNoYW5nZWQpLvQgVGhpcyBpcyB1c2VkIHRvIGxpbWl0IHRoZSBpL28gY29zdCBmb3IgdGhlIG5vbWluYXRvciBwYXlvdXQuAF0BIFRoaXMgaXMga2V5ZWQgZmlzdCBieSB0aGUgZXJhIGluZGV4IHRvIGFsbG93IGJ1bGsgZGVsZXRpb24gYW5kIHRoZW4gdGhlIHN0YXNoIGFjY291bnQuAMwgSXQgaXMgcmVtb3ZlZCBhZnRlciBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy5BASBJZiBzdGFrZXJzIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gZW1wdHkgZXhwb3N1cmUgaXMgcmV0dXJuZWQuACkBIE5vdGU6IERlcHJlY2F0ZWQgc2luY2UgdjE0LiBVc2UgYEVyYUluZm9gIGluc3RlYWQgdG8gd29yayB3aXRoIGV4cG9zdXJlcy5ARXJhc1N0YWtlcnNQYWdlZAABDAUFBQUJCQkEABjAIFBhZ2luYXRlZCBleHBvc3VyZSBvZiBhIHZhbGlkYXRvciBhdCBnaXZlbiBlcmEuAHEBIFRoaXMgaXMga2V5ZWQgZmlyc3QgYnkgdGhlIGVyYSBpbmRleCB0byBhbGxvdyBidWxrIGRlbGV0aW9uLCB0aGVuIHN0YXNoIGFjY291bnQgYW5kIGZpbmFsbHnUIHRoZSBwYWdlLiBTaG91bGQgb25seSBiZSBhY2Nlc3NlZCB0aHJvdWdoIGBFcmFJbmZvYC4A1CBUaGlzIGlzIGNsZWFyZWQgYWZ0ZXIgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuOENsYWltZWRSZXdhcmRzAQEIBQXxCOUBBAAY3CBIaXN0b3J5IG9mIGNsYWltZWQgcGFnZWQgcmV3YXJkcyBieSBlcmEgYW5kIHZhbGlkYXRvci4AaQEgVGhpcyBpcyBrZXllZCBieSBlcmEgYW5kIHZhbGlkYXRvciBzdGFzaCB3aGljaCBtYXBzIHRvIHRoZSBzZXQgb2YgcGFnZSBpbmRleGVzIHdoaWNoIGhhdmU4IGJlZW4gY2xhaW1lZC4AzCBJdCBpcyByZW1vdmVkIGFmdGVyIFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLkhFcmFzVmFsaWRhdG9yUHJlZnMBAQgFBfEIsAgAABQRASBTaW1pbGFyIHRvIGBFcmFzU3Rha2Vyc2AsIHRoaXMgaG9sZHMgdGhlIHByZWZlcmVuY2VzIG9mIHZhbGlkYXRvcnMuAGEBIFRoaXMgaXMga2V5ZWQgZmlyc3QgYnkgdGhlIGVyYSBpbmRleCB0byBhbGxvdyBidWxrIGRlbGV0aW9uIGFuZCB0aGVuIHRoZSBzdGFzaCBhY2NvdW50LgDMIElzIGl0IHJlbW92ZWQgYWZ0ZXIgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuTEVyYXNWYWxpZGF0b3JSZXdhcmQAAQQFEBgEAAwtASBUaGUgdG90YWwgdmFsaWRhdG9yIGVyYSBwYXlvdXQgZm9yIHRoZSBsYXN0IFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLgAhASBFcmFzIHRoYXQgaGF2ZW4ndCBmaW5pc2hlZCB5ZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCBkb2Vzbid0IGhhdmUgcmV3YXJkLkBFcmFzUmV3YXJkUG9pbnRzAQEEBRANCRQAAAAAAAjQIFJld2FyZHMgZm9yIHRoZSBsYXN0IFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLiUBIElmIHJld2FyZCBoYXNuJ3QgYmVlbiBzZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCB0aGVuIDAgcmV3YXJkIGlzIHJldHVybmVkLjhFcmFzVG90YWxTdGFrZQEBBAUQGEAAAAAAAAAAAAAAAAAAAAAACBEBIFRoZSB0b3RhbCBhbW91bnQgc3Rha2VkIGZvciB0aGUgbGFzdCBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy4dASBJZiB0b3RhbCBoYXNuJ3QgYmVlbiBzZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCB0aGVuIDAgc3Rha2UgaXMgcmV0dXJuZWQuIEZvcmNlRXJhAQC4BAAEVCBNb2RlIG9mIGVyYSBmb3JjaW5nLkBNYXhTdGFrZWRSZXdhcmRzAADhAQQADBkBIE1heGltdW0gc3Rha2VkIHJld2FyZHMsIGkuZS4gdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGVyYSBpbmZsYXRpb24gdGhhdGwgaXMgdXNlZCBmb3Igc3Rha2UgcmV3YXJkcy6sIFNlZSBbRXJhIHBheW91dF0oLi9pbmRleC5odG1sI2VyYS1wYXlvdXQpLkxTbGFzaFJld2FyZEZyYWN0aW9uAQCsEAAAAAAM+CBUaGUgcGVyY2VudGFnZSBvZiB0aGUgc2xhc2ggdGhhdCBpcyBkaXN0cmlidXRlZCB0byByZXBvcnRlcnMuAOQgVGhlIHJlc3Qgb2YgdGhlIHNsYXNoZWQgdmFsdWUgaXMgaGFuZGxlZCBieSB0aGUgYFNsYXNoYC5MQ2FuY2VsZWRTbGFzaFBheW91dAEAGEAAAAAAAAAAAAAAAAAAAAAACBUBIFRoZSBhbW91bnQgb2YgY3VycmVuY3kgZ2l2ZW4gdG8gcmVwb3J0ZXJzIG9mIGEgc2xhc2ggZXZlbnQgd2hpY2ggd2Fz7CBjYW5jZWxlZCBieSBleHRyYW9yZGluYXJ5IGNpcmN1bXN0YW5jZXMgKGUuZy4gZ292ZXJuYW5jZSkuQFVuYXBwbGllZFNsYXNoZXMBAQQFEB0JBAAExCBBbGwgdW5hcHBsaWVkIHNsYXNoZXMgdGhhdCBhcmUgcXVldWVkIGZvciBsYXRlci4oQm9uZGVkRXJhcwEAyQcEABAlASBBIG1hcHBpbmcgZnJvbSBzdGlsbC1ib25kZWQgZXJhcyB0byB0aGUgZmlyc3Qgc2Vzc2lvbiBpbmRleCBvZiB0aGF0IGVyYS4AyCBNdXN0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGZvciBlcmFzIGZvciB0aGUgcmFuZ2U6vCBgW2FjdGl2ZV9lcmEgLSBib3VuZGluZ19kdXJhdGlvbjsgYWN0aXZlX2VyYV1gTFZhbGlkYXRvclNsYXNoSW5FcmEAAQgFBfEIJQkEAAhFASBBbGwgc2xhc2hpbmcgZXZlbnRzIG9uIHZhbGlkYXRvcnMsIG1hcHBlZCBieSBlcmEgdG8gdGhlIGhpZ2hlc3Qgc2xhc2ggcHJvcG9ydGlvbnAgYW5kIHNsYXNoIHZhbHVlIG9mIHRoZSBlcmEuTE5vbWluYXRvclNsYXNoSW5FcmEAAQgFBfEIGAQABGEBIEFsbCBzbGFzaGluZyBldmVudHMgb24gbm9taW5hdG9ycywgbWFwcGVkIGJ5IGVyYSB0byB0aGUgaGlnaGVzdCBzbGFzaCB2YWx1ZSBvZiB0aGUgZXJhLjRTbGFzaGluZ1NwYW5zAAEEBQApCQQABIwgU2xhc2hpbmcgc3BhbnMgZm9yIHN0YXNoIGFjY291bnRzLiRTcGFuU2xhc2gBAQQFGQktCYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg9ASBSZWNvcmRzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtYXhpbXVtIHNsYXNoIG9mIGEgc3Rhc2ggd2l0aGluIGEgc2xhc2hpbmcgc3Bhbiy4IGFzIHdlbGwgYXMgaG93IG11Y2ggcmV3YXJkIGhhcyBiZWVuIHBhaWQgb3V0LlRDdXJyZW50UGxhbm5lZFNlc3Npb24BABAQAAAAAAzoIFRoZSBsYXN0IHBsYW5uZWQgc2Vzc2lvbiBzY2hlZHVsZWQgYnkgdGhlIHNlc3Npb24gcGFsbGV0LgBxASBUaGlzIGlzIGJhc2ljYWxseSBpbiBzeW5jIHdpdGggdGhlIGNhbGwgdG8gW2BwYWxsZXRfc2Vzc2lvbjo6U2Vzc2lvbk1hbmFnZXI6Om5ld19zZXNzaW9uYF0uSERpc2FibGVkVmFsaWRhdG9ycwEA5QEEABx1ASBJbmRpY2VzIG9mIHZhbGlkYXRvcnMgdGhhdCBoYXZlIG9mZmVuZGVkIGluIHRoZSBhY3RpdmUgZXJhLiBUaGUgb2ZmZW5kZXJzIGFyZSBkaXNhYmxlZCBmb3IgYWkBIHdob2xlIGVyYS4gRm9yIHRoaXMgcmVhc29uIHRoZXkgYXJlIGtlcHQgaGVyZSAtIG9ubHkgc3Rha2luZyBwYWxsZXQga25vd3MgYWJvdXQgZXJhcy4gVGhlVQEgaW1wbGVtZW50b3Igb2YgW2BEaXNhYmxpbmdTdHJhdGVneWBdIGRlZmluZXMgaWYgYSB2YWxpZGF0b3Igc2hvdWxkIGJlIGRpc2FibGVkIHdoaWNobQEgaW1wbGljaXRseSBtZWFucyB0aGF0IHRoZSBpbXBsZW1lbnRvciBhbHNvIGNvbnRyb2xzIHRoZSBtYXggbnVtYmVyIG9mIGRpc2FibGVkIHZhbGlkYXRvcnMuAG0BIFRoZSB2ZWMgaXMgYWx3YXlzIGtlcHQgc29ydGVkIHNvIHRoYXQgd2UgY2FuIGZpbmQgd2hldGhlciBhIGdpdmVuIHZhbGlkYXRvciBoYXMgcHJldmlvdXNseXggb2ZmZW5kZWQgdXNpbmcgYmluYXJ5IHNlYXJjaC44Q2hpbGxUaHJlc2hvbGQAAOEBBAAMUQEgVGhlIHRocmVzaG9sZCBmb3Igd2hlbiB1c2VycyBjYW4gc3RhcnQgY2FsbGluZyBgY2hpbGxfb3RoZXJgIGZvciBvdGhlciB2YWxpZGF0b3JzIC9ZASBub21pbmF0b3JzLiBUaGUgdGhyZXNob2xkIGlzIGNvbXBhcmVkIHRvIHRoZSBhY3R1YWwgbnVtYmVyIG9mIHZhbGlkYXRvcnMgLyBub21pbmF0b3JzKQEgKGBDb3VudEZvcipgKSBpbiB0aGUgc3lzdGVtIGNvbXBhcmVkIHRvIHRoZSBjb25maWd1cmVkIG1heCAoYE1heCpDb3VudGApLgHZAQGkGDBIaXN0b3J5RGVwdGgQEFQAAABQjCBOdW1iZXIgb2YgZXJhcyB0byBrZWVwIGluIGhpc3RvcnkuAOggRm9sbG93aW5nIGluZm9ybWF0aW9uIGlzIGtlcHQgZm9yIGVyYXMgaW4gYFtjdXJyZW50X2VyYSAtCQEgSGlzdG9yeURlcHRoLCBjdXJyZW50X2VyYV1gOiBgRXJhc1N0YWtlcnNgLCBgRXJhc1N0YWtlcnNDbGlwcGVkYCwFASBgRXJhc1ZhbGlkYXRvclByZWZzYCwgYEVyYXNWYWxpZGF0b3JSZXdhcmRgLCBgRXJhc1Jld2FyZFBvaW50c2AsRQEgYEVyYXNUb3RhbFN0YWtlYCwgYEVyYXNTdGFydFNlc3Npb25JbmRleGAsIGBDbGFpbWVkUmV3YXJkc2AsIGBFcmFzU3Rha2Vyc1BhZ2VkYCxcIGBFcmFzU3Rha2Vyc092ZXJ2aWV3YC4A5CBNdXN0IGJlIG1vcmUgdGhhbiB0aGUgbnVtYmVyIG9mIGVyYXMgZGVsYXllZCBieSBzZXNzaW9uLvggSS5lLiBhY3RpdmUgZXJhIG11c3QgYWx3YXlzIGJlIGluIGhpc3RvcnkuIEkuZS4gYGFjdGl2ZV9lcmEgPsQgY3VycmVudF9lcmEgLSBoaXN0b3J5X2RlcHRoYCBtdXN0IGJlIGd1YXJhbnRlZWQuABEBIElmIG1pZ3JhdGluZyBhbiBleGlzdGluZyBwYWxsZXQgZnJvbSBzdG9yYWdlIHZhbHVlIHRvIGNvbmZpZyB2YWx1ZSzsIHRoaXMgc2hvdWxkIGJlIHNldCB0byBzYW1lIHZhbHVlIG9yIGdyZWF0ZXIgYXMgaW4gc3RvcmFnZS4AFQEgTm90ZTogYEhpc3RvcnlEZXB0aGAgaXMgdXNlZCBhcyB0aGUgdXBwZXIgYm91bmQgZm9yIHRoZSBgQm91bmRlZFZlY2AtASBpdGVtIGBTdGFraW5nTGVkZ2VyLmxlZ2FjeV9jbGFpbWVkX3Jld2FyZHNgLiBTZXR0aW5nIHRoaXMgdmFsdWUgbG93ZXIgdGhhbtggdGhlIGV4aXN0aW5nIHZhbHVlIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcyBpbiB0aGUVASBgU3Rha2luZ0xlZGdlcmAgYW5kIHdpbGwgbmVlZCB0byBiZSBoYW5kbGVkIHByb3Blcmx5IGluIGEgbWlncmF0aW9uLvAgVGhlIHRlc3QgYHJlZHVjaW5nX2hpc3RvcnlfZGVwdGhfYWJydXB0YCBzaG93cyB0aGlzIGVmZmVjdC44U2Vzc2lvbnNQZXJFcmEQEAYAAAAEcCBOdW1iZXIgb2Ygc2Vzc2lvbnMgcGVyIGVyYS48Qm9uZGluZ0R1cmF0aW9uEBAcAAAABOQgTnVtYmVyIG9mIGVyYXMgdGhhdCBzdGFrZWQgZnVuZHMgbXVzdCByZW1haW4gYm9uZGVkIGZvci5IU2xhc2hEZWZlckR1cmF0aW9uEBAbAAAAEAEBIE51bWJlciBvZiBlcmFzIHRoYXQgc2xhc2hlcyBhcmUgZGVmZXJyZWQgYnksIGFmdGVyIGNvbXB1dGF0aW9uLgANASBUaGlzIHNob3VsZCBiZSBsZXNzIHRoYW4gdGhlIGJvbmRpbmcgZHVyYXRpb24uIFNldCB0byAwIGlmIHNsYXNoZXMVASBzaG91bGQgYmUgYXBwbGllZCBpbW1lZGlhdGVseSwgd2l0aG91dCBvcHBvcnR1bml0eSBmb3IgaW50ZXJ2ZW50aW9uLkxNYXhFeHBvc3VyZVBhZ2VTaXplEBAAAgAALLAgVGhlIG1heGltdW0gc2l6ZSBvZiBlYWNoIGBUOjpFeHBvc3VyZVBhZ2VgLgApASBBbiBgRXhwb3N1cmVQYWdlYCBpcyB3ZWFrbHkgYm91bmRlZCB0byBhIG1heGltdW0gb2YgYE1heEV4cG9zdXJlUGFnZVNpemVgMCBub21pbmF0b3JzLgAhASBGb3Igb2xkZXIgbm9uLXBhZ2VkIGV4cG9zdXJlLCBhIHJld2FyZCBwYXlvdXQgd2FzIHJlc3RyaWN0ZWQgdG8gdGhlIHRvcCEBIGBNYXhFeHBvc3VyZVBhZ2VTaXplYCBub21pbmF0b3JzLiBUaGlzIGlzIHRvIGxpbWl0IHRoZSBpL28gY29zdCBmb3IgdGhlSCBub21pbmF0b3IgcGF5b3V0LgBZASBOb3RlOiBgTWF4RXhwb3N1cmVQYWdlU2l6ZWAgaXMgdXNlZCB0byBib3VuZCBgQ2xhaW1lZFJld2FyZHNgIGFuZCBpcyB1bnNhZmUgdG8gcmVkdWNlkCB3aXRob3V0IGhhbmRsaW5nIGl0IGluIGEgbWlncmF0aW9uLkhNYXhVbmxvY2tpbmdDaHVua3MQECAAAAAoBQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIGB1bmxvY2tpbmdgIGNodW5rcyBhIFtgU3Rha2luZ0xlZGdlcmBdIGNhbgkBIGhhdmUuIEVmZmVjdGl2ZWx5IGRldGVybWluZXMgaG93IG1hbnkgdW5pcXVlIGVyYXMgYSBzdGFrZXIgbWF5IGJlOCB1bmJvbmRpbmcgaW4uAPggTm90ZTogYE1heFVubG9ja2luZ0NodW5rc2AgaXMgdXNlZCBhcyB0aGUgdXBwZXIgYm91bmQgZm9yIHRoZQEBIGBCb3VuZGVkVmVjYCBpdGVtIGBTdGFraW5nTGVkZ2VyLnVubG9ja2luZ2AuIFNldHRpbmcgdGhpcyB2YWx1ZQUBIGxvd2VyIHRoYW4gdGhlIGV4aXN0aW5nIHZhbHVlIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcyBpbiB0aGUJASBgU3Rha2luZ0xlZGdlcmAgYW5kIHdpbGwgbmVlZCB0byBiZSBoYW5kbGVkIHByb3Blcmx5IGluIGEgcnVudGltZQUBIG1pZ3JhdGlvbi4gVGhlIHRlc3QgYHJlZHVjaW5nX21heF91bmxvY2tpbmdfY2h1bmtzX2FicnVwdGAgc2hvd3M0IHRoaXMgZWZmZWN0LgExCQcAIE9mZmVuY2VzASBPZmZlbmNlcwgcUmVwb3J0cwABBAU0NQkEAARJASBUaGUgcHJpbWFyeSBzdHJ1Y3R1cmUgdGhhdCBob2xkcyBhbGwgb2ZmZW5jZSByZWNvcmRzIGtleWVkIGJ5IHJlcG9ydCBpZGVudGlmaWVycy5YQ29uY3VycmVudFJlcG9ydHNJbmRleAEBCAUFPQmVAQQABCkBIEEgdmVjdG9yIG9mIHJlcG9ydHMgb2YgdGhlIHNhbWUga2luZCB0aGF0IGhhcHBlbmVkIGF0IHRoZSBzYW1lIHRpbWUgc2xvdC4AAbwAAAgAKEhpc3RvcmljYWwBKEhpc3RvcmljYWwISEhpc3RvcmljYWxTZXNzaW9ucwABBAUQNQgEAARdASBNYXBwaW5nIGZyb20gaGlzdG9yaWNhbCBzZXNzaW9uIGluZGljZXMgdG8gc2Vzc2lvbi1kYXRhIHJvb3QgaGFzaCBhbmQgdmFsaWRhdG9yIGNvdW50LixTdG9yZWRSYW5nZQAAgAQABOQgVGhlIHJhbmdlIG9mIGhpc3RvcmljYWwgc2Vzc2lvbnMgd2Ugc3RvcmUuIFtmaXJzdCwgbGFzdCkAAAAAIQAcU2Vzc2lvbgEcU2Vzc2lvbhwoVmFsaWRhdG9ycwEA0QEEAAR8IFRoZSBjdXJyZW50IHNldCBvZiB2YWxpZGF0b3JzLjBDdXJyZW50SW5kZXgBABAQAAAAAAR4IEN1cnJlbnQgaW5kZXggb2YgdGhlIHNlc3Npb24uNFF1ZXVlZENoYW5nZWQBACAEAAg5ASBUcnVlIGlmIHRoZSB1bmRlcmx5aW5nIGVjb25vbWljIGlkZW50aXRpZXMgb3Igd2VpZ2h0aW5nIGJlaGluZCB0aGUgdmFsaWRhdG9yc6QgaGFzIGNoYW5nZWQgaW4gdGhlIHF1ZXVlZCB2YWxpZGF0b3Igc2V0LihRdWV1ZWRLZXlzAQBBCQQACD0BIFRoZSBxdWV1ZWQga2V5cyBmb3IgdGhlIG5leHQgc2Vzc2lvbi4gV2hlbiB0aGUgbmV4dCBzZXNzaW9uIGJlZ2lucywgdGhlc2Uga2V5c+Agd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgdmFsaWRhdG9yJ3Mgc2Vzc2lvbiBrZXlzLkhEaXNhYmxlZFZhbGlkYXRvcnMBAOUBBAAUgCBJbmRpY2VzIG9mIGRpc2FibGVkIHZhbGlkYXRvcnMuAD0BIFRoZSB2ZWMgaXMgYWx3YXlzIGtlcHQgc29ydGVkIHNvIHRoYXQgd2UgY2FuIGZpbmQgd2hldGhlciBhIGdpdmVuIHZhbGlkYXRvciBpcz0BIGRpc2FibGVkIHVzaW5nIGJpbmFyeSBzZWFyY2guIEl0IGdldHMgY2xlYXJlZCB3aGVuIGBvbl9zZXNzaW9uX2VuZGluZ2AgcmV0dXJuc2QgYSBuZXcgc2V0IG9mIGlkZW50aXRpZXMuIE5leHRLZXlzAAEEBQAZAgQABJwgVGhlIG5leHQgc2Vzc2lvbiBrZXlzIGZvciBhIHZhbGlkYXRvci4gS2V5T3duZXIAAQQFSQkABAAECQEgVGhlIG93bmVyIG9mIGEga2V5LiBUaGUga2V5IGlzIHRoZSBgS2V5VHlwZUlkYCArIHRoZSBlbmNvZGVkIGtleS4BFQIBxAABUQkJABxHcmFuZHBhARxHcmFuZHBhHBRTdGF0ZQEAVQkEAASQIFN0YXRlIG9mIHRoZSBjdXJyZW50IGF1dGhvcml0eSBzZXQuNFBlbmRpbmdDaGFuZ2UAAFkJBAAExCBQZW5kaW5nIGNoYW5nZTogKHNpZ25hbGVkIGF0LCBzY2hlZHVsZWQgY2hhbmdlKS4oTmV4dEZvcmNlZAAAEAQABLwgbmV4dCBibG9jayBudW1iZXIgd2hlcmUgd2UgY2FuIGZvcmNlIGEgY2hhbmdlLhxTdGFsbGVkAACABAAEkCBgdHJ1ZWAgaWYgd2UgYXJlIGN1cnJlbnRseSBzdGFsbGVkLjBDdXJyZW50U2V0SWQBADAgAAAAAAAAAAAIXQEgVGhlIG51bWJlciBvZiBjaGFuZ2VzIChib3RoIGluIHRlcm1zIG9mIGtleXMgYW5kIHVuZGVybHlpbmcgZWNvbm9taWMgcmVzcG9uc2liaWxpdGllcynEIGluIHRoZSAic2V0IiBvZiBHcmFuZHBhIHZhbGlkYXRvcnMgZnJvbSBnZW5lc2lzLjBTZXRJZFNlc3Npb24AAQQFMBAEAChZASBBIG1hcHBpbmcgZnJvbSBncmFuZHBhIHNldCBJRCB0byB0aGUgaW5kZXggb2YgdGhlICptb3N0IHJlY2VudCogc2Vzc2lvbiBmb3Igd2hpY2ggaXRzaCBtZW1iZXJzIHdlcmUgcmVzcG9uc2libGUuAEUBIFRoaXMgaXMgb25seSB1c2VkIGZvciB2YWxpZGF0aW5nIGVxdWl2b2NhdGlvbiBwcm9vZnMuIEFuIGVxdWl2b2NhdGlvbiBwcm9vZiBtdXN0TQEgY29udGFpbnMgYSBrZXktb3duZXJzaGlwIHByb29mIGZvciBhIGdpdmVuIHNlc3Npb24sIHRoZXJlZm9yZSB3ZSBuZWVkIGEgd2F5IHRvIHRpZUUBIHRvZ2V0aGVyIHNlc3Npb25zIGFuZCBHUkFORFBBIHNldCBpZHMsIGkuZS4gd2UgbmVlZCB0byB2YWxpZGF0ZSB0aGF0IGEgdmFsaWRhdG9yQQEgd2FzIHRoZSBvd25lciBvZiBhIGdpdmVuIGtleSBvbiBhIGdpdmVuIHNlc3Npb24sIGFuZCB3aGF0IHRoZSBhY3RpdmUgc2V0IElEIHdhc1QgZHVyaW5nIHRoYXQgc2Vzc2lvbi4AuCBUV09YLU5PVEU6IGBTZXRJZGAgaXMgbm90IHVuZGVyIHVzZXIgY29udHJvbC4sQXV0aG9yaXRpZXMBAF0JBAAEhCBUaGUgY3VycmVudCBsaXN0IG9mIGF1dGhvcml0aWVzLgExAgHIDDhNYXhBdXRob3JpdGllcxAQoIYBAARcIE1heCBBdXRob3JpdGllcyBpbiB1c2U0TWF4Tm9taW5hdG9ycxAQAAIAAATUIFRoZSBtYXhpbXVtIG51bWJlciBvZiBub21pbmF0b3JzIGZvciBlYWNoIHZhbGlkYXRvci5YTWF4U2V0SWRTZXNzaW9uRW50cmllczAgqAAAAAAAAAAYOQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIGVudHJpZXMgdG8ga2VlcCBpbiB0aGUgc2V0IGlkIHRvIHNlc3Npb24gaW5kZXggbWFwcGluZy4AMQEgU2luY2UgdGhlIGBTZXRJZFNlc3Npb25gIG1hcCBpcyBvbmx5IHVzZWQgZm9yIHZhbGlkYXRpbmcgZXF1aXZvY2F0aW9ucyB0aGlzKQEgdmFsdWUgc2hvdWxkIHJlbGF0ZSB0byB0aGUgYm9uZGluZyBkdXJhdGlvbiBvZiB3aGF0ZXZlciBzdGFraW5nIHN5c3RlbSBpczUBIGJlaW5nIHVzZWQgKGlmIGFueSkuIElmIGVxdWl2b2NhdGlvbiBoYW5kbGluZyBpcyBub3QgZW5hYmxlZCB0aGVuIHRoaXMgdmFsdWU0IGNhbiBiZSB6ZXJvLgFhCQsASEF1dGhvcml0eURpc2NvdmVyeQFIQXV0aG9yaXR5RGlzY292ZXJ5CBBLZXlzAQBlCQQABIwgS2V5cyBvZiB0aGUgY3VycmVudCBhdXRob3JpdHkgc2V0LiBOZXh0S2V5cwEAZQkEAASAIEtleXMgb2YgdGhlIG5leHQgYXV0aG9yaXR5IHNldC4AAAAADQAgVHJlYXN1cnkBIFRyZWFzdXJ5GDRQcm9wb3NhbENvdW50AQAQEAAAAAAEpCBOdW1iZXIgb2YgcHJvcG9zYWxzIHRoYXQgaGF2ZSBiZWVuIG1hZGUuJFByb3Bvc2FscwABBAUQbQkEAAR8IFByb3Bvc2FscyB0aGF0IGhhdmUgYmVlbiBtYWRlLixEZWFjdGl2YXRlZAEAGEAAAAAAAAAAAAAAAAAAAAAABPAgVGhlIGFtb3VudCB3aGljaCBoYXMgYmVlbiByZXBvcnRlZCBhcyBpbmFjdGl2ZSB0byBDdXJyZW5jeS4kQXBwcm92YWxzAQBxCQQABPggUHJvcG9zYWwgaW5kaWNlcyB0aGF0IGhhdmUgYmVlbiBhcHByb3ZlZCBidXQgbm90IHlldCBhd2FyZGVkLihTcGVuZENvdW50AQAQEAAAAAAEpCBUaGUgY291bnQgb2Ygc3BlbmRzIHRoYXQgaGF2ZSBiZWVuIG1hZGUuGFNwZW5kcwABBAUQdQkEAATQIFNwZW5kcyB0aGF0IGhhdmUgYmVlbiBhcHByb3ZlZCBhbmQgYmVpbmcgcHJvY2Vzc2VkLgFdAgHYFCxTcGVuZFBlcmlvZBAQAEYFAASIIFBlcmlvZCBiZXR3ZWVuIHN1Y2Nlc3NpdmUgc3BlbmRzLhBCdXJufQkQECcAAAQRASBQZXJjZW50YWdlIG9mIHNwYXJlIGZ1bmRzIChpZiBhbnkpIHRoYXQgYXJlIGJ1cm50IHBlciBzcGVuZCBwZXJpb2QuIFBhbGxldElkgQkgcHkvdHJzcnkEGQEgVGhlIHRyZWFzdXJ5J3MgcGFsbGV0IGlkLCB1c2VkIGZvciBkZXJpdmluZyBpdHMgc292ZXJlaWduIGFjY291bnQgSUQuME1heEFwcHJvdmFscxAQZAAAAAwVASBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXBwcm92YWxzIHRoYXQgY2FuIHdhaXQgaW4gdGhlIHNwZW5kaW5nIHF1ZXVlLgBNASBOT1RFOiBUaGlzIHBhcmFtZXRlciBpcyBhbHNvIHVzZWQgd2l0aGluIHRoZSBCb3VudGllcyBQYWxsZXQgZXh0ZW5zaW9uIGlmIGVuYWJsZWQuMFBheW91dFBlcmlvZBAQgJcGAAQZASBUaGUgcGVyaW9kIGR1cmluZyB3aGljaCBhbiBhcHByb3ZlZCB0cmVhc3VyeSBzcGVuZCBoYXMgdG8gYmUgY2xhaW1lZC4BhQkTAEBDb252aWN0aW9uVm90aW5nAUBDb252aWN0aW9uVm90aW5nCCRWb3RpbmdGb3IBAQgFBYkJjQnYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHUBIEFsbCB2b3RpbmcgZm9yIGEgcGFydGljdWxhciB2b3RlciBpbiBhIHBhcnRpY3VsYXIgdm90aW5nIGNsYXNzLiBXZSBzdG9yZSB0aGUgYmFsYW5jZSBmb3IgdGhlnCBudW1iZXIgb2Ygdm90ZXMgdGhhdCB3ZSBoYXZlIHJlY29yZGVkLjRDbGFzc0xvY2tzRm9yAQEEBQCtCQQADGkBIFRoZSB2b3RpbmcgY2xhc3NlcyB3aGljaCBoYXZlIGEgbm9uLXplcm8gbG9jayByZXF1aXJlbWVudCBhbmQgdGhlIGxvY2sgYW1vdW50cyB3aGljaCB0aGV5bQEgcmVxdWlyZS4gVGhlIGFjdHVhbCBhbW91bnQgbG9ja2VkIG9uIGJlaGFsZiBvZiB0aGlzIHBhbGxldCBzaG91bGQgYWx3YXlzIGJlIHRoZSBtYXhpbXVtIG9mLCB0aGlzIGxpc3QuAWUCAWUBCCBNYXhWb3RlcxAQAAIAABDwIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb25jdXJyZW50IHZvdGVzIGFuIGFjY291bnQgbWF5IGhhdmUuAFUBIEFsc28gdXNlZCB0byBjb21wdXRlIHdlaWdodCwgYW4gb3Zlcmx5IGxhcmdlIHZhbHVlIGNhbiBsZWFkIHRvIGV4dHJpbnNpY3Mgd2l0aCBsYXJnZcAgd2VpZ2h0IGVzdGltYXRpb246IHNlZSBgZGVsZWdhdGVgIGZvciBpbnN0YW5jZS5EVm90ZUxvY2tpbmdQZXJpb2QQEMCJAQAQkCBUaGUgbWluaW11bSBwZXJpb2Qgb2Ygdm90ZSBsb2NraW5nLgBlASBJdCBzaG91bGQgYmUgbm8gc2hvcnRlciB0aGFuIGVuYWN0bWVudCBwZXJpb2QgdG8gZW5zdXJlIHRoYXQgaW4gdGhlIGNhc2Ugb2YgYW4gYXBwcm92YWwsSQEgdGhvc2Ugc3VjY2Vzc2Z1bCB2b3RlcnMgYXJlIGxvY2tlZCBpbnRvIHRoZSBjb25zZXF1ZW5jZXMgdGhhdCB0aGVpciB2b3RlcyBlbnRhaWwuAbkJFAAkUmVmZXJlbmRhASRSZWZlcmVuZGEUPFJlZmVyZW5kdW1Db3VudAEAEBAAAAAABDEBIFRoZSBuZXh0IGZyZWUgcmVmZXJlbmR1bSBpbmRleCwgYWthIHRoZSBudW1iZXIgb2YgcmVmZXJlbmRhIHN0YXJ0ZWQgc28gZmFyLkRSZWZlcmVuZHVtSW5mb0ZvcgABBAIQvQkEAAS0IEluZm9ybWF0aW9uIGNvbmNlcm5pbmcgYW55IGdpdmVuIHJlZmVyZW5kdW0uKFRyYWNrUXVldWUBAQQFbQHdCQQAEF0BIFRoZSBzb3J0ZWQgbGlzdCBvZiByZWZlcmVuZGEgcmVhZHkgdG8gYmUgZGVjaWRlZCBidXQgbm90IHlldCBiZWluZyBkZWNpZGVkLCBvcmRlcmVkIGJ5fCBjb252aWN0aW9uLXdlaWdodGVkIGFwcHJvdmFscy4AQQEgVGhpcyBzaG91bGQgYmUgZW1wdHkgaWYgYERlY2lkaW5nQ291bnRgIGlzIGxlc3MgdGhhbiBgVHJhY2tJbmZvOjptYXhfZGVjaWRpbmdgLjREZWNpZGluZ0NvdW50AQEEBW0BEBAAAAAABMQgVGhlIG51bWJlciBvZiByZWZlcmVuZGEgYmVpbmcgZGVjaWRlZCBjdXJyZW50bHkuKE1ldGFkYXRhT2YAAQQCEDQEABgFASBUaGUgbWV0YWRhdGEgaXMgYSBnZW5lcmFsIGluZm9ybWF0aW9uIGNvbmNlcm5pbmcgdGhlIHJlZmVyZW5kdW0uSQEgVGhlIGBIYXNoYCByZWZlcnMgdG8gdGhlIHByZWltYWdlIG9mIHRoZSBgUHJlaW1hZ2VzYCBwcm92aWRlciB3aGljaCBjYW4gYmUgYSBKU09OiCBkdW1wIG9yIElQRlMgaGFzaCBvZiBhIEpTT04gZmlsZS4AdQEgQ29uc2lkZXIgYSBnYXJiYWdlIGNvbGxlY3Rpb24gZm9yIGEgbWV0YWRhdGEgb2YgZmluaXNoZWQgcmVmZXJlbmR1bXMgdG8gYHVucmVxdWVzdGAgKHJlbW92ZSlEIGxhcmdlIHByZWltYWdlcy4BeQIBaQEURFN1Ym1pc3Npb25EZXBvc2l0GEAA5AtUAgAAAAAAAAAAAAAABDUBIFRoZSBtaW5pbXVtIGFtb3VudCB0byBiZSB1c2VkIGFzIGEgZGVwb3NpdCBmb3IgYSBwdWJsaWMgcmVmZXJlbmR1bSBwcm9wb3NhbC4kTWF4UXVldWVkEBBkAAAABOQgTWF4aW11bSBzaXplIG9mIHRoZSByZWZlcmVuZHVtIHF1ZXVlIGZvciBhIHNpbmdsZSB0cmFjay5EVW5kZWNpZGluZ1RpbWVvdXQQEIATAwAIVQEgVGhlIG51bWJlciBvZiBibG9ja3MgYWZ0ZXIgc3VibWlzc2lvbiB0aGF0IGEgcmVmZXJlbmR1bSBtdXN0IGJlZ2luIGJlaW5nIGRlY2lkZWQgYnku5CBPbmNlIHRoaXMgcGFzc2VzLCB0aGVuIGFueW9uZSBtYXkgY2FuY2VsIHRoZSByZWZlcmVuZHVtLjRBbGFybUludGVydmFsEBABAAAADF0BIFF1YW50aXphdGlvbiBsZXZlbCBmb3IgdGhlIHJlZmVyZW5kdW0gd2FrZXVwIHNjaGVkdWxlci4gQSBoaWdoZXIgbnVtYmVyIHdpbGwgcmVzdWx0IGluXQEgZmV3ZXIgc3RvcmFnZSByZWFkcy93cml0ZXMgbmVlZGVkIGZvciBzbWFsbGVyIHZvdGVycywgYnV0IGFsc28gcmVzdWx0IGluIGRlbGF5cyB0byB0aGVVASBhdXRvbWF0aWMgcmVmZXJlbmR1bSBzdGF0dXMgY2hhbmdlcy4gRXhwbGljaXQgc2VydmljaW5nIGluc3RydWN0aW9ucyBhcmUgdW5hZmZlY3RlZC4YVHJhY2tz6QkZF0AAABByb290AQAAAACAxqR+jQMAAAAAAAAAAACwBAAAACcGAEA4AABAOAAAApDXPg0AAAAAV0PeEwAAAABUQ94TAAAAAAAAypo7AAAAAABlzR0BAEh3aGl0ZWxpc3RlZF9jYWxsZXJkAAAAAEB6EPNaAAAAAAAAAAAAACwBAAAAJwYAZAAAAGQAAAAC7JclEAAAAAB7VzwXAAAAAEI5LxIAAAAAAg4AhAAAAAAA1uYfAQAAAAA5YnkCAAAAAAIAPHdpc2hfZm9yX2NoYW5nZQoAAAAAgPQg5rUAAAAAAAAAAAAAsAQAAAAnBgBAOAAAZAAAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAAAAMqaOwAAAAAAZc0dCgA0c3Rha2luZ19hZG1pbgoAAAAAID2IeS0AAAAAAAAAAAAAsAQAAAAnBgAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////CwAkdHJlYXN1cmVyCgAAAACgck4YCQAAAAAAAAAAAACwBAAAACcGAMCJAQBAOAAAApDXPg0AAAAAV0PeEwAAAABUQ94TAAAAAAAAypo7AAAAAABlzR0MACxsZWFzZV9hZG1pbgoAAAAAID2IeS0AAAAAAAAAAAAAsAQAAAAnBgAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////DQBAZmVsbG93c2hpcF9hZG1pbgoAAAAAID2IeS0AAAAAAAAAAAAAsAQAAAAnBgAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////DgA0Z2VuZXJhbF9hZG1pbgoAAAAAID2IeS0AAAAAAAAAAAAAsAQAAAAnBgAIBwAAZAAAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAACWaL0AgAAAACjKWsFAAAAAC5rSv3/////DwA0YXVjdGlvbl9hZG1pbgoAAAAAID2IeS0AAAAAAAAAAAAAsAQAAAAnBgAIBwAAZAAAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAACWaL0AgAAAACjKWsFAAAAAC5rSv3/////FABQcmVmZXJlbmR1bV9jYW5jZWxsZXLoAwAAAEB6EPNaAAAAAAAAAAAAALAEAADAiQEACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////xUARHJlZmVyZW5kdW1fa2lsbGVy6AMAAABAY1K/xgEAAAAAAAAAAACwBAAAACcGAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////8eADBzbWFsbF90aXBwZXLIAAAAAOQLVAIAAAAAAAAAAAAAAAoAAADAiQEAZAAAAAoAAAAASZFJFQBlzR0Aypo7Avm6GAAAAAAAKk0xAAAAAABrWef//////x8AKGJpZ190aXBwZXJkAAAAAOh2SBcAAAAAAAAAAAAAAGQAAADAiQEAWAIAAGQAAAAASZFJFQBlzR0Aypo7AmlPPwAAAAAANZZ9AAAAAADlNMH//////yAANHNtYWxsX3NwZW5kZXIyAAAAABCl1OgAAAAAAAAAAAAAAGAJAAAAJwYAgHAAAEA4AAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////yEAOG1lZGl1bV9zcGVuZGVyMgAAAAAgSqnRAQAAAAAAAAAAAABgCQAAACcGAADhAABAOAAAAFsB9jAAZc0dAMqaOwIRYdsAAAAAAL/RqgEAAAAAIJcq//////8iACxiaWdfc3BlbmRlcjIAAAAAQJRSowMAAAAAAAAAAAAAYAkAAAAnBgDAiQEAQDgAAAAAypo7AGXNHQDKmjsCQTywAQAAAAB1XTQDAAAAAEXRZf7/////BOAgSW5mb3JtYXRpb24gY29uY2VybmluZyB0aGUgZGlmZmVyZW50IHJlZmVyZW5kdW0gdHJhY2tzLgEBChUAHE9yaWdpbnMAAAAAABYAJFdoaXRlbGlzdAEkV2hpdGVsaXN0BDxXaGl0ZWxpc3RlZENhbGwAAQQFNIwEAAABoQIBBQcAAQUKFwAoUGFyYW1ldGVycwEoUGFyYW1ldGVycwQoUGFyYW1ldGVycwABBAIdBykHBAAETCBTdG9yZWQgcGFyYW1ldGVycy4BpQIBGQcAABsAGENsYWltcwEYQ2xhaW1zFBhDbGFpbXMAAQQG3QIYBAAAFFRvdGFsAQAYQAAAAAAAAAAAAAAAAAAAAAAAHFZlc3RpbmcAAQQG3QLlAgQAEHggVmVzdGluZyBzY2hlZHVsZSBmb3IgYSBjbGFpbS4NASBGaXJzdCBiYWxhbmNlIGlzIHRoZSB0b3RhbCBhbW91bnQgdGhhdCBzaG91bGQgYmUgaGVsZCBmb3IgdmVzdGluZy7kIFNlY29uZCBiYWxhbmNlIGlzIGhvdyBtdWNoIHNob3VsZCBiZSB1bmxvY2tlZCBwZXIgYmxvY2suzCBUaGUgYmxvY2sgbnVtYmVyIGlzIHdoZW4gdGhlIHZlc3Rpbmcgc2hvdWxkIHN0YXJ0LhxTaWduaW5nAAEEBt0C7QIEAATAIFRoZSBzdGF0ZW1lbnQga2luZCB0aGF0IG11c3QgYmUgc2lnbmVkLCBpZiBhbnkuJFByZWNsYWltcwABBAYA3QIEAAQtASBQcmUtY2xhaW1lZCBFdGhlcmV1bSBhY2NvdW50cywgYnkgdGhlIEFjY291bnQgSUQgdGhhdCB0aGV5IGFyZSBjbGFpbWVkIHRvLgHRAgExBwQYUHJlZml4OIiEUGF5IERPVHMgdG8gdGhlIFBvbGthZG90IGFjY291bnQ6AAEJChgAHFZlc3RpbmcBHFZlc3RpbmcIHFZlc3RpbmcAAQQCAA0KBAAE2CBJbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIHZlc3Rpbmcgb2YgYSBnaXZlbiBhY2NvdW50LjhTdG9yYWdlVmVyc2lvbgEAFQoEAAx8IFN0b3JhZ2UgdmVyc2lvbiBvZiB0aGUgcGFsbGV0LgAxASBOZXcgbmV0d29ya3Mgc3RhcnQgd2l0aCBsYXRlc3QgdmVyc2lvbiwgYXMgZGV0ZXJtaW5lZCBieSB0aGUgZ2VuZXNpcyBidWlsZC4B8QIBNQcIRE1pblZlc3RlZFRyYW5zZmVyGEAA5AtUAgAAAAAAAAAAAAAABOggVGhlIG1pbmltdW0gYW1vdW50IHRyYW5zZmVycmVkIHRvIGNhbGwgYHZlc3RlZF90cmFuc2ZlcmAuTE1heFZlc3RpbmdTY2hlZHVsZXMQEBwAAAAAARkKGQAcVXRpbGl0eQAB+QIBOQcETGJhdGNoZWRfY2FsbHNfbGltaXQQEKoqAAAEqCBUaGUgbGltaXQgb24gdGhlIG51bWJlciBvZiBiYXRjaGVkIGNhbGxzLgEdChoAFFByb3h5ARRQcm94eQgcUHJveGllcwEBBAUAIQpEAAAAAAAAAAAAAAAAAAAAAAAIRQEgVGhlIHNldCBvZiBhY2NvdW50IHByb3hpZXMuIE1hcHMgdGhlIGFjY291bnQgd2hpY2ggaGFzIGRlbGVnYXRlZCB0byB0aGUgYWNjb3VudHMhASB3aGljaCBhcmUgYmVpbmcgZGVsZWdhdGVkIHRvLCB0b2dldGhlciB3aXRoIHRoZSBhbW91bnQgaGVsZCBvbiBkZXBvc2l0LjRBbm5vdW5jZW1lbnRzAQEEBQAxCkQAAAAAAAAAAAAAAAAAAAAAAASsIFRoZSBhbm5vdW5jZW1lbnRzIG1hZGUgYnkgdGhlIHByb3h5IChrZXkpLgEBAwE9BxhAUHJveHlEZXBvc2l0QmFzZRhAAISylS4AAAAAAAAAAAAAABARASBUaGUgYmFzZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHRvIHJlc2VydmUgZm9yIGNyZWF0aW5nIGEgcHJveHkuAAEBIFRoaXMgaXMgaGVsZCBmb3IgYW4gYWRkaXRpb25hbCBzdG9yYWdlIGl0ZW0gd2hvc2UgdmFsdWUgc2l6ZSBpcyUBIGBzaXplb2YoQmFsYW5jZSlgIGJ5dGVzIGFuZCB3aG9zZSBrZXkgc2l6ZSBpcyBgc2l6ZW9mKEFjY291bnRJZClgIGJ5dGVzLkhQcm94eURlcG9zaXRGYWN0b3IYQIBmqxMAAAAAAAAAAAAAAAAUvCBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgcHJveHkgYWRkZWQuADUBIFRoaXMgaXMgaGVsZCBmb3IgYWRkaW5nIDMyIGJ5dGVzIHBsdXMgYW4gaW5zdGFuY2Ugb2YgYFByb3h5VHlwZWAgbW9yZSBpbnRvIGFhASBwcmUtZXhpc3Rpbmcgc3RvcmFnZSB2YWx1ZS4gVGh1cywgd2hlbiBjb25maWd1cmluZyBgUHJveHlEZXBvc2l0RmFjdG9yYCBvbmUgc2hvdWxkIHRha2X0IGludG8gYWNjb3VudCBgMzIgKyBwcm94eV90eXBlLmVuY29kZSgpLmxlbigpYCBieXRlcyBvZiBkYXRhLihNYXhQcm94aWVzEBAgAAAABPAgVGhlIG1heGltdW0gYW1vdW50IG9mIHByb3hpZXMgYWxsb3dlZCBmb3IgYSBzaW5nbGUgYWNjb3VudC4oTWF4UGVuZGluZxAQIAAAAARFASBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZS1kZWxheWVkIGFubm91bmNlbWVudHMgdGhhdCBhcmUgYWxsb3dlZCB0byBiZSBwZW5kaW5nLlxBbm5vdW5jZW1lbnREZXBvc2l0QmFzZRhAAISylS4AAAAAAAAAAAAAABAxASBUaGUgYmFzZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHRvIHJlc2VydmUgZm9yIGNyZWF0aW5nIGFuIGFubm91bmNlbWVudC4ASQEgVGhpcyBpcyBoZWxkIHdoZW4gYSBuZXcgc3RvcmFnZSBpdGVtIGhvbGRpbmcgYSBgQmFsYW5jZWAgaXMgY3JlYXRlZCAodHlwaWNhbGx5IDE2ICBieXRlcykuZEFubm91bmNlbWVudERlcG9zaXRGYWN0b3IYQADNVicAAAAAAAAAAAAAAAAQ1CBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgYW5ub3VuY2VtZW50IG1hZGUuAFkBIFRoaXMgaXMgaGVsZCBmb3IgYWRkaW5nIGFuIGBBY2NvdW50SWRgLCBgSGFzaGAgYW5kIGBCbG9ja051bWJlcmAgKHR5cGljYWxseSA2OCBieXRlcymMIGludG8gYSBwcmUtZXhpc3Rpbmcgc3RvcmFnZSB2YWx1ZS4BQQodACBNdWx0aXNpZwEgTXVsdGlzaWcEJE11bHRpc2lncwABCAUCRQpJCgQABJQgVGhlIHNldCBvZiBvcGVuIG11bHRpc2lnIG9wZXJhdGlvbnMuAQ0DAUEHDCxEZXBvc2l0QmFzZRhAAIxhxS4AAAAAAAAAAAAAABhZASBUaGUgYmFzZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHRvIHJlc2VydmUgZm9yIGNyZWF0aW5nIGEgbXVsdGlzaWcgZXhlY3V0aW9uIG9yIHRvhCBzdG9yZSBhIGRpc3BhdGNoIGNhbGwgZm9yIGxhdGVyLgABASBUaGlzIGlzIGhlbGQgZm9yIGFuIGFkZGl0aW9uYWwgc3RvcmFnZSBpdGVtIHdob3NlIHZhbHVlIHNpemUgaXMxASBgNCArIHNpemVvZigoQmxvY2tOdW1iZXIsIEJhbGFuY2UsIEFjY291bnRJZCkpYCBieXRlcyBhbmQgd2hvc2Uga2V5IHNpemUgaXOAIGAzMiArIHNpemVvZihBY2NvdW50SWQpYCBieXRlcy40RGVwb3NpdEZhY3RvchhAANASEwAAAAAAAAAAAAAAAAxVASBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgdW5pdCB0aHJlc2hvbGQgd2hlbiBjcmVhdGluZyBhIG11bHRpc2lnIGV4ZWN1dGlvbi4AJQEgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgMzIgYnl0ZXMgbW9yZSBpbnRvIGEgcHJlLWV4aXN0aW5nIHN0b3JhZ2UgdmFsdWUuOE1heFNpZ25hdG9yaWVzEBBkAAAABOwgVGhlIG1heGltdW0gYW1vdW50IG9mIHNpZ25hdG9yaWVzIGFsbG93ZWQgaW4gdGhlIG11bHRpc2lnLgFRCh4AIEJvdW50aWVzASBCb3VudGllcxAsQm91bnR5Q291bnQBABAQAAAAAATAIE51bWJlciBvZiBib3VudHkgcHJvcG9zYWxzIHRoYXQgaGF2ZSBiZWVuIG1hZGUuIEJvdW50aWVzAAEEBRBVCgQABHggQm91bnRpZXMgdGhhdCBoYXZlIGJlZW4gbWFkZS5IQm91bnR5RGVzY3JpcHRpb25zAAEEBRBdCgQABIAgVGhlIGRlc2NyaXB0aW9uIG9mIGVhY2ggYm91bnR5LjxCb3VudHlBcHByb3ZhbHMBAHEJBAAE7CBCb3VudHkgaW5kaWNlcyB0aGF0IGhhdmUgYmVlbiBhcHByb3ZlZCBidXQgbm90IHlldCBmdW5kZWQuARkDAUUHJERCb3VudHlEZXBvc2l0QmFzZRhAAOQLVAIAAAAAAAAAAAAAAAToIFRoZSBhbW91bnQgaGVsZCBvbiBkZXBvc2l0IGZvciBwbGFjaW5nIGEgYm91bnR5IHByb3Bvc2FsLmBCb3VudHlEZXBvc2l0UGF5b3V0RGVsYXkQEAAAAAAEWQEgVGhlIGRlbGF5IHBlcmlvZCBmb3Igd2hpY2ggYSBib3VudHkgYmVuZWZpY2lhcnkgbmVlZCB0byB3YWl0IGJlZm9yZSBjbGFpbSB0aGUgcGF5b3V0LkhCb3VudHlVcGRhdGVQZXJpb2QQEIDGEwAEbCBCb3VudHkgZHVyYXRpb24gaW4gYmxvY2tzLmBDdXJhdG9yRGVwb3NpdE11bHRpcGxpZXJ9CRAgoQcAEBkBIFRoZSBjdXJhdG9yIGRlcG9zaXQgaXMgY2FsY3VsYXRlZCBhcyBhIHBlcmNlbnRhZ2Ugb2YgdGhlIGN1cmF0b3IgZmVlLgA5ASBUaGlzIGRlcG9zaXQgaGFzIG9wdGlvbmFsIHVwcGVyIGFuZCBsb3dlciBib3VuZHMgd2l0aCBgQ3VyYXRvckRlcG9zaXRNYXhgIGFuZFQgYEN1cmF0b3JEZXBvc2l0TWluYC5EQ3VyYXRvckRlcG9zaXRNYXgBAkQBACBKqdEBAAAAAAAAAAAAAARJASBNYXhpbXVtIGFtb3VudCBvZiBmdW5kcyB0aGF0IHNob3VsZCBiZSBwbGFjZWQgaW4gYSBkZXBvc2l0IGZvciBtYWtpbmcgYSBwcm9wb3NhbC5EQ3VyYXRvckRlcG9zaXRNaW4BAkQBAOh2SBcAAAAAAAAAAAAAAARJASBNaW5pbXVtIGFtb3VudCBvZiBmdW5kcyB0aGF0IHNob3VsZCBiZSBwbGFjZWQgaW4gYSBkZXBvc2l0IGZvciBtYWtpbmcgYSBwcm9wb3NhbC5IQm91bnR5VmFsdWVNaW5pbXVtGEAA6HZIFwAAAAAAAAAAAAAABHAgTWluaW11bSB2YWx1ZSBmb3IgYSBib3VudHkuSERhdGFEZXBvc2l0UGVyQnl0ZRhAAOH1BQAAAAAAAAAAAAAAAARhASBUaGUgYW1vdW50IGhlbGQgb24gZGVwb3NpdCBwZXIgYnl0ZSB3aXRoaW4gdGhlIHRpcCByZXBvcnQgcmVhc29uIG9yIGJvdW50eSBkZXNjcmlwdGlvbi5MTWF4aW11bVJlYXNvbkxlbmd0aBAQAEAAAAyIIE1heGltdW0gYWNjZXB0YWJsZSByZWFzb24gbGVuZ3RoLgBlASBCZW5jaG1hcmtzIGRlcGVuZCBvbiB0aGlzIHZhbHVlLCBiZSBzdXJlIHRvIHVwZGF0ZSB3ZWlnaHRzIGZpbGUgd2hlbiBjaGFuZ2luZyB0aGlzIHZhbHVlAWEKIgA0Q2hpbGRCb3VudGllcwE0Q2hpbGRCb3VudGllcxRAQ2hpbGRCb3VudHlDb3VudAEAEBAAAAAABIAgTnVtYmVyIG9mIHRvdGFsIGNoaWxkIGJvdW50aWVzLkxQYXJlbnRDaGlsZEJvdW50aWVzAQEEBRAQEAAAAAAIsCBOdW1iZXIgb2YgY2hpbGQgYm91bnRpZXMgcGVyIHBhcmVudCBib3VudHku4CBNYXAgb2YgcGFyZW50IGJvdW50eSBpbmRleCB0byBudW1iZXIgb2YgY2hpbGQgYm91bnRpZXMuNENoaWxkQm91bnRpZXMAAQgFBYBlCgQABJQgQ2hpbGQgYm91bnRpZXMgdGhhdCBoYXZlIGJlZW4gYWRkZWQuXENoaWxkQm91bnR5RGVzY3JpcHRpb25zAAEEBRBdCgQABJggVGhlIGRlc2NyaXB0aW9uIG9mIGVhY2ggY2hpbGQtYm91bnR5LkxDaGlsZHJlbkN1cmF0b3JGZWVzAQEEBRAYQAAAAAAAAAAAAAAAAAAAAAAEAQEgVGhlIGN1bXVsYXRpdmUgY2hpbGQtYm91bnR5IGN1cmF0b3IgZmVlIGZvciBlYWNoIHBhcmVudCBib3VudHkuAR0DAUkHCGRNYXhBY3RpdmVDaGlsZEJvdW50eUNvdW50EBBkAAAABB0BIE1heGltdW0gbnVtYmVyIG9mIGNoaWxkIGJvdW50aWVzIHRoYXQgY2FuIGJlIGFkZGVkIHRvIGEgcGFyZW50IGJvdW50eS5cQ2hpbGRCb3VudHlWYWx1ZU1pbmltdW0YQADkC1QCAAAAAAAAAAAAAAAEiCBNaW5pbXVtIHZhbHVlIGZvciBhIGNoaWxkLWJvdW50eS4BbQomAGhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZQFoRWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2UoFFJvdW5kAQAQEAEAAAAYrCBJbnRlcm5hbCBjb3VudGVyIGZvciB0aGUgbnVtYmVyIG9mIHJvdW5kcy4AVQEgVGhpcyBpcyB1c2VmdWwgZm9yIGRlLWR1cGxpY2F0aW9uIG9mIHRyYW5zYWN0aW9ucyBzdWJtaXR0ZWQgdG8gdGhlIHBvb2wsIGFuZCBnZW5lcmFsbCBkaWFnbm9zdGljcyBvZiB0aGUgcGFsbGV0LgBNASBUaGlzIGlzIG1lcmVseSBpbmNyZW1lbnRlZCBvbmNlIHBlciBldmVyeSB0aW1lIHRoYXQgYW4gdXBzdHJlYW0gYGVsZWN0YCBpcyBjYWxsZWQuMEN1cnJlbnRQaGFzZQEAVQcEAAQ8IEN1cnJlbnQgcGhhc2UuOFF1ZXVlZFNvbHV0aW9uAABxCgQADD0BIEN1cnJlbnQgYmVzdCBzb2x1dGlvbiwgc2lnbmVkIG9yIHVuc2lnbmVkLCBxdWV1ZWQgdG8gYmUgcmV0dXJuZWQgdXBvbiBgZWxlY3RgLgBgIEFsd2F5cyBzb3J0ZWQgYnkgc2NvcmUuIFNuYXBzaG90AAB5CgQAEHAgU25hcHNob3QgZGF0YSBvZiB0aGUgcm91bmQuAF0BIFRoaXMgaXMgY3JlYXRlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzaWduZWQgcGhhc2UgYW5kIGNsZWFyZWQgdXBvbiBjYWxsaW5nIGBlbGVjdGAuKQEgTm90ZTogVGhpcyBzdG9yYWdlIHR5cGUgbXVzdCBvbmx5IGJlIG11dGF0ZWQgdGhyb3VnaCBbYFNuYXBzaG90V3JhcHBlcmBdLjhEZXNpcmVkVGFyZ2V0cwAAEAQAEMwgRGVzaXJlZCBudW1iZXIgb2YgdGFyZ2V0cyB0byBlbGVjdCBmb3IgdGhpcyByb3VuZC4AqCBPbmx5IGV4aXN0cyB3aGVuIFtgU25hcHNob3RgXSBpcyBwcmVzZW50LikBIE5vdGU6IFRoaXMgc3RvcmFnZSB0eXBlIG11c3Qgb25seSBiZSBtdXRhdGVkIHRocm91Z2ggW2BTbmFwc2hvdFdyYXBwZXJgXS5AU25hcHNob3RNZXRhZGF0YQAA+QMEABCYIFRoZSBtZXRhZGF0YSBvZiB0aGUgW2BSb3VuZFNuYXBzaG90YF0AqCBPbmx5IGV4aXN0cyB3aGVuIFtgU25hcHNob3RgXSBpcyBwcmVzZW50LikBIE5vdGU6IFRoaXMgc3RvcmFnZSB0eXBlIG11c3Qgb25seSBiZSBtdXRhdGVkIHRocm91Z2ggW2BTbmFwc2hvdFdyYXBwZXJgXS5kU2lnbmVkU3VibWlzc2lvbk5leHRJbmRleAEAEBAAAAAAJAEBIFRoZSBuZXh0IGluZGV4IHRvIGJlIGFzc2lnbmVkIHRvIGFuIGluY29taW5nIHNpZ25lZCBzdWJtaXNzaW9uLgB1ASBFdmVyeSBhY2NlcHRlZCBzdWJtaXNzaW9uIGlzIGFzc2lnbmVkIGEgdW5pcXVlIGluZGV4OyB0aGF0IGluZGV4IGlzIGJvdW5kIHRvIHRoYXQgcGFydGljdWxhcmUBIHN1Ym1pc3Npb24gZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgZWxlY3Rpb24uIE9uIGVsZWN0aW9uIGZpbmFsaXphdGlvbiwgdGhlIG5leHQgaW5kZXggaXMwIHJlc2V0IHRvIDAuAGkBIFdlIGNhbid0IGp1c3QgdXNlIGBTaWduZWRTdWJtaXNzaW9uSW5kaWNlcy5sZW4oKWAsIGJlY2F1c2UgdGhhdCdzIGEgYm91bmRlZCBzZXQ7IHBhc3QgaXRzWQEgY2FwYWNpdHksIGl0IHdpbGwgc2ltcGx5IHNhdHVyYXRlLiBXZSBjYW4ndCBqdXN0IGl0ZXJhdGUgb3ZlciBgU2lnbmVkU3VibWlzc2lvbnNNYXBgLPQgYmVjYXVzZSBpdGVyYXRpb24gaXMgc2xvdy4gSW5zdGVhZCwgd2Ugc3RvcmUgdGhlIHZhbHVlIGhlcmUuXFNpZ25lZFN1Ym1pc3Npb25JbmRpY2VzAQCFCgQAGG0BIEEgc29ydGVkLCBib3VuZGVkIHZlY3RvciBvZiBgKHNjb3JlLCBibG9ja19udW1iZXIsIGluZGV4KWAsIHdoZXJlIGVhY2ggYGluZGV4YCBwb2ludHMgdG8gYXggdmFsdWUgaW4gYFNpZ25lZFN1Ym1pc3Npb25zYC4AcQEgV2UgbmV2ZXIgbmVlZCB0byBwcm9jZXNzIG1vcmUgdGhhbiBhIHNpbmdsZSBzaWduZWQgc3VibWlzc2lvbiBhdCBhIHRpbWUuIFNpZ25lZCBzdWJtaXNzaW9uc3UBIGNhbiBiZSBxdWl0ZSBsYXJnZSwgc28gd2UncmUgd2lsbGluZyB0byBwYXkgdGhlIGNvc3Qgb2YgbXVsdGlwbGUgZGF0YWJhc2UgYWNjZXNzZXMgdG8gYWNjZXNzIQEgdGhlbSBvbmUgYXQgYSB0aW1lIGluc3RlYWQgb2YgcmVhZGluZyBhbmQgZGVjb2RpbmcgYWxsIG9mIHRoZW0gYXQgb25jZS5QU2lnbmVkU3VibWlzc2lvbnNNYXAAAQQFEJEKBAAcdCBVbmNoZWNrZWQsIHNpZ25lZCBzb2x1dGlvbnMuAGkBIFRvZ2V0aGVyIHdpdGggYFN1Ym1pc3Npb25JbmRpY2VzYCwgdGhpcyBzdG9yZXMgYSBib3VuZGVkIHNldCBvZiBgU2lnbmVkU3VibWlzc2lvbnNgIHdoaWxl7CBhbGxvd2luZyB1cyB0byBrZWVwIG9ubHkgYSBzaW5nbGUgb25lIGluIG1lbW9yeSBhdCBhIHRpbWUuAGkBIFR3b3ggbm90ZTogdGhlIGtleSBvZiB0aGUgbWFwIGlzIGFuIGF1dG8taW5jcmVtZW50aW5nIGluZGV4IHdoaWNoIHVzZXJzIGNhbm5vdCBpbnNwZWN0IG9y9CBhZmZlY3Q7IHdlIHNob3VsZG4ndCBuZWVkIGEgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIGhhc2hlci5UTWluaW11bVVudHJ1c3RlZFNjb3JlAAD1AwQAEF0BIFRoZSBtaW5pbXVtIHNjb3JlIHRoYXQgZWFjaCAndW50cnVzdGVkJyBzb2x1dGlvbiBtdXN0IGF0dGFpbiBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkKCBmZWFzaWJsZS4AuCBDYW4gYmUgc2V0IHZpYSBgc2V0X21pbmltdW1fdW50cnVzdGVkX3Njb3JlYC4BIQMBTQc4VEJldHRlclNpZ25lZFRocmVzaG9sZKwQAAAAAAhNASBUaGUgbWluaW11bSBhbW91bnQgb2YgaW1wcm92ZW1lbnQgdG8gdGhlIHNvbHV0aW9uIHNjb3JlIHRoYXQgZGVmaW5lcyBhIHNvbHV0aW9uIGFzeCAiYmV0dGVyIiBpbiB0aGUgU2lnbmVkIHBoYXNlLjhPZmZjaGFpblJlcGVhdBAQEgAAABC0IFRoZSByZXBlYXQgdGhyZXNob2xkIG9mIHRoZSBvZmZjaGFpbiB3b3JrZXIuAGEBIEZvciBleGFtcGxlLCBpZiBpdCBpcyA1LCB0aGF0IG1lYW5zIHRoYXQgYXQgbGVhc3QgNSBibG9ja3Mgd2lsbCBlbGFwc2UgYmV0d2VlbiBhdHRlbXB0c4QgdG8gc3VibWl0IHRoZSB3b3JrZXIncyBzb2x1dGlvbi48TWluZXJUeFByaW9yaXR5MCBlZmZmZmZm5gQlASBUaGUgcHJpb3JpdHkgb2YgdGhlIHVuc2lnbmVkIHRyYW5zYWN0aW9uIHN1Ym1pdHRlZCBpbiB0aGUgdW5zaWduZWQtcGhhc2VQU2lnbmVkTWF4U3VibWlzc2lvbnMQEBAAAAAc5CBNYXhpbXVtIG51bWJlciBvZiBzaWduZWQgc3VibWlzc2lvbnMgdGhhdCBjYW4gYmUgcXVldWVkLgBVASBJdCBpcyBiZXN0IHRvIGF2b2lkIGFkanVzdGluZyB0aGlzIGR1cmluZyBhbiBlbGVjdGlvbiwgYXMgaXQgaW1wYWN0cyBkb3duc3RyZWFtIGRhdGFlASBzdHJ1Y3R1cmVzLiBJbiBwYXJ0aWN1bGFyLCBgU2lnbmVkU3VibWlzc2lvbkluZGljZXM8VD5gIGlzIGJvdW5kZWQgb24gdGhpcyB2YWx1ZS4gSWYgeW919CB1cGRhdGUgdGhpcyB2YWx1ZSBkdXJpbmcgYW4gZWxlY3Rpb24sIHlvdSBfbXVzdF8gZW5zdXJlIHRoYXRNASBgU2lnbmVkU3VibWlzc2lvbkluZGljZXMubGVuKClgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbmV3IHZhbHVlLiBPdGhlcndpc2Us8CBhdHRlbXB0cyB0byBzdWJtaXQgbmV3IHNvbHV0aW9ucyBtYXkgY2F1c2UgYSBydW50aW1lIHBhbmljLjxTaWduZWRNYXhXZWlnaHQoQAsIx3JYVQETo3A9CtejcL0UlCBNYXhpbXVtIHdlaWdodCBvZiBhIHNpZ25lZCBzb2x1dGlvbi4AXQEgSWYgW2BDb25maWc6Ok1pbmVyQ29uZmlnYF0gaXMgYmVpbmcgaW1wbGVtZW50ZWQgdG8gc3VibWl0IHNpZ25lZCBzb2x1dGlvbnMgKG91dHNpZGUgb2Y9ASB0aGlzIHBhbGxldCksIHRoZW4gW2BNaW5lckNvbmZpZzo6c29sdXRpb25fd2VpZ2h0YF0gaXMgdXNlZCB0byBjb21wYXJlIGFnYWluc3QwIHRoaXMgdmFsdWUuQFNpZ25lZE1heFJlZnVuZHMQEAQAAAAEGQEgVGhlIG1heGltdW0gYW1vdW50IG9mIHVuY2hlY2tlZCBzb2x1dGlvbnMgdG8gcmVmdW5kIHRoZSBjYWxsIGZlZSBmb3IuQFNpZ25lZFJld2FyZEJhc2UYQADkC1QCAAAAAAAAAAAAAAAEiCBCYXNlIHJld2FyZCBmb3IgYSBzaWduZWQgc29sdXRpb25EU2lnbmVkRGVwb3NpdEJ5dGUYQHh9AQAAAAAAAAAAAAAAAAAEoCBQZXItYnl0ZSBkZXBvc2l0IGZvciBhIHNpZ25lZCBzb2x1dGlvbi5MU2lnbmVkRGVwb3NpdFdlaWdodBhAAAAAAAAAAAAAAAAAAAAAAASoIFBlci13ZWlnaHQgZGVwb3NpdCBmb3IgYSBzaWduZWQgc29sdXRpb24uKE1heFdpbm5lcnMQELAEAAAQNQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIHdpbm5lcnMgdGhhdCBjYW4gYmUgZWxlY3RlZCBieSB0aGlzIGBFbGVjdGlvblByb3ZpZGVyYEAgaW1wbGVtZW50YXRpb24uAFEBIE5vdGU6IFRoaXMgbXVzdCBhbHdheXMgYmUgZ3JlYXRlciBvciBlcXVhbCB0byBgVDo6RGF0YVByb3ZpZGVyOjpkZXNpcmVkX3RhcmdldHMoKWAuOE1pbmVyTWF4TGVuZ3RoEBAAADYAADhNaW5lck1heFdlaWdodChACwjHclhVAROjcD0K16NwvQBUTWluZXJNYXhWb3Rlc1BlclZvdGVyEBAQAAAAADxNaW5lck1heFdpbm5lcnMQELAEAAAAAZUKJAAkVm90ZXJMaXN0ASRWb3Rlckxpc3QMJExpc3ROb2RlcwABBAUAmQoEAAyAIEEgc2luZ2xlIG5vZGUsIHdpdGhpbiBzb21lIGJhZy4ABQEgTm9kZXMgc3RvcmUgbGlua3MgZm9yd2FyZCBhbmQgYmFjayB3aXRoaW4gdGhlaXIgcmVzcGVjdGl2ZSBiYWdzLkxDb3VudGVyRm9yTGlzdE5vZGVzAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAgTGlzdEJhZ3MAAQQFMJ0KBAAMZCBBIGJhZyBzdG9yZWQgaW4gc3RvcmFnZS4AGQEgU3RvcmVzIGEgYEJhZ2Agc3RydWN0LCB3aGljaCBzdG9yZXMgaGVhZCBhbmQgdGFpbCBwb2ludGVycyB0byBpdHNlbGYuARUEAV0HBDRCYWdUaHJlc2hvbGRzoQoJGSEDAOQLVAIAAADznoCXAgAAAKixl+ICAAAAlEkuNgMAAAAnnDqTAwAAAAO8zvoDAAAAQsAbbgQAAAAbR3XuBAAAADheVX0FAAAARtxgHAYAAACJOGzNBgAAALbugJIHAAAA/n7jbQgAAADoGxpiCQAAALAZ9HEKAAAAEDWSoAsAAADPyW/xDAAAAEEUbWgOAAAA55vaCRAAAADO6IXaEQAAACipx98TAAAAu3CTHxYAAACOQImgGAAAAIEKCWobAAAANmpIhB4AAABb02r4IQAAAIB8nNAlAAAAyVUwGCoAAAC9Y8HbLgAAAHHgVyk0AAAAaJCSEDoAAADtxNSiQAAAAGmTefNHAAAAj9gMGFAAAABLr4ooWQAAAGoWpj9jAAAACZUXe24AAAB4xfT7egAAAGLIEeeIAAAAUb9tZZgAAAAEjqukqQAAAFRGmNe8AAAAkcrANtIAAAAXXxgB6gAAAL0VsnwEAQAAQzWP9yEBAAC4/ITIQgEAAJlnPFBnAQAAB+RO+o8BAACzQYM+vQEAAAJ/LqLvAQAAmIO8uScCAAAWTWUqZgIAALSVE6yrAgAALY6CC/kCAACh5pgsTwMAAKYWCA2vAwAAzJ03xxkEAACg1YSVkAQAAELn4NUUBQAAAozXDagFAAAPdQrvSwYAAOqNLlwCBwAAw8uZbs0HAACx5XF8rwgAAKorjh+rCQAAtcEgPcMKAAAm0D0O+wsAAHDHWSlWDQAA663ajNgOAAD3l9uqhhAAAM/wRHZlEgAAHyZgcXoUAAAJphG+yxYAAB376C9gGQAAlDo8YD8cAACK/onEcR8AAM7ZY8cAIwAAA6kq5PYmAAD+cu7FXysAADbJzGlIMAAA2uMyRb81AAAGKnRw1DsAAHyXMtaZQgAAhKMkaCNKAABXGtRZh1IAAOfxAmLeWwAADbh2A0RmAACuBAHe1nEAAH2eswi5fgAAHgRKdhCNAAA6HfBkB50AAOBPr9rMrgAAVnnwL5XCAACVw6qpmtgAAJZ8BSUe8QAAF3pm1mcMAQAoyx8eyCoBAPooL3WYTAEA1X3IdDxyAQB9xLP7IpwBADZc3nTHygEAnrjhQrP+AQAMMa5UfzgCAF/hAejVeAIAY3PafnTAAgBR0aYNLhADAMfppGjtaAMAYcCR97fLAwC/J6G3sDkEAHsUmZQbtAQAhSPtImE8BQBppdTFEtQFAOyMk03vfAYA9aqQG+g4BwCMvl3bJgoIAAKXjOET8wgA+uMUQ132CQDd8S26/hYLAC663G9KWAwADFUYxPK9DQDwu1QxFUwPAEmOhmtGBxEAssFT3p/0EgAnii+yzhkVALI5n4QkfRcA4ZnnBKolGgC6E/WrMxsdACZHhcx4ZiAAiL+APy0RJAAcmCP4HSYoAMzEItRQsSwA8IiCBSjAMQA2fG1+iWE3AG6TKdMKpj0AjLxsEyKgRAAAcPMqXGRMALQ7hGmZCVUAgLSr5FCpXgCgzal5219pAEzCf0zHTHUA0KwOujSTggBIPgzPPVqRAGjGjnRpzaEAKB5vpSsdtACYqSMmdH/IAPCadGNNMN8AgM38S41y+ACQFGAtmpAUAfC0E9lF3TMBIJc1lsG0VgFQ3PuurX19AeARmLlHqqgBMMfuFru52AEgbkiGlzkOAqD6Sx1yx0kCwBFxcLUSjAKAihZDpt7VAsD4I7GiBCgDgK9ZcKJ2gwPAby2H/0HpA0CTf6yPkloEAJEJcRe22ARAD99bISBlBQBJwUlEbgEGAI68puVsrwYAWVaGhRxxB4BoqjSkt0gIgKHinlK5OAkAvavogORDCgAqcrQgTG0LgPHAEzNcuAwAoDzL3OMoDoC4YpqeIMMPAN5Wk9LKixEAXX9MkyOIEwAah981BL4VAKfOS4TvMxgAARD76iTxGgCAKuXRtf0dACKhNGCdYiEARCFr8NopJQACYfGCj14pAGYgz4UeDS4AhBAZUlJDMwCgwY/KhBA5ACatFJPMhT8A0M0kZi+2RgCc4Zoc2rZOAFjMwgxfn1cAIAp1ePuJYQAwu7vW5JNsAGDLp9ye3XgAuDvAQluLhgC4hiNhZMWVAPjxX9yTuKYAIGqRwNaWuQDY7+KPwJfOAGgpm/Uu+eX//////////6zQIFRoZSBsaXN0IG9mIHRocmVzaG9sZHMgc2VwYXJhdGluZyB0aGUgdmFyaW91cyBiYWdzLgBJASBJZHMgYXJlIHNlcGFyYXRlZCBpbnRvIHVuc29ydGVkIGJhZ3MgYWNjb3JkaW5nIHRvIHRoZWlyIHNjb3JlLiBUaGlzIHNwZWNpZmllcyB0aGVhASB0aHJlc2hvbGRzIHNlcGFyYXRpbmcgdGhlIGJhZ3MuIEFuIGlkJ3MgYmFnIGlzIHRoZSBsYXJnZXN0IGJhZyBmb3Igd2hpY2ggdGhlIGlkJ3Mgc2NvcmW4IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBpdHMgdXBwZXIgdGhyZXNob2xkLgBlASBXaGVuIGlkcyBhcmUgaXRlcmF0ZWQsIGhpZ2hlciBiYWdzIGFyZSBpdGVyYXRlZCBjb21wbGV0ZWx5IGJlZm9yZSBsb3dlciBiYWdzLiBUaGlzIG1lYW5zWQEgdGhhdCBpdGVyYXRpb24gaXMgX3NlbWktc29ydGVkXzogaWRzIG9mIGhpZ2hlciBzY29yZSB0ZW5kIHRvIGNvbWUgYmVmb3JlIGlkcyBvZiBsb3dlci0BIHNjb3JlLCBidXQgcGVlciBpZHMgd2l0aGluIGEgcGFydGljdWxhciBiYWcgYXJlIHNvcnRlZCBpbiBpbnNlcnRpb24gb3JkZXIuAGggIyBFeHByZXNzaW5nIHRoZSBjb25zdGFudABNASBUaGlzIGNvbnN0YW50IG11c3QgYmUgc29ydGVkIGluIHN0cmljdGx5IGluY3JlYXNpbmcgb3JkZXIuIER1cGxpY2F0ZSBpdGVtcyBhcmUgbm90LCBwZXJtaXR0ZWQuAEEBIFRoZXJlIGlzIGFuIGltcGxpZWQgdXBwZXIgbGltaXQgb2YgYFNjb3JlOjpNQVhgOyB0aGF0IHZhbHVlIGRvZXMgbm90IG5lZWQgdG8gYmUhASBzcGVjaWZpZWQgd2l0aGluIHRoZSBiYWcuIEZvciBhbnkgdHdvIHRocmVzaG9sZCBsaXN0cywgaWYgb25lIGVuZHMgd2l0aDEBIGBTY29yZTo6TUFYYCwgdGhlIG90aGVyIG9uZSBkb2VzIG5vdCwgYW5kIHRoZXkgYXJlIG90aGVyd2lzZSBlcXVhbCwgdGhlIHR3b3wgbGlzdHMgd2lsbCBiZWhhdmUgaWRlbnRpY2FsbHkuADggIyBDYWxjdWxhdGlvbgBVASBJdCBpcyByZWNvbW1lbmRlZCB0byBnZW5lcmF0ZSB0aGUgc2V0IG9mIHRocmVzaG9sZHMgaW4gYSBnZW9tZXRyaWMgc2VyaWVzLCBzdWNoIHRoYXRBASB0aGVyZSBleGlzdHMgc29tZSBjb25zdGFudCByYXRpbyBzdWNoIHRoYXQgYHRocmVzaG9sZFtrICsgMV0gPT0gKHRocmVzaG9sZFtrXSAq0CBjb25zdGFudF9yYXRpbykubWF4KHRocmVzaG9sZFtrXSArIDEpYCBmb3IgYWxsIGBrYC4AWQEgVGhlIGhlbHBlcnMgaW4gdGhlIGAvdXRpbHMvZnJhbWUvZ2VuZXJhdGUtYmFnc2AgbW9kdWxlIGNhbiBzaW1wbGlmeSB0aGlzIGNhbGN1bGF0aW9uLgAsICMgRXhhbXBsZXMAUQEgLSBJZiBgQmFnVGhyZXNob2xkczo6Z2V0KCkuaXNfZW1wdHkoKWAsIHRoZW4gYWxsIGlkcyBhcmUgcHV0IGludG8gdGhlIHNhbWUgYmFnLCBhbmSwICAgaXRlcmF0aW9uIGlzIHN0cmljdGx5IGluIGluc2VydGlvbiBvcmRlci5hASAtIElmIGBCYWdUaHJlc2hvbGRzOjpnZXQoKS5sZW4oKSA9PSA2NGAsIGFuZCB0aGUgdGhyZXNob2xkcyBhcmUgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8RASAgIHRoZSBwcm9jZWR1cmUgZ2l2ZW4gYWJvdmUsIHRoZW4gdGhlIGNvbnN0YW50IHJhdGlvIGlzIGVxdWFsIHRvIDIuZQEgLSBJZiBgQmFnVGhyZXNob2xkczo6Z2V0KCkubGVuKCkgPT0gMjAwYCwgYW5kIHRoZSB0aHJlc2hvbGRzIGFyZSBkZXRlcm1pbmVkIGFjY29yZGluZyB0b1kBICAgdGhlIHByb2NlZHVyZSBnaXZlbiBhYm92ZSwgdGhlbiB0aGUgY29uc3RhbnQgcmF0aW8gaXMgYXBwcm94aW1hdGVseSBlcXVhbCB0byAxLjI0OC5hASAtIElmIHRoZSB0aHJlc2hvbGQgbGlzdCBiZWdpbnMgYFsxLCAyLCAzLCAuLi5dYCwgdGhlbiBhbiBpZCB3aXRoIHNjb3JlIDAgb3IgMSB3aWxsIGZhbGzwICAgaW50byBiYWcgMCwgYW4gaWQgd2l0aCBzY29yZSAyIHdpbGwgZmFsbCBpbnRvIGJhZyAxLCBldGMuADAgIyBNaWdyYXRpb24AYQEgSW4gdGhlIGV2ZW50IHRoYXQgdGhpcyBsaXN0IGV2ZXIgY2hhbmdlcywgYSBjb3B5IG9mIHRoZSBvbGQgYmFncyBsaXN0IG11c3QgYmUgcmV0YWluZWQuXQEgV2l0aCB0aGF0IGBMaXN0OjptaWdyYXRlYCBjYW4gYmUgY2FsbGVkLCB3aGljaCB3aWxsIHBlcmZvcm0gdGhlIGFwcHJvcHJpYXRlIG1pZ3JhdGlvbi4BpQolADxOb21pbmF0aW9uUG9vbHMBPE5vbWluYXRpb25Qb29sc1RAVG90YWxWYWx1ZUxvY2tlZAEAGEAAAAAAAAAAAAAAAAAAAAAAFIwgVGhlIHN1bSBvZiBmdW5kcyBhY3Jvc3MgYWxsIHBvb2xzLgBxASBUaGlzIG1pZ2h0IGJlIGxvd2VyIGJ1dCBuZXZlciBoaWdoZXIgdGhhbiB0aGUgc3VtIG9mIGB0b3RhbF9iYWxhbmNlYCBvZiBhbGwgW2BQb29sTWVtYmVyc2BdWQEgYmVjYXVzZSBjYWxsaW5nIGBwb29sX3dpdGhkcmF3X3VuYm9uZGVkYCBtaWdodCBkZWNyZWFzZSB0aGUgdG90YWwgc3Rha2Ugb2YgdGhlIHBvb2wncykBIGBib25kZWRfYWNjb3VudGAgd2l0aG91dCBhZGp1c3RpbmcgdGhlIHBhbGxldC1pbnRlcm5hbCBgVW5ib25kaW5nUG9vbGAncy4sTWluSm9pbkJvbmQBABhAAAAAAAAAAAAAAAAAAAAAAAScIE1pbmltdW0gYW1vdW50IHRvIGJvbmQgdG8gam9pbiBhIHBvb2wuNE1pbkNyZWF0ZUJvbmQBABhAAAAAAAAAAAAAAAAAAAAAABygIE1pbmltdW0gYm9uZCByZXF1aXJlZCB0byBjcmVhdGUgYSBwb29sLgBlASBUaGlzIGlzIHRoZSBhbW91bnQgdGhhdCB0aGUgZGVwb3NpdG9yIG11c3QgcHV0IGFzIHRoZWlyIGluaXRpYWwgc3Rha2UgaW4gdGhlIHBvb2wsIGFzIGFuiCBpbmRpY2F0aW9uIG9mICJza2luIGluIHRoZSBnYW1lIi4AaQEgVGhpcyBpcyB0aGUgdmFsdWUgdGhhdCB3aWxsIGFsd2F5cyBleGlzdCBpbiB0aGUgc3Rha2luZyBsZWRnZXIgb2YgdGhlIHBvb2wgYm9uZGVkIGFjY291bnSAIHdoaWxlIGFsbCBvdGhlciBhY2NvdW50cyBsZWF2ZS4gTWF4UG9vbHMAABAEAAhpASBNYXhpbXVtIG51bWJlciBvZiBub21pbmF0aW9uIHBvb2xzIHRoYXQgY2FuIGV4aXN0LiBJZiBgTm9uZWAsIHRoZW4gYW4gdW5ib3VuZGVkIG51bWJlciBvZkQgcG9vbHMgY2FuIGV4aXN0LjhNYXhQb29sTWVtYmVycwAAEAQACEkBIE1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgdGhhdCBjYW4gZXhpc3QgaW4gdGhlIHN5c3RlbS4gSWYgYE5vbmVgLCB0aGVuIHRoZSBjb3VudLggbWVtYmVycyBhcmUgbm90IGJvdW5kIG9uIGEgc3lzdGVtIHdpZGUgYmFzaXMuVE1heFBvb2xNZW1iZXJzUGVyUG9vbAAAEAQACEEBIE1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgdGhhdCBtYXkgYmVsb25nIHRvIHBvb2wuIElmIGBOb25lYCwgdGhlbiB0aGUgY291bnQgb2aoIG1lbWJlcnMgaXMgbm90IGJvdW5kIG9uIGEgcGVyIHBvb2wgYmFzaXMuTEdsb2JhbE1heENvbW1pc3Npb24AAKwEAAxpASBUaGUgbWF4aW11bSBjb21taXNzaW9uIHRoYXQgY2FuIGJlIGNoYXJnZWQgYnkgYSBwb29sLiBVc2VkIG9uIGNvbW1pc3Npb24gcGF5b3V0cyB0byBib3VuZCUBIHBvb2wgY29tbWlzc2lvbnMgdGhhdCBhcmUgPiBgR2xvYmFsTWF4Q29tbWlzc2lvbmAsIG5lY2Vzc2FyeSBpZiBhIGZ1dHVyZQ0BIGBHbG9iYWxNYXhDb21taXNzaW9uYCBpcyBsb3dlciB0aGFuIHNvbWUgY3VycmVudCBwb29sIGNvbW1pc3Npb25zLixQb29sTWVtYmVycwABBAUArQoEAAxAIEFjdGl2ZSBtZW1iZXJzLgDQIFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLlRDb3VudGVyRm9yUG9vbE1lbWJlcnMBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcCxCb25kZWRQb29scwABBAUQuQoEAARoIFN0b3JhZ2UgZm9yIGJvbmRlZCBwb29scy5UQ291bnRlckZvckJvbmRlZFBvb2xzAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAsUmV3YXJkUG9vbHMAAQQFEM0KBAAIdQEgUmV3YXJkIHBvb2xzLiBUaGlzIGlzIHdoZXJlIHRoZXJlIHJld2FyZHMgZm9yIGVhY2ggcG9vbCBhY2N1bXVsYXRlLiBXaGVuIGEgbWVtYmVycyBwYXlvdXQgaXNZASBjbGFpbWVkLCB0aGUgYmFsYW5jZSBjb21lcyBvdXQgb2YgdGhlIHJld2FyZCBwb29sLiBLZXllZCBieSB0aGUgYm9uZGVkIHBvb2xzIGFjY291bnQuVENvdW50ZXJGb3JSZXdhcmRQb29scwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwPFN1YlBvb2xzU3RvcmFnZQABBAUQ0QoEAAgZASBHcm91cHMgb2YgdW5ib25kaW5nIHBvb2xzLiBFYWNoIGdyb3VwIG9mIHVuYm9uZGluZyBwb29scyBiZWxvbmdzIHRvIGEpASBib25kZWQgcG9vbCwgaGVuY2UgdGhlIG5hbWUgc3ViLXBvb2xzLiBLZXllZCBieSB0aGUgYm9uZGVkIHBvb2xzIGFjY291bnQuZENvdW50ZXJGb3JTdWJQb29sc1N0b3JhZ2UBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcCBNZXRhZGF0YQEBBAUQ6QoEAARcIE1ldGFkYXRhIGZvciB0aGUgcG9vbC5IQ291bnRlckZvck1ldGFkYXRhAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAoTGFzdFBvb2xJZAEAEBAAAAAABNAgRXZlciBpbmNyZWFzaW5nIG51bWJlciBvZiBhbGwgcG9vbHMgY3JlYXRlZCBzbyBmYXIuTFJldmVyc2VQb29sSWRMb29rdXAAAQQFABAEABDcIEEgcmV2ZXJzZSBsb29rdXAgZnJvbSB0aGUgcG9vbCdzIGFjY291bnQgaWQgdG8gaXRzIGlkLgB1ASBUaGlzIGlzIG9ubHkgdXNlZCBmb3Igc2xhc2hpbmcgYW5kIG9uIGF1dG9tYXRpYyB3aXRoZHJhdyB1cGRhdGUuIEluIGFsbCBvdGhlciBpbnN0YW5jZXMsIHRoZSUBIHBvb2wgaWQgaXMgdXNlZCwgYW5kIHRoZSBhY2NvdW50cyBhcmUgZGV0ZXJtaW5pc3RpY2FsbHkgZGVyaXZlZCBmcm9tIGl0LnRDb3VudGVyRm9yUmV2ZXJzZVBvb2xJZExvb2t1cAEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwQENsYWltUGVybWlzc2lvbnMBAQQFADUEBAIEAQEgTWFwIGZyb20gYSBwb29sIG1lbWJlciBhY2NvdW50IHRvIHRoZWlyIG9wdGVkIGNsYWltIHBlcm1pc3Npb24uARkEAWEHDCBQYWxsZXRJZIEJIHB5L25vcGxzBIQgVGhlIG5vbWluYXRpb24gcG9vbCdzIHBhbGxldCBpZC5ITWF4UG9pbnRzVG9CYWxhbmNlCAQKMB0BIFRoZSBtYXhpbXVtIHBvb2wgcG9pbnRzLXRvLWJhbGFuY2UgcmF0aW8gdGhhdCBhbiBgb3BlbmAgcG9vbCBjYW4gaGF2ZS4AVQEgVGhpcyBpcyBpbXBvcnRhbnQgaW4gdGhlIGV2ZW50IHNsYXNoaW5nIHRha2VzIHBsYWNlIGFuZCB0aGUgcG9vbCdzIHBvaW50cy10by1iYWxhbmNlfCByYXRpbyBiZWNvbWVzIGRpc3Byb3BvcnRpb25hbC4AZQEgTW9yZW92ZXIsIHRoaXMgcmVsYXRlcyB0byB0aGUgYFJld2FyZENvdW50ZXJgIHR5cGUgYXMgd2VsbCwgYXMgdGhlIGFyaXRobWV0aWMgb3BlcmF0aW9uc1UBIGFyZSBhIGZ1bmN0aW9uIG9mIG51bWJlciBvZiBwb2ludHMsIGFuZCBieSBzZXR0aW5nIHRoaXMgdmFsdWUgdG8gZS5nLiAxMCwgeW91IGVuc3VyZWUBIHRoYXQgdGhlIHRvdGFsIG51bWJlciBvZiBwb2ludHMgaW4gdGhlIHN5c3RlbSBhcmUgYXQgbW9zdCAxMCB0aW1lcyB0aGUgdG90YWxfaXNzdWFuY2Ugb2acIHRoZSBjaGFpbiwgaW4gdGhlIGFic29sdXRlIHdvcnNlIGNhc2UuAEkBIEZvciBhIHZhbHVlIG9mIDEwLCB0aGUgdGhyZXNob2xkIHdvdWxkIGJlIGEgcG9vbCBwb2ludHMtdG8tYmFsYW5jZSByYXRpbyBvZiAxMDoxLjEBIFN1Y2ggYSBzY2VuYXJpbyB3b3VsZCBhbHNvIGJlIHRoZSBlcXVpdmFsZW50IG9mIHRoZSBwb29sIGJlaW5nIDkwJSBzbGFzaGVkLjBNYXhVbmJvbmRpbmcQECAAAAAEPQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91cyB1bmJvbmRpbmcgY2h1bmtzIHRoYXQgY2FuIGV4aXN0IHBlciBtZW1iZXIuAe0KJwAsRmFzdFVuc3Rha2UBLEZhc3RVbnN0YWtlEBBIZWFkAAD1CgQADMAgVGhlIGN1cnJlbnQgImhlYWQgb2YgdGhlIHF1ZXVlIiBiZWluZyB1bnN0YWtlZC4AKQEgVGhlIGhlYWQgaW4gaXRzZWxmIGNhbiBiZSBhIGJhdGNoIG9mIHVwIHRvIFtgQ29uZmlnOjpCYXRjaFNpemVgXSBzdGFrZXJzLhRRdWV1ZQABBAUAGAQADMAgVGhlIG1hcCBvZiBhbGwgYWNjb3VudHMgd2lzaGluZyB0byBiZSB1bnN0YWtlZC4AOQEgS2VlcHMgdHJhY2sgb2YgYEFjY291bnRJZGAgd2lzaGluZyB0byB1bnN0YWtlIGFuZCBpdCdzIGNvcnJlc3BvbmRpbmcgZGVwb3NpdC48Q291bnRlckZvclF1ZXVlAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXBMRXJhc1RvQ2hlY2tQZXJCbG9jawEAEBAAAAAAIIwgTnVtYmVyIG9mIGVyYXMgdG8gY2hlY2sgcGVyIGJsb2NrLgA1ASBJZiBzZXQgdG8gMCwgdGhpcyBwYWxsZXQgZG9lcyBhYnNvbHV0ZWx5IG5vdGhpbmcuIENhbm5vdCBiZSBzZXQgdG8gbW9yZSB0aGFukCBbYENvbmZpZzo6TWF4RXJhc1RvQ2hlY2tQZXJCbG9ja2BdLgBlASBCYXNlZCBvbiB0aGUgYW1vdW50IG9mIHdlaWdodCBhdmFpbGFibGUgYXQgW2BQYWxsZXQ6Om9uX2lkbGVgXSwgdXAgdG8gdGhpcyBtYW55IGVyYXMgYXJlXQEgY2hlY2tlZC4gVGhlIGNoZWNraW5nIGlzIHJlcHJlc2VudGVkIGJ5IHVwZGF0aW5nIFtgVW5zdGFrZVJlcXVlc3Q6OmNoZWNrZWRgXSwgd2hpY2ggaXNQIHN0b3JlZCBpbiBbYEhlYWRgXS4BTQQBZQcEHERlcG9zaXQYQADkC1QCAAAAAAAAAAAAAAAIZQEgRGVwb3NpdCB0byB0YWtlIGZvciB1bnN0YWtpbmcsIHRvIG1ha2Ugc3VyZSB3ZSdyZSBhYmxlIHRvIHNsYXNoIHRoZSBpdCBpbiBvcmRlciB0byBjb3ZlcsAgdGhlIGNvc3RzIG9mIHJlc291cmNlcyBvbiB1bnN1Y2Nlc3NmdWwgdW5zdGFrZS4BAQsoAEBQYXJhY2hhaW5zT3JpZ2luAAAAAAAyEHkBIFRoZXJlIGlzIG5vIHdheSB0byByZWdpc3RlciBhbiBvcmlnaW4gdHlwZSBpbiBgY29uc3RydWN0X3J1bnRpbWVgIHdpdGhvdXQgYSBwYWxsZXQgdGhlIG9yaWdpbjAgYmVsb25ncyB0by4AdQEgVGhpcyBtb2R1bGUgZnVsZmlsbHMgb25seSB0aGUgc2luZ2xlIHB1cnBvc2Ugb2YgaG91c2luZyB0aGUgYE9yaWdpbmAgaW4gYGNvbnN0cnVjdF9ydW50aW1lYC40Q29uZmlndXJhdGlvbgE0Q29uZmlndXJhdGlvbgwwQWN0aXZlQ29uZmlnAQAFC0EDAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAZAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAAAAAAEAAAABAAAAAQAAAAABAAAAAAAAAAAAAAAQJwAAgLLmDoDDyQGAlpgAAAAAAAAAAAAAAAAABQAAAATIIFRoZSBhY3RpdmUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbi44UGVuZGluZ0NvbmZpZ3MBAAkLBAAcfCBQZW5kaW5nIGNvbmZpZ3VyYXRpb24gY2hhbmdlcy4AWQEgVGhpcyBpcyBhIGxpc3Qgb2YgY29uZmlndXJhdGlvbiBjaGFuZ2VzLCBlYWNoIHdpdGggYSBzZXNzaW9uIGluZGV4IGF0IHdoaWNoIGl0IHNob3VsZDAgYmUgYXBwbGllZC4AYQEgVGhlIGxpc3QgaXMgc29ydGVkIGFzY2VuZGluZyBieSBzZXNzaW9uIGluZGV4LiBBbHNvLCB0aGlzIGxpc3QgY2FuIG9ubHkgY29udGFpbiBhdCBtb3N0/CAyIGl0ZW1zOiBmb3IgdGhlIG5leHQgc2Vzc2lvbiBhbmQgZm9yIHRoZSBgc2NoZWR1bGVkX3Nlc3Npb25gLlhCeXBhc3NDb25zaXN0ZW5jeUNoZWNrAQAgBAAIYQEgSWYgdGhpcyBpcyBzZXQsIHRoZW4gdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGVycyB3aWxsIGJ5cGFzcyB0aGUgY29uc2lzdGVuY3kgY2hlY2tzLiBUaGlztCBpcyBtZWFudCB0byBiZSB1c2VkIG9ubHkgYXMgdGhlIGxhc3QgcmVzb3J0LgFRBAAAARELMwAsUGFyYXNTaGFyZWQBLFBhcmFzU2hhcmVkEExDdXJyZW50U2Vzc2lvbkluZGV4AQAQEAAAAAAEbCBUaGUgY3VycmVudCBzZXNzaW9uIGluZGV4LlhBY3RpdmVWYWxpZGF0b3JJbmRpY2VzAQAVCwQACAkBIEFsbCB0aGUgdmFsaWRhdG9ycyBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHBhcmFjaGFpbiBjb25zZW5zdXMusCBJbmRpY2VzIGFyZSBpbnRvIHRoZSBicm9hZGVyIHZhbGlkYXRvciBzZXQuTEFjdGl2ZVZhbGlkYXRvcktleXMBABkLBAAIVQEgVGhlIHBhcmFjaGFpbiBhdHRlc3RhdGlvbiBrZXlzIG9mIHRoZSB2YWxpZGF0b3JzIGFjdGl2ZWx5IHBhcnRpY2lwYXRpbmcgaW4gcGFyYWNoYWluHQEgY29uc2Vuc3VzLiBUaGlzIHNob3VsZCBiZSB0aGUgc2FtZSBsZW5ndGggYXMgYEFjdGl2ZVZhbGlkYXRvckluZGljZXNgLkxBbGxvd2VkUmVsYXlQYXJlbnRzAQAdCxQAAAAAAARsIEFsbCBhbGxvd2VkIHJlbGF5LXBhcmVudHMuAXUEAAAANAA0UGFyYUluY2x1c2lvbgE0UGFyYUluY2x1c2lvbgQIVjEAAQQFjQIpCwQAFGEBIENhbmRpZGF0ZXMgcGVuZGluZyBhdmFpbGFiaWxpdHkgYnkgYFBhcmFJZGAuIFRoZXkgZm9ybSBhIGNoYWluIHN0YXJ0aW5nIGZyb20gdGhlIGxhdGVzdGwgaW5jbHVkZWQgaGVhZCBvZiB0aGUgcGFyYS5hASBVc2UgYSBkaWZmZXJlbnQgcHJlZml4IHBvc3QtbWlncmF0aW9uIHRvIHYxLCBzaW5jZSB0aGUgdjAgYFBlbmRpbmdBdmFpbGFiaWxpdHlgIHN0b3JhZ2VxASB3b3VsZCBvdGhlcndpc2UgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBwcmVmaXggd2hpY2ggY291bGQgY2F1c2UgdW5kZWZpbmVkIGJlaGF2aW91ciB3aGVuIGRvaW5nPCB0aGUgbWlncmF0aW9uLgF5BAFpBwABMQs1ADBQYXJhSW5oZXJlbnQBMFBhcmFJbmhlcmVudAggSW5jbHVkZWQAAIwEABjsIFdoZXRoZXIgdGhlIHBhcmFzIGluaGVyZW50IHdhcyBpbmNsdWRlZCB3aXRoaW4gdGhpcyBibG9jay4AaQEgVGhlIGBPcHRpb248KCk+YCBpcyBlZmZlY3RpdmVseSBhIGBib29sYCwgYnV0IGl0IG5ldmVyIGhpdHMgc3RvcmFnZSBpbiB0aGUgYE5vbmVgIHZhcmlhbnS8IGR1ZSB0byB0aGUgZ3VhcmFudGVlcyBvZiBGUkFNRSdzIHN0b3JhZ2UgQVBJcy4ASQEgSWYgdGhpcyBpcyBgTm9uZWAgYXQgdGhlIGVuZCBvZiB0aGUgYmxvY2ssIHdlIHBhbmljIGFuZCByZW5kZXIgdGhlIGJsb2NrIGludmFsaWQuME9uQ2hhaW5Wb3RlcwAANQsEAARFASBTY3JhcGVkIG9uIGNoYWluIGRhdGEgZm9yIGV4dHJhY3RpbmcgcmVzb2x2ZWQgZGlzcHV0ZXMgYXMgd2VsbCBhcyBiYWNraW5nIHZvdGVzLgF9BAAAAUkLNgA0UGFyYVNjaGVkdWxlcgE0UGFyYVNjaGVkdWxlchA8VmFsaWRhdG9yR3JvdXBzAQBNCwQAHG0BIEFsbCB0aGUgdmFsaWRhdG9yIGdyb3Vwcy4gT25lIGZvciBlYWNoIGNvcmUuIEluZGljZXMgYXJlIGludG8gYEFjdGl2ZVZhbGlkYXRvcnNgIC0gbm90IHRoZW0BIGJyb2FkZXIgc2V0IG9mIFBvbGthZG90IHZhbGlkYXRvcnMsIGJ1dCBpbnN0ZWFkIGp1c3QgdGhlIHN1YnNldCB1c2VkIGZvciBwYXJhY2hhaW5zIGR1cmluZzggdGhpcyBzZXNzaW9uLgBJASBCb3VuZDogVGhlIG51bWJlciBvZiBjb3JlcyBpcyB0aGUgc3VtIG9mIHRoZSBudW1iZXJzIG9mIHBhcmFjaGFpbnMgYW5kIHBhcmF0aHJlYWRpASBtdWx0aXBsZXhlcnMuIFJlYXNvbmFibHksIDEwMC0xMDAwLiBUaGUgZG9taW5hbnQgZmFjdG9yIGlzIHRoZSBudW1iZXIgb2YgdmFsaWRhdG9yczogc2FmZVAgdXBwZXIgYm91bmQgYXQgMTBrLkRBdmFpbGFiaWxpdHlDb3JlcwEAUQsEABhxASBPbmUgZW50cnkgZm9yIGVhY2ggYXZhaWxhYmlsaXR5IGNvcmUuIFRoZSBpJ3RoIHBhcmFjaGFpbiBiZWxvbmdzIHRvIHRoZSBpJ3RoIGNvcmUsIHdpdGggdGhl8CByZW1haW5pbmcgY29yZXMgYWxsIGJlaW5nIG9uIGRlbWFuZCBwYXJhY2hhaW4gbXVsdGlwbGV4ZXJzLgDYIEJvdW5kZWQgYnkgdGhlIG1heGltdW0gb2YgZWl0aGVyIG9mIHRoZXNlIHR3byB2YWx1ZXM65CAgICogVGhlIG51bWJlciBvZiBwYXJhY2hhaW5zIGFuZCBwYXJhdGhyZWFkIG11bHRpcGxleGVyc0UBICAgKiBUaGUgbnVtYmVyIG9mIHZhbGlkYXRvcnMgZGl2aWRlZCBieSBgY29uZmlndXJhdGlvbi5tYXhfdmFsaWRhdG9yc19wZXJfY29yZWAuRFNlc3Npb25TdGFydEJsb2NrAQAQEAAAAAAcaQEgVGhlIGJsb2NrIG51bWJlciB3aGVyZSB0aGUgc2Vzc2lvbiBzdGFydCBvY2N1cnJlZC4gVXNlZCB0byB0cmFjayBob3cgbWFueSBncm91cCByb3RhdGlvbnM8IGhhdmUgb2NjdXJyZWQuAFUBIE5vdGUgdGhhdCBpbiB0aGUgY29udGV4dCBvZiBwYXJhY2hhaW5zIG1vZHVsZXMgdGhlIHNlc3Npb24gY2hhbmdlIGlzIHNpZ25hbGVkIGR1cmluZ2EBIHRoZSBibG9jayBhbmQgZW5hY3RlZCBhdCB0aGUgZW5kIG9mIHRoZSBibG9jayAoYXQgdGhlIGZpbmFsaXphdGlvbiBzdGFnZSwgdG8gYmUgZXhhY3QpLlkBIFRodXMgZm9yIGFsbCBpbnRlbnRzIGFuZCBwdXJwb3NlcyB0aGUgZWZmZWN0IG9mIHRoZSBzZXNzaW9uIGNoYW5nZSBpcyBvYnNlcnZlZCBhdCB0aGVlASBibG9jayBmb2xsb3dpbmcgdGhlIHNlc3Npb24gY2hhbmdlLCBibG9jayBudW1iZXIgb2Ygd2hpY2ggd2Ugc2F2ZSBpbiB0aGlzIHN0b3JhZ2UgdmFsdWUuKENsYWltUXVldWUBAGELBAAMWQEgT25lIGVudHJ5IGZvciBlYWNoIGF2YWlsYWJpbGl0eSBjb3JlLiBUaGUgYFZlY0RlcXVlYCByZXByZXNlbnRzIHRoZSBhc3NpZ25tZW50cyB0byBiZVEBIHNjaGVkdWxlZCBvbiB0aGF0IGNvcmUuIFRoZSB2YWx1ZSBjb250YWluZWQgaGVyZSB3aWxsIG5vdCBiZSB2YWxpZCBhZnRlciB0aGUgZW5kIG9maQEgYSBibG9jay4gUnVudGltZSBBUElzIHNob3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSBzY2hlZHVsZWQgY29yZXMgZm9yIHRoZSB1cGNvbWluZyBibG9jay4AAAAANwAUUGFyYXMBFFBhcmFzVEBQdmZBY3RpdmVWb3RlTWFwAAEEBbkEcQsEABC0IEFsbCBjdXJyZW50bHkgYWN0aXZlIFBWRiBwcmUtY2hlY2tpbmcgdm90ZXMuACwgSW52YXJpYW50OnUBIC0gVGhlcmUgYXJlIG5vIFBWRiBwcmUtY2hlY2tpbmcgdm90ZXMgdGhhdCBleGlzdHMgaW4gbGlzdCBidXQgbm90IGluIHRoZSBzZXQgYW5kIHZpY2UgdmVyc2EuRFB2ZkFjdGl2ZVZvdGVMaXN0AQCBCwQABDUBIFRoZSBsaXN0IG9mIGFsbCBjdXJyZW50bHkgYWN0aXZlIFBWRiB2b3Rlcy4gQXV4aWxpYXJ5IHRvIGBQdmZBY3RpdmVWb3RlTWFwYC4oUGFyYWNoYWlucwEAhQsEABBpASBBbGwgbGVhc2UgaG9sZGluZyBwYXJhY2hhaW5zLiBPcmRlcmVkIGFzY2VuZGluZyBieSBgUGFyYUlkYC4gT24gZGVtYW5kIHBhcmFjaGFpbnMgYXJlIG5vdCggaW5jbHVkZWQuAOggQ29uc2lkZXIgdXNpbmcgdGhlIFtgUGFyYWNoYWluc0NhY2hlYF0gdHlwZSBvZiBtb2RpZnlpbmcuOFBhcmFMaWZlY3ljbGVzAAEEBY0CiQsEAAS8IFRoZSBjdXJyZW50IGxpZmVjeWNsZSBvZiBhIGFsbCBrbm93biBQYXJhIElEcy4USGVhZHMAAQQFjQLZBAQABKAgVGhlIGhlYWQtZGF0YSBvZiBldmVyeSByZWdpc3RlcmVkIHBhcmEuRE1vc3RSZWNlbnRDb250ZXh0AAEEBY0CEAQABCkBIFRoZSBjb250ZXh0IChyZWxheS1jaGFpbiBibG9jayBudW1iZXIpIG9mIHRoZSBtb3N0IHJlY2VudCBwYXJhY2hhaW4gaGVhZC48Q3VycmVudENvZGVIYXNoAAEEBY0CuQQEAAy0IFRoZSB2YWxpZGF0aW9uIGNvZGUgaGFzaCBvZiBldmVyeSBsaXZlIHBhcmEuAOQgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS4wUGFzdENvZGVIYXNoAAEEBY0LuQQEABBhASBBY3R1YWwgcGFzdCBjb2RlIGhhc2gsIGluZGljYXRlZCBieSB0aGUgcGFyYSBpZCBhcyB3ZWxsIGFzIHRoZSBibG9jayBudW1iZXIgYXQgd2hpY2ggaXREIGJlY2FtZSBvdXRkYXRlZC4A5CBDb3JyZXNwb25kaW5nIGNvZGUgY2FuIGJlIHJldHJpZXZlZCB3aXRoIFtgQ29kZUJ5SGFzaGBdLjBQYXN0Q29kZU1ldGEBAQQFjQKRCwgAAAxJASBQYXN0IGNvZGUgb2YgcGFyYWNoYWlucy4gVGhlIHBhcmFjaGFpbnMgdGhlbXNlbHZlcyBtYXkgbm90IGJlIHJlZ2lzdGVyZWQgYW55bW9yZSxJASBidXQgd2UgYWxzbyBrZWVwIHRoZWlyIGNvZGUgb24tY2hhaW4gZm9yIHRoZSBzYW1lIGFtb3VudCBvZiB0aW1lIGFzIG91dGRhdGVkIGNvZGWwIHRvIGtlZXAgaXQgYXZhaWxhYmxlIGZvciBhcHByb3ZhbCBjaGVja2Vycy48UGFzdENvZGVQcnVuaW5nAQCdCwQAGGkBIFdoaWNoIHBhcmFzIGhhdmUgcGFzdCBjb2RlIHRoYXQgbmVlZHMgcHJ1bmluZyBhbmQgdGhlIHJlbGF5LWNoYWluIGJsb2NrIGF0IHdoaWNoIHRoZSBjb2RlaQEgd2FzIHJlcGxhY2VkLiBOb3RlIHRoYXQgdGhpcyBpcyB0aGUgYWN0dWFsIGhlaWdodCBvZiB0aGUgaW5jbHVkZWQgYmxvY2ssIG5vdCB0aGUgZXhwZWN0ZWQ9ASBoZWlnaHQgYXQgd2hpY2ggdGhlIGNvZGUgdXBncmFkZSB3b3VsZCBiZSBhcHBsaWVkLCBhbHRob3VnaCB0aGV5IG1heSBiZSBlcXVhbC5tASBUaGlzIGlzIHRvIGVuc3VyZSB0aGUgZW50aXJlIGFjY2VwdGFuY2UgcGVyaW9kIGlzIGNvdmVyZWQsIG5vdCBhbiBvZmZzZXQgYWNjZXB0YW5jZSBwZXJpb2RtASBzdGFydGluZyBmcm9tIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBwYXJhY2hhaW4gcGVyY2VpdmVzIGEgY29kZSB1cGdyYWRlIGFzIGhhdmluZyBvY2N1cnJlZC5VASBNdWx0aXBsZSBlbnRyaWVzIGZvciBhIHNpbmdsZSBwYXJhIGFyZSBwZXJtaXR0ZWQuIE9yZGVyZWQgYXNjZW5kaW5nIGJ5IGJsb2NrIG51bWJlci5IRnV0dXJlQ29kZVVwZ3JhZGVzAAEEBY0CEAQAED0BIFRoZSBibG9jayBudW1iZXIgYXQgd2hpY2ggdGhlIHBsYW5uZWQgY29kZSBjaGFuZ2UgaXMgZXhwZWN0ZWQgZm9yIGEgcGFyYWNoYWluLgBlASBUaGUgY2hhbmdlIHdpbGwgYmUgYXBwbGllZCBhZnRlciB0aGUgZmlyc3QgcGFyYWJsb2NrIGZvciB0aGlzIElEIGluY2x1ZGVkIHdoaWNoIGV4ZWN1dGVzGQEgaW4gdGhlIGNvbnRleHQgb2YgYSByZWxheSBjaGFpbiBibG9jayB3aXRoIGEgbnVtYmVyID49IGBleHBlY3RlZF9hdGAuUEZ1dHVyZUNvZGVVcGdyYWRlc0F0AQCdCwQAIKwgVGhlIGxpc3Qgb2YgdXBjb21pbmcgZnV0dXJlIGNvZGUgdXBncmFkZXMuAG0BIEVhY2ggaXRlbSBpcyBhIHBhaXIgb2YgdGhlIHBhcmFjaGFpbiBhbmQgdGhlIGV4cGVjdGVkIGJsb2NrIGF0IHdoaWNoIHRoZSB1cGdyYWRlIHNob3VsZCBiZVEBIGFwcGxpZWQuIFRoZSB1cGdyYWRlIHdpbGwgYmUgYXBwbGllZCBhdCB0aGUgZ2l2ZW4gcmVsYXkgY2hhaW4gYmxvY2suIEluIGNvbnRyYXN0IHRvdQEgW2BGdXR1cmVDb2RlVXBncmFkZXNgXSB0aGlzIGNvZGUgdXBncmFkZSB3aWxsIGJlIGFwcGxpZWQgcmVnYXJkbGVzcyB0aGUgcGFyYWNoYWluIG1ha2luZyBhbnlEIHByb2dyZXNzIG9yIG5vdC4AjCBPcmRlcmVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIuOEZ1dHVyZUNvZGVIYXNoAAEEBY0CuQQEAAycIFRoZSBhY3R1YWwgZnV0dXJlIGNvZGUgaGFzaCBvZiBhIHBhcmEuAOQgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS5QVXBncmFkZUdvQWhlYWRTaWduYWwAAQQFjQKhCwQAKHUBIFRoaXMgaXMgdXNlZCBieSB0aGUgcmVsYXktY2hhaW4gdG8gY29tbXVuaWNhdGUgdG8gYSBwYXJhY2hhaW4gYSBnby1haGVhZCB3aXRoIGluIHRoZSB1cGdyYWRlLCBwcm9jZWR1cmUuAHUBIFRoaXMgdmFsdWUgaXMgYWJzZW50IHdoZW4gdGhlcmUgYXJlIG5vIHVwZ3JhZGVzIHNjaGVkdWxlZCBvciBkdXJpbmcgdGhlIHRpbWUgdGhlIHJlbGF5IGNoYWluVQEgcGVyZm9ybXMgdGhlIGNoZWNrcy4gSXQgaXMgc2V0IGF0IHRoZSBmaXJzdCByZWxheS1jaGFpbiBibG9jayB3aGVuIHRoZSBjb3JyZXNwb25kaW5ndQEgcGFyYWNoYWluIGNhbiBzd2l0Y2ggaXRzIHVwZ3JhZGUgZnVuY3Rpb24uIEFzIHNvb24gYXMgdGhlIHBhcmFjaGFpbidzIGJsb2NrIGlzIGluY2x1ZGVkLCB0aGVwIHZhbHVlIGdldHMgcmVzZXQgdG8gYE5vbmVgLgBlASBOT1RFIHRoYXQgdGhpcyBmaWVsZCBpcyB1c2VkIGJ5IHBhcmFjaGFpbnMgdmlhIG1lcmtsZSBzdG9yYWdlIHByb29mcywgdGhlcmVmb3JlIGNoYW5naW5nxCB0aGUgZm9ybWF0IHdpbGwgcmVxdWlyZSBtaWdyYXRpb24gb2YgcGFyYWNoYWlucy5gVXBncmFkZVJlc3RyaWN0aW9uU2lnbmFsAAEEBY0CpQsEACRpASBUaGlzIGlzIHVzZWQgYnkgdGhlIHJlbGF5LWNoYWluIHRvIGNvbW11bmljYXRlIHRoYXQgdGhlcmUgYXJlIHJlc3RyaWN0aW9ucyBmb3IgcGVyZm9ybWluZ3wgYW4gdXBncmFkZSBmb3IgdGhpcyBwYXJhY2hhaW4uAFkBIFRoaXMgbWF5IGJlIGEgYmVjYXVzZSB0aGUgcGFyYWNoYWluIHdhaXRzIGZvciB0aGUgdXBncmFkZSBjb29sZG93biB0byBleHBpcmUuIEFub3RoZXJtASBwb3RlbnRpYWwgdXNlIGNhc2UgaXMgd2hlbiB3ZSB3YW50IHRvIHBlcmZvcm0gc29tZSBtYWludGVuYW5jZSAoc3VjaCBhcyBzdG9yYWdlIG1pZ3JhdGlvbingIHdlIGNvdWxkIHJlc3RyaWN0IHVwZ3JhZGVzIHRvIG1ha2UgdGhlIHByb2Nlc3Mgc2ltcGxlci4AZQEgTk9URSB0aGF0IHRoaXMgZmllbGQgaXMgdXNlZCBieSBwYXJhY2hhaW5zIHZpYSBtZXJrbGUgc3RvcmFnZSBwcm9vZnMsIHRoZXJlZm9yZSBjaGFuZ2luZ8QgdGhlIGZvcm1hdCB3aWxsIHJlcXVpcmUgbWlncmF0aW9uIG9mIHBhcmFjaGFpbnMuQFVwZ3JhZGVDb29sZG93bnMBAJ0LBAAMUQEgVGhlIGxpc3Qgb2YgcGFyYWNoYWlucyB0aGF0IGFyZSBhd2FpdGluZyBmb3IgdGhlaXIgdXBncmFkZSByZXN0cmljdGlvbiB0byBjb29sZG93bi4AjCBPcmRlcmVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIuQFVwY29taW5nVXBncmFkZXMBAJ0LBAAYkCBUaGUgbGlzdCBvZiB1cGNvbWluZyBjb2RlIHVwZ3JhZGVzLgBxASBFYWNoIGl0ZW0gaXMgYSBwYWlyIG9mIHdoaWNoIHBhcmEgcGVyZm9ybXMgYSBjb2RlIHVwZ3JhZGUgYW5kIGF0IHdoaWNoIHJlbGF5LWNoYWluIGJsb2NrIGl0QCBpcyBleHBlY3RlZCBhdC4AjCBPcmRlcmVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIuMEFjdGlvbnNRdWV1ZQEBBAUQhQsEAAQVASBUaGUgYWN0aW9ucyB0byBwZXJmb3JtIGR1cmluZyB0aGUgc3RhcnQgb2YgYSBzcGVjaWZpYyBzZXNzaW9uIGluZGV4LlBVcGNvbWluZ1BhcmFzR2VuZXNpcwABBAWNAqkLBAAQoCBVcGNvbWluZyBwYXJhcyBpbnN0YW50aWF0aW9uIGFyZ3VtZW50cy4AZQEgTk9URSB0aGF0IGFmdGVyIFBWRiBwcmUtY2hlY2tpbmcgaXMgZW5hYmxlZCB0aGUgcGFyYSBnZW5lc2lzIGFyZyB3aWxsIGhhdmUgaXQncyBjb2RlIHNldGEBIHRvIGVtcHR5LiBJbnN0ZWFkLCB0aGUgY29kZSB3aWxsIGJlIHNhdmVkIGludG8gdGhlIHN0b3JhZ2UgcmlnaHQgYXdheSB2aWEgYENvZGVCeUhhc2hgLjhDb2RlQnlIYXNoUmVmcwEBBAa5BBAQAAAAAAQpASBUaGUgbnVtYmVyIG9mIHJlZmVyZW5jZSBvbiB0aGUgdmFsaWRhdGlvbiBjb2RlIGluIFtgQ29kZUJ5SGFzaGBdIHN0b3JhZ2UuKENvZGVCeUhhc2gAAQQGuQTVBAQAEJAgVmFsaWRhdGlvbiBjb2RlIHN0b3JlZCBieSBpdHMgaGFzaC4AMQEgVGhpcyBzdG9yYWdlIGlzIGNvbnNpc3RlbnQgd2l0aCBbYEZ1dHVyZUNvZGVIYXNoYF0sIFtgQ3VycmVudENvZGVIYXNoYF0gYW5kSCBbYFBhc3RDb2RlSGFzaGBdLgEJBQF5BwRAVW5zaWduZWRQcmlvcml0eTAg//////////8AAa0LOAAsSW5pdGlhbGl6ZXIBLEluaXRpYWxpemVyCDhIYXNJbml0aWFsaXplZAAAjAQAICEBIFdoZXRoZXIgdGhlIHBhcmFjaGFpbnMgbW9kdWxlcyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgd2l0aGluIHRoaXMgYmxvY2suACUBIFNlbWFudGljYWxseSBhIGBib29sYCwgYnV0IHRoaXMgZ3VhcmFudGVlcyBpdCBzaG91bGQgbmV2ZXIgaGl0IHRoZSB0cmllLGkBIGFzIHRoaXMgaXMgY2xlYXJlZCBpbiBgb25fZmluYWxpemVgIGFuZCBGcmFtZSBvcHRpbWl6ZXMgYE5vbmVgIHZhbHVlcyB0byBiZSBlbXB0eSB2YWx1ZXMuAHEBIEFzIGEgYGJvb2xgLCBgc2V0KGZhbHNlKWAgYW5kIGByZW1vdmUoKWAgYm90aCBsZWFkIHRvIHRoZSBuZXh0IGBnZXQoKWAgYmVpbmcgZmFsc2UsIGJ1dCBvbmV1ASBvZiB0aGVtIHdyaXRlcyB0byB0aGUgdHJpZSBhbmQgb25lIGRvZXMgbm90LiBUaGlzIGNvbmZ1c2lvbiBtYWtlcyBgT3B0aW9uPCgpPmAgbW9yZSBzdWl0YWJsZZAgZm9yIHRoZSBzZW1hbnRpY3Mgb2YgdGhpcyB2YXJpYWJsZS5YQnVmZmVyZWRTZXNzaW9uQ2hhbmdlcwEAsQsEABxZASBCdWZmZXJlZCBzZXNzaW9uIGNoYW5nZXMgYWxvbmcgd2l0aCB0aGUgYmxvY2sgbnVtYmVyIGF0IHdoaWNoIHRoZXkgc2hvdWxkIGJlIGFwcGxpZWQuAF0BIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgZW1wdHkgb3Igb25lIGVsZW1lbnQgbG9uZy4gQXBhcnQgZnJvbSB0aGF0IHRoaXMgaXRlbSBuZXZlciBoaXRzNCB0aGUgc3RvcmFnZS4AaQEgSG93ZXZlciB0aGlzIGlzIGEgYFZlY2AgcmVnYXJkbGVzcyB0byBoYW5kbGUgdmFyaW91cyBlZGdlIGNhc2VzIHRoYXQgbWF5IG9jY3VyIGF0IHJ1bnRpbWXAIHVwZ3JhZGUgYm91bmRhcmllcyBvciBpZiBnb3Zlcm5hbmNlIGludGVydmVuZXMuAREFAAAAOQAMRG1wAQxEbXAMVERvd253YXJkTWVzc2FnZVF1ZXVlcwEBBAWNArkLBAAE0CBUaGUgZG93bndhcmQgbWVzc2FnZXMgYWRkcmVzc2VkIGZvciBhIGNlcnRhaW4gcGFyYS5kRG93bndhcmRNZXNzYWdlUXVldWVIZWFkcwEBBAWNAjSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcJQEgQSBtYXBwaW5nIHRoYXQgc3RvcmVzIHRoZSBkb3dud2FyZCBtZXNzYWdlIHF1ZXVlIE1RQyBoZWFkIGZvciBlYWNoIHBhcmEuAJAgRWFjaCBsaW5rIGluIHRoaXMgY2hhaW4gaGFzIGEgZm9ybTp4IGAocHJldl9oZWFkLCBCLCBIKE0pKWAsIHdoZXJl6CAtIGBwcmV2X2hlYWRgOiBpcyB0aGUgcHJldmlvdXMgaGVhZCBoYXNoIG9yIHplcm8gaWYgbm9uZS4hASAtIGBCYDogaXMgdGhlIHJlbGF5LWNoYWluIGJsb2NrIG51bWJlciBpbiB3aGljaCBhIG1lc3NhZ2Ugd2FzIGFwcGVuZGVkLtQgLSBgSChNKWA6IGlzIHRoZSBoYXNoIG9mIHRoZSBtZXNzYWdlIGJlaW5nIGFwcGVuZGVkLkREZWxpdmVyeUZlZUZhY3RvcgEBBAWNAtEGQAAAZKeztuANAAAAAAAAAAAExCBUaGUgZmFjdG9yIHRvIG11bHRpcGx5IHRoZSBiYXNlIGRlbGl2ZXJ5IGZlZSBieS4AAAAAOgAQSHJtcAEQSHJtcDBcSHJtcE9wZW5DaGFubmVsUmVxdWVzdHMAAQQFGQXBCwQAGLwgVGhlIHNldCBvZiBwZW5kaW5nIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3RzLgDAIFRoZSBzZXQgaXMgYWNjb21wYW5pZWQgYnkgYSBsaXN0IGZvciBpdGVyYXRpb24uACwgSW52YXJpYW50Oj0BIC0gVGhlcmUgYXJlIG5vIGNoYW5uZWxzIHRoYXQgZXhpc3RzIGluIGxpc3QgYnV0IG5vdCBpbiB0aGUgc2V0IGFuZCB2aWNlIHZlcnNhLmxIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0c0xpc3QBAMULBAAAbEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RDb3VudAEBBAWNAhAQAAAAAAxlASBUaGlzIG1hcHBpbmcgdHJhY2tzIGhvdyBtYW55IG9wZW4gY2hhbm5lbCByZXF1ZXN0cyBhcmUgaW5pdGlhdGVkIGJ5IGEgZ2l2ZW4gc2VuZGVyIHBhcmEuWQEgSW52YXJpYW50OiBgSHJtcE9wZW5DaGFubmVsUmVxdWVzdHNgIHNob3VsZCBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBpdGVtcyB0aGF0IGhhcwUBIGAoWCwgXylgIGFzIHRoZSBudW1iZXIgb2YgYEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RDb3VudGAgZm9yIGBYYC58SHJtcEFjY2VwdGVkQ2hhbm5lbFJlcXVlc3RDb3VudAEBBAWNAhAQAAAAAAxxASBUaGlzIG1hcHBpbmcgdHJhY2tzIGhvdyBtYW55IG9wZW4gY2hhbm5lbCByZXF1ZXN0cyB3ZXJlIGFjY2VwdGVkIGJ5IGEgZ2l2ZW4gcmVjaXBpZW50IHBhcmEubQEgSW52YXJpYW50OiBgSHJtcE9wZW5DaGFubmVsUmVxdWVzdHNgIHNob3VsZCBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBpdGVtcyBgKF8sIFgpYCB3aXRoVQEgYGNvbmZpcm1lZGAgc2V0IHRvIHRydWUsIGFzIHRoZSBudW1iZXIgb2YgYEhybXBBY2NlcHRlZENoYW5uZWxSZXF1ZXN0Q291bnRgIGZvciBgWGAuYEhybXBDbG9zZUNoYW5uZWxSZXF1ZXN0cwABBAUZBYwEABxxASBBIHNldCBvZiBwZW5kaW5nIEhSTVAgY2xvc2UgY2hhbm5lbCByZXF1ZXN0cyB0aGF0IGFyZSBnb2luZyB0byBiZSBjbG9zZWQgZHVyaW5nIHRoZSBzZXNzaW9uIQEgY2hhbmdlLiBVc2VkIGZvciBjaGVja2luZyBpZiBhIGdpdmVuIGNoYW5uZWwgaXMgcmVnaXN0ZXJlZCBmb3IgY2xvc3VyZS4AwCBUaGUgc2V0IGlzIGFjY29tcGFuaWVkIGJ5IGEgbGlzdCBmb3IgaXRlcmF0aW9uLgAsIEludmFyaWFudDo9ASAtIFRoZXJlIGFyZSBubyBjaGFubmVscyB0aGF0IGV4aXN0cyBpbiBsaXN0IGJ1dCBub3QgaW4gdGhlIHNldCBhbmQgdmljZSB2ZXJzYS5wSHJtcENsb3NlQ2hhbm5lbFJlcXVlc3RzTGlzdAEAxQsEAAA4SHJtcFdhdGVybWFya3MAAQQFjQIQBAAQuCBUaGUgSFJNUCB3YXRlcm1hcmsgYXNzb2NpYXRlZCB3aXRoIGVhY2ggcGFyYS4sIEludmFyaWFudDpVASAtIGVhY2ggcGFyYSBgUGAgdXNlZCBoZXJlIGFzIGEga2V5IHNob3VsZCBzYXRpc2Z5IGBQYXJhczo6aXNfdmFsaWRfcGFyYShQKWAgd2l0aGluIGEsICAgc2Vzc2lvbi4wSHJtcENoYW5uZWxzAAEEBRkFyQsEAAy0IEhSTVAgY2hhbm5lbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHBhcmEuLCBJbnZhcmlhbnQ6dQEgLSBlYWNoIHBhcnRpY2lwYW50IGluIHRoZSBjaGFubmVsIHNob3VsZCBzYXRpc2Z5IGBQYXJhczo6aXNfdmFsaWRfcGFyYShQKWAgd2l0aGluIGEgc2Vzc2lvbi5gSHJtcEluZ3Jlc3NDaGFubmVsc0luZGV4AQEEBY0ChQsEADRxASBJbmdyZXNzL2VncmVzcyBpbmRleGVzIGFsbG93IHRvIGZpbmQgYWxsIHRoZSBzZW5kZXJzIGFuZCByZWNlaXZlcnMgZ2l2ZW4gdGhlIG9wcG9zaXRlIHNpZGUuFCBJLmUuACEBIChhKSBpbmdyZXNzIGluZGV4IGFsbG93cyB0byBmaW5kIGFsbCB0aGUgc2VuZGVycyBmb3IgYSBnaXZlbiByZWNpcGllbnQuHQEgKGIpIGVncmVzcyBpbmRleCBhbGxvd3MgdG8gZmluZCBhbGwgdGhlIHJlY2lwaWVudHMgZm9yIGEgZ2l2ZW4gc2VuZGVyLgAwIEludmFyaWFudHM6UQEgLSBmb3IgZWFjaCBpbmdyZXNzIGluZGV4IGVudHJ5IGZvciBgUGAgZWFjaCBpdGVtIGBJYCBpbiB0aGUgaW5kZXggc2hvdWxkIHByZXNlbnQgaW54ICAgYEhybXBDaGFubmVsc2AgYXMgYChJLCBQKWAuTQEgLSBmb3IgZWFjaCBlZ3Jlc3MgaW5kZXggZW50cnkgZm9yIGBQYCBlYWNoIGl0ZW0gYEVgIGluIHRoZSBpbmRleCBzaG91bGQgcHJlc2VudCBpbnggICBgSHJtcENoYW5uZWxzYCBhcyBgKFAsIEUpYC4BASAtIHRoZXJlIHNob3VsZCBiZSBubyBvdGhlciBkYW5nbGluZyBjaGFubmVscyBpbiBgSHJtcENoYW5uZWxzYC5oIC0gdGhlIHZlY3RvcnMgYXJlIHNvcnRlZC5cSHJtcEVncmVzc0NoYW5uZWxzSW5kZXgBAQQFjQKFCwQAAExIcm1wQ2hhbm5lbENvbnRlbnRzAQEEBRkFzQsEAAisIFN0b3JhZ2UgZm9yIHRoZSBtZXNzYWdlcyBmb3IgZWFjaCBjaGFubmVsLmUBIEludmFyaWFudDogY2Fubm90IGJlIG5vbi1lbXB0eSBpZiB0aGUgY29ycmVzcG9uZGluZyBjaGFubmVsIGluIGBIcm1wQ2hhbm5lbHNgIGlzIGBOb25lYC5ISHJtcENoYW5uZWxEaWdlc3RzAQEEBY0C1QsEABhpASBNYWludGFpbnMgYSBtYXBwaW5nIHRoYXQgY2FuIGJlIHVzZWQgdG8gYW5zd2VyIHRoZSBxdWVzdGlvbjogV2hhdCBwYXJhcyBzZW50IGEgbWVzc2FnZSBhdOQgdGhlIGdpdmVuIGJsb2NrIG51bWJlciBmb3IgYSBnaXZlbiByZWNlaXZlci4gSW52YXJpYW50czqoIC0gVGhlIGlubmVyIGBWZWM8UGFyYUlkPmAgaXMgbmV2ZXIgZW1wdHku6CAtIFRoZSBpbm5lciBgVmVjPFBhcmFJZD5gIGNhbm5vdCBzdG9yZSB0d28gc2FtZSBgUGFyYUlkYC5tASAtIFRoZSBvdXRlciB2ZWN0b3IgaXMgc29ydGVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIgYW5kIGNhbm5vdCBzdG9yZSB0d28gaXRlbXMgd2l0aCB0aGVUICAgc2FtZSBibG9jayBudW1iZXIuARUFAX0HAAHdCzwAPFBhcmFTZXNzaW9uSW5mbwE8UGFyYVNlc3Npb25JbmZvFFBBc3NpZ25tZW50S2V5c1Vuc2FmZQEA4QsEAAykIEFzc2lnbm1lbnQga2V5cyBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbi5tASBOb3RlIHRoYXQgdGhpcyBBUEkgaXMgcHJpdmF0ZSBkdWUgdG8gaXQgYmVpbmcgcHJvbmUgdG8gJ29mZi1ieS1vbmUnIGF0IHNlc3Npb24gYm91bmRhcmllcy6sIFdoZW4gaW4gZG91YnQsIHVzZSBgU2Vzc2lvbnNgIEFQSSBpbnN0ZWFkLlRFYXJsaWVzdFN0b3JlZFNlc3Npb24BABAQAAAAAAQBASBUaGUgZWFybGllc3Qgc2Vzc2lvbiBmb3Igd2hpY2ggcHJldmlvdXMgc2Vzc2lvbiBpbmZvIGlzIHN0b3JlZC4gU2Vzc2lvbnMAAQQGEOULBAAMpCBTZXNzaW9uIGluZm9ybWF0aW9uIGluIGEgcm9sbGluZyB3aW5kb3cuNQEgU2hvdWxkIGhhdmUgYW4gZW50cnkgaW4gcmFuZ2UgYEVhcmxpZXN0U3RvcmVkU2Vzc2lvbi4uPUN1cnJlbnRTZXNzaW9uSW5kZXhgLnUBIERvZXMgbm90IGhhdmUgYW55IGVudHJpZXMgYmVmb3JlIHRoZSBzZXNzaW9uIGluZGV4IGluIHRoZSBmaXJzdCBzZXNzaW9uIGNoYW5nZSBub3RpZmljYXRpb24uLEFjY291bnRLZXlzAAEEBhDRAQQABHEBIFRoZSB2YWxpZGF0b3IgYWNjb3VudCBrZXlzIG9mIHRoZSB2YWxpZGF0b3JzIGFjdGl2ZWx5IHBhcnRpY2lwYXRpbmcgaW4gcGFyYWNoYWluIGNvbnNlbnN1cy5UU2Vzc2lvbkV4ZWN1dG9yUGFyYW1zAAEEBhBZBAQABMQgRXhlY3V0b3IgcGFyYW1ldGVyIHNldCBmb3IgYSBnaXZlbiBzZXNzaW9uIGluZGV4AAAAAD0ANFBhcmFzRGlzcHV0ZXMBNFBhcmFzRGlzcHV0ZXMURExhc3RQcnVuZWRTZXNzaW9uAAAQBAAIAQEgVGhlIGxhc3QgcHJ1bmVkIHNlc3Npb24sIGlmIGFueS4gQWxsIGRhdGEgc3RvcmVkIGJ5IHRoaXMgbW9kdWxlVCByZWZlcmVuY2VzIHNlc3Npb25zLiBEaXNwdXRlcwABCAUC8Qv1CwQABAUBIEFsbCBvbmdvaW5nIG9yIGNvbmNsdWRlZCBkaXNwdXRlcyBmb3IgdGhlIGxhc3Qgc2V2ZXJhbCBzZXNzaW9ucy5EQmFja2Vyc09uRGlzcHV0ZXMAAQgFAvEL+QsEAAicIEJhY2tpbmcgdm90ZXMgc3RvcmVkIGZvciBlYWNoIGRpc3B1dGUujCBUaGlzIHN0b3JhZ2UgaXMgdXNlZCBmb3Igc2xhc2hpbmcuIEluY2x1ZGVkAAEIBQLxCxAEAAhFASBBbGwgaW5jbHVkZWQgYmxvY2tzIG9uIHRoZSBjaGFpbiwgYXMgd2VsbCBhcyB0aGUgYmxvY2sgbnVtYmVyIGluIHRoaXMgY2hhaW4gdGhhdFkBIHNob3VsZCBiZSByZXZlcnRlZCBiYWNrIHRvIGlmIHRoZSBjYW5kaWRhdGUgaXMgZGlzcHV0ZWQgYW5kIGRldGVybWluZWQgdG8gYmUgaW52YWxpZC4YRnJvemVuAQBhAgQAEBEBIFdoZXRoZXIgdGhlIGNoYWluIGlzIGZyb3plbi4gU3RhcnRzIGFzIGBOb25lYC4gV2hlbiB0aGlzIGlzIGBTb21lYCw1ASB0aGUgY2hhaW4gd2lsbCBub3QgYWNjZXB0IGFueSBuZXcgcGFyYWNoYWluIGJsb2NrcyBmb3IgYmFja2luZyBvciBpbmNsdXNpb24sCQEgYW5kIGl0cyB2YWx1ZSBpbmRpY2F0ZXMgdGhlIGxhc3QgdmFsaWQgYmxvY2sgbnVtYmVyIGluIHRoZSBjaGFpbi74IEl0IGNhbiBvbmx5IGJlIHNldCBiYWNrIHRvIGBOb25lYCBieSBnb3Zlcm5hbmNlIGludGVydmVudGlvbi4BHQUBgQcAAf0LPgA0UGFyYXNTbGFzaGluZwE0UGFyYXNTbGFzaGluZwhAVW5hcHBsaWVkU2xhc2hlcwABCAUC8QsBDAQABJAgVmFsaWRhdG9ycyBwZW5kaW5nIGRpc3B1dGUgc2xhc2hlcy5IVmFsaWRhdG9yU2V0Q291bnRzAAEEBRAQBAAEhCBgVmFsaWRhdG9yU2V0Q291bnRgIHBlciBzZXNzaW9uLgEhBQAAAREMPwAgT25EZW1hbmQBIE9uRGVtYW5kFDhQYXJhSWRBZmZpbml0eQABBAWNAhUMBAAMcQEgTWFwcyBhIGBQYXJhSWRgIHRvIGBDb3JlSW5kZXhgIGFuZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSBhc3NpZ25tZW50cyB0aGUgc2NoZWR1bGVyIGhhcyBpbl0BIGl0J3MgbG9va2FoZWFkLiBLZWVwaW5nIHRyYWNrIG9mIHRoaXMgYWZmaW5pdHkgcHJldmVudHMgcGFyYWxsZWwgZXhlY3V0aW9uIG9mIHRoZSBzYW1lnCBgUGFyYUlkYCBvbiB0d28gb3IgbW9yZSBgQ29yZUluZGV4YGVzLixRdWV1ZVN0YXR1cwEAGQxkAABkp7O24A0AAAAAAAAAAAAAAAAAAAAAAATcIE92ZXJhbGwgc3RhdHVzIG9mIHF1ZXVlIChib3RoIGZyZWUgKyBhZmZpbml0eSBlbnRyaWVzKSxGcmVlRW50cmllcwEALQwEAARhASBQcmlvcml0eSBxdWV1ZSBmb3IgYWxsIG9yZGVycyB3aGljaCBkb24ndCB5ZXQgKG9yIG5vdCBhbnkgbW9yZSkgaGF2ZSBhbnkgY29yZSBhZmZpbml0eS48QWZmaW5pdHlFbnRyaWVzAQEEBXEHLQwEAARJASBRdWV1ZSBlbnRyaWVzIHRoYXQgYXJlIGN1cnJlbnRseSBib3VuZCB0byBhIHBhcnRpY3VsYXIgY29yZSBkdWUgdG8gY29yZSBhZmZpbml0eS4cUmV2ZW51ZQEAOQwEAAT8IEtlZXBzIHRyYWNrIG9mIGFjY3VtdWxhdGVkIHJldmVudWUgZnJvbSBvbiBkZW1hbmQgb3JkZXIgc2FsZXMuATEFAY0HDExUcmFmZmljRGVmYXVsdFZhbHVl0QZAAABkp7O24A0AAAAAAAAAAATMIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgc3BvdCB0cmFmZmljIG11bHRpcGxpZXIuUE1heEhpc3RvcmljYWxSZXZlbnVlEBCgAAAACNQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGJsb2NrcyBzb21lIGhpc3RvcmljYWwgcmV2ZW51ZWAgaW5mb3JtYXRpb24gc3RvcmVkIGZvci4gUGFsbGV0SWSBCSBweS9vbmRtZAS0IElkZW50aWZpZXIgZm9yIHRoZSBpbnRlcm5hbCByZXZlbnVlIGJhbGFuY2UuAUEMQABoQ29yZXRpbWVBc3NpZ25tZW50UHJvdmlkZXIBaENvcmV0aW1lQXNzaWdubWVudFByb3ZpZGVyCDRDb3JlU2NoZWR1bGVzAAEEBEUMSQwEABBsIFNjaGVkdWxlZCBhc3NpZ25tZW50IHNldHMuAG0BIEFzc2lnbm1lbnRzIGFzIG9mIHRoZSBnaXZlbiBibG9jayBudW1iZXIuIFRoZXkgd2lsbCBnbyBpbnRvIHN0YXRlIG9uY2UgdGhlIGJsb2NrIG51bWJlciBpc9AgcmVhY2hlZCAoYW5kIHJlcGxhY2Ugd2hhdGV2ZXIgd2FzIGluIHRoZXJlIGJlZm9yZSkuPENvcmVEZXNjcmlwdG9ycwEBBARxB00MCAAAEKAgQXNzaWdubWVudHMgd2hpY2ggYXJlIGN1cnJlbnRseSBhY3RpdmUuAGkBIFRoZXkgd2lsbCBiZSBwaWNrZWQgZnJvbSBgUGVuZGluZ0Fzc2lnbm1lbnRzYCBvbmNlIHdlIHJlYWNoIHRoZSBzY2hlZHVsZWQgYmxvY2sgbnVtYmVyIGluWCBgUGVuZGluZ0Fzc2lnbm1lbnRzYC4AAAABbQxBACRSZWdpc3RyYXIBJFJlZ2lzdHJhcgwsUGVuZGluZ1N3YXAAAQQFjQKNAgQABGQgUGVuZGluZyBzd2FwIG9wZXJhdGlvbnMuFFBhcmFzAAEEBY0CcQwEABAFASBBbW91bnQgaGVsZCBvbiBkZXBvc2l0IGZvciBlYWNoIHBhcmEgYW5kIHRoZSBvcmlnaW5hbCBkZXBvc2l0b3IuAHEBIFRoZSBnaXZlbiBhY2NvdW50IElEIGlzIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyB0aGUgY29kZSBhbmQgaW5pdGlhbCBoZWFkIGRhdGEsIGJ1dCBtYXlVASBvbmx5IGRvIHNvIGlmIGl0IGlzbid0IHlldCByZWdpc3RlcmVkLiAoQWZ0ZXIgdGhhdCwgaXQncyB1cCB0byBnb3Zlcm5hbmNlIHRvIGRvIHNvLik4TmV4dEZyZWVQYXJhSWQBAI0CEAAAAAAEYCBUaGUgbmV4dCBmcmVlIGBQYXJhSWRgLgE1BQGRBwgsUGFyYURlcG9zaXQYQAAQpdToAAAAAAAAAAAAAAAI1CBUaGUgZGVwb3NpdCB0byBiZSBwYWlkIHRvIHJ1biBhIG9uLWRlbWFuZCBwYXJhY2hhaW4uPQEgVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgY29zdCBmb3Igc3RvcmluZyB0aGUgZ2VuZXNpcyBoZWFkIGFuZCB2YWxpZGF0aW9uIGNvZGUuSERhdGFEZXBvc2l0UGVyQnl0ZRhAgJaYAAAAAAAAAAAAAAAAAATEIFRoZSBkZXBvc2l0IHRvIGJlIHBhaWQgcGVyIGJ5dGUgc3RvcmVkIG9uIGNoYWluLgF1DEYAFFNsb3RzARRTbG90cwQYTGVhc2VzAQEEBY0CeQwEAEAVASBBbW91bnRzIGhlbGQgb24gZGVwb3NpdCBmb3IgZWFjaCAocG9zc2libHkgZnV0dXJlKSBsZWFzZWQgcGFyYWNoYWluLgBhASBUaGUgYWN0dWFsIGFtb3VudCBsb2NrZWQgb24gaXRzIGJlaGFsZiBieSBhbnkgYWNjb3VudCBhdCBhbnkgdGltZSBpcyB0aGUgbWF4aW11bSBvZiB0aGUpASBzZWNvbmQgdmFsdWVzIG9mIHRoZSBpdGVtcyBpbiB0aGlzIGxpc3Qgd2hvc2UgZmlyc3QgdmFsdWUgaXMgdGhlIGFjY291bnQuAGEBIFRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBhbW91bnQgbG9ja2VkIGZvciB0aGUgY3VycmVudCBMZWFzZSBQZXJpb2QuIEZvbGxvd2luZ7AgaXRlbXMgYXJlIGZvciB0aGUgc3Vic2VxdWVudCBsZWFzZSBwZXJpb2RzLgBhASBUaGUgZGVmYXVsdCB2YWx1ZSAoYW4gZW1wdHkgbGlzdCkgaW1wbGllcyB0aGF0IHRoZSBwYXJhY2hhaW4gbm8gbG9uZ2VyIGV4aXN0cyAob3IgbmV2ZXK0IGV4aXN0ZWQpIGFzIGZhciBhcyB0aGlzIHBhbGxldCBpcyBjb25jZXJuZWQuAFEBIElmIGEgcGFyYWNoYWluIGRvZXNuJ3QgZXhpc3QgKnlldCogYnV0IGlzIHNjaGVkdWxlZCB0byBleGlzdCBpbiB0aGUgZnV0dXJlLCB0aGVuIGl0YQEgd2lsbCBiZSBsZWZ0LXBhZGRlZCB3aXRoIG9uZSBvciBtb3JlIGBOb25lYHMgdG8gZGVub3RlIHRoZSBmYWN0IHRoYXQgbm90aGluZyBpcyBoZWxkIG9uXQEgZGVwb3NpdCBmb3IgdGhlIG5vbi1leGlzdGVudCBjaGFpbiBjdXJyZW50bHksIGJ1dCBpcyBoZWxkIGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZS4A3CBJdCBpcyBpbGxlZ2FsIGZvciBhIGBOb25lYCB2YWx1ZSB0byB0cmFpbCBpbiB0aGUgbGlzdC4BOQUBlQcILExlYXNlUGVyaW9kEBAAdRIABNwgVGhlIG51bWJlciBvZiBibG9ja3Mgb3ZlciB3aGljaCBhIHNpbmdsZSBwZXJpb2QgbGFzdHMuLExlYXNlT2Zmc2V0EBAAEA4ABNQgVGhlIG51bWJlciBvZiBibG9ja3MgdG8gb2Zmc2V0IGVhY2ggbGVhc2UgcGVyaW9kIGJ5LgF9DEcAIEF1Y3Rpb25zASBBdWN0aW9ucxA4QXVjdGlvbkNvdW50ZXIBABAQAAAAAASMIE51bWJlciBvZiBhdWN0aW9ucyBzdGFydGVkIHNvIGZhci4sQXVjdGlvbkluZm8AAIAEABT4IEluZm9ybWF0aW9uIHJlbGF0aW5nIHRvIHRoZSBjdXJyZW50IGF1Y3Rpb24sIGlmIHRoZXJlIGlzIG9uZS4ARQEgVGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHR1cGxlIGlzIHRoZSBsZWFzZSBwZXJpb2QgaW5kZXggdGhhdCB0aGUgZmlyc3Qgb2YgdGhlIGZvdXJRASBjb250aWd1b3VzIGxlYXNlIHBlcmlvZHMgb24gYXVjdGlvbiBpcyBmb3IuIFRoZSBzZWNvbmQgaXMgdGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZV0BIGF1Y3Rpb24gd2lsbCAiYmVnaW4gdG8gZW5kIiwgaS5lLiB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIEVuZGluZyBQZXJpb2Qgb2YgdGhlIGF1Y3Rpb24uPFJlc2VydmVkQW1vdW50cwABBAWBDBgEAAgxASBBbW91bnRzIGN1cnJlbnRseSByZXNlcnZlZCBpbiB0aGUgYWNjb3VudHMgb2YgdGhlIGJpZGRlcnMgY3VycmVudGx5IHdpbm5pbmc4IChzdWItKXJhbmdlcy4cV2lubmluZwABBAUQhQwEAAxhASBUaGUgd2lubmluZyBiaWRzIGZvciBlYWNoIG9mIHRoZSAxMCByYW5nZXMgYXQgZWFjaCBzYW1wbGUgaW4gdGhlIGZpbmFsIEVuZGluZyBQZXJpb2Qgb2ZJASB0aGUgY3VycmVudCBhdWN0aW9uLiBUaGUgbWFwJ3Mga2V5IGlzIHRoZSAwLWJhc2VkIGluZGV4IGludG8gdGhlIFNhbXBsZSBTaXplLiBUaGUdASBmaXJzdCBzYW1wbGUgb2YgdGhlIGVuZGluZyBwZXJpb2QgaXMgMDsgdGhlIGxhc3QgaXMgYFNhbXBsZSBTaXplIC0gMWAuAT0FAZkHEDBFbmRpbmdQZXJpb2QQEEAZAQAEHQEgVGhlIG51bWJlciBvZiBibG9ja3Mgb3ZlciB3aGljaCBhbiBhdWN0aW9uIG1heSBiZSByZXRyb2FjdGl2ZWx5IGVuZGVkLjBTYW1wbGVMZW5ndGgQEBQAAAAM8CBUaGUgbGVuZ3RoIG9mIGVhY2ggc2FtcGxlIHRvIHRha2UgZHVyaW5nIHRoZSBlbmRpbmcgcGVyaW9kLgDUIGBFbmRpbmdQZXJpb2RgIC8gYFNhbXBsZUxlbmd0aGAgPSBUb3RhbCAjIG9mIFNhbXBsZXM4U2xvdFJhbmdlQ291bnQQECQAAAAATExlYXNlUGVyaW9kc1BlclNsb3QQEAgAAAAAAZEMSAAkQ3Jvd2Rsb2FuASRDcm93ZGxvYW4QFEZ1bmRzAAEEBY0ClQwEAARoIEluZm8gb24gYWxsIG9mIHRoZSBmdW5kcy4gTmV3UmFpc2UBAIULBAAIVQEgVGhlIGZ1bmRzIHRoYXQgaGF2ZSBoYWQgYWRkaXRpb25hbCBjb250cmlidXRpb25zIGR1cmluZyB0aGUgbGFzdCBibG9jay4gVGhpcyBpcyB1c2VkFQEgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoaWNoIGZ1bmRzIHNob3VsZCBzdWJtaXQgbmV3IG9yIHVwZGF0ZWQgYmlkcy4wRW5kaW5nc0NvdW50AQAQEAAAAAAEKQEgVGhlIG51bWJlciBvZiBhdWN0aW9ucyB0aGF0IGhhdmUgZW50ZXJlZCBpbnRvIHRoZWlyIGVuZGluZyBwZXJpb2Qgc28gZmFyLjROZXh0RnVuZEluZGV4AQAQEAAAAAAEqCBUcmFja2VyIGZvciB0aGUgbmV4dCBhdmFpbGFibGUgZnVuZCBpbmRleAFFBQGdBwwgUGFsbGV0SWSBCSBweS9jZnVuZAgNASBgUGFsbGV0SWRgIGZvciB0aGUgY3Jvd2Rsb2FuIHBhbGxldC4gQW4gYXBwcm9wcmlhdGUgdmFsdWUgY291bGQgYmVkIGBQYWxsZXRJZCgqYiJweS9jZnVuZCIpYDxNaW5Db250cmlidXRpb24YQAB0O6QLAAAAAAAAAAAAAAAIYQEgVGhlIG1pbmltdW0gYW1vdW50IHRoYXQgbWF5IGJlIGNvbnRyaWJ1dGVkIGludG8gYSBjcm93ZGxvYW4uIFNob3VsZCBhbG1vc3QgY2VydGFpbmx5IGJlfCBhdCBsZWFzdCBgRXhpc3RlbnRpYWxEZXBvc2l0YC48UmVtb3ZlS2V5c0xpbWl0EBDoAwAABOQgTWF4IG51bWJlciBvZiBzdG9yYWdlIGtleXMgdG8gcmVtb3ZlIHBlciBleHRyaW5zaWMgY2FsbC4BnQxJACBDb3JldGltZQABWQUBoQcIIEJyb2tlcklkEBDtAwAABIggVGhlIFBhcmFJZCBvZiB0aGUgY29yZXRpbWUgY2hhaW4uREJyb2tlclBvdExvY2F0aW9uEQGMAQEAbW9kbHB5L2Jyb2tlAAAAAAAAAAAAAAAAAAAAAAAAAAAEhCBUaGUgY29yZXRpbWUgY2hhaW4gcG90IGxvY2F0aW9uLgGhDEoASFN0YXRlVHJpZU1pZ3JhdGlvbgFIU3RhdGVUcmllTWlncmF0aW9uDEBNaWdyYXRpb25Qcm9jZXNzAQB5BTgAAAAAAAAAAAAAAAAAABBQIE1pZ3JhdGlvbiBwcm9ncmVzcy4AXQEgVGhpcyBzdG9yZXMgdGhlIHNuYXBzaG90IG9mIHRoZSBsYXN0IG1pZ3JhdGVkIGtleXMuIEl0IGNhbiBiZSBzZXQgaW50byBtb3Rpb24gYW5kIG1vdmXUIGZvcndhcmQgYnkgYW55IG9mIHRoZSBtZWFucyBwcm92aWRlZCBieSB0aGlzIHBhbGxldC4oQXV0b0xpbWl0cwEAcQUEAAzUIFRoZSBsaW1pdHMgdGhhdCBhcmUgaW1wb3NlZCBvbiBhdXRvbWF0aWMgbWlncmF0aW9ucy4A1CBJZiBzZXQgdG8gTm9uZSwgdGhlbiBubyBhdXRvbWF0aWMgbWlncmF0aW9uIGhhcHBlbnMuYFNpZ25lZE1pZ3JhdGlvbk1heExpbWl0cwAAdQUEAAzgIFRoZSBtYXhpbXVtIGxpbWl0cyB0aGF0IHRoZSBzaWduZWQgbWlncmF0aW9uIGNvdWxkIHVzZS4AtCBJZiBub3Qgc2V0LCBubyBzaWduZWQgc3VibWlzc2lvbiBpcyBhbGxvd2VkLgFtBQGlBwQkTWF4S2V5TGVuEBAAAgAAVLQgTWF4aW1hbCBudW1iZXIgb2YgYnl0ZXMgdGhhdCBhIGtleSBjYW4gaGF2ZS4AsCBGUkFNRSBpdHNlbGYgZG9lcyBub3QgbGltaXQgdGhlIGtleSBsZW5ndGguAQEgVGhlIGNvbmNyZXRlIHZhbHVlIG11c3QgdGhlcmVmb3JlIGRlcGVuZCBvbiB5b3VyIHN0b3JhZ2UgdXNhZ2UuWQEgQSBbYGZyYW1lX3N1cHBvcnQ6OnN0b3JhZ2U6OlN0b3JhZ2VOTWFwYF0gZm9yIGV4YW1wbGUgY2FuIGhhdmUgYW4gYXJiaXRyYXJ5IG51bWJlciBvZkUBIGtleXMgd2hpY2ggYXJlIHRoZW4gaGFzaGVkIGFuZCBjb25jYXRlbmF0ZWQsIHJlc3VsdGluZyBpbiBhcmJpdHJhcmlseSBsb25nIGtleXMuAEEBIFVzZSB0aGUgKnN0YXRlIG1pZ3JhdGlvbiBSUEMqIHRvIHJldHJpZXZlIHRoZSBsZW5ndGggb2YgdGhlIGxvbmdlc3Qga2V5IGluIHlvdXIBASBzdG9yYWdlOiA8aHR0cHM6Ly9naXRodWIuY29tL3Bhcml0eXRlY2gvc3Vic3RyYXRlL2lzc3Vlcy8xMTY0Mj4AKQEgVGhlIG1pZ3JhdGlvbiB3aWxsIGhhbHQgd2l0aCBhIGBIYWx0ZWRgIGV2ZW50IGlmIHRoaXMgdmFsdWUgaXMgdG9vIHNtYWxsLkkBIFNpbmNlIHRoZXJlIGlzIG5vIHJlYWwgcGVuYWx0eSBmcm9tIG92ZXItZXN0aW1hdGluZywgaXQgaXMgYWR2aXNlZCB0byB1c2UgYSBsYXJnZYAgdmFsdWUuIFRoZSBkZWZhdWx0IGlzIDUxMiBieXRlLgCAIFNvbWUga2V5IGxlbmd0aHMgZm9yIHJlZmVyZW5jZTrQIC0gW2BmcmFtZV9zdXBwb3J0OjpzdG9yYWdlOjpTdG9yYWdlVmFsdWVgXTogMzIgYnl0ZcggLSBbYGZyYW1lX3N1cHBvcnQ6OnN0b3JhZ2U6OlN0b3JhZ2VNYXBgXTogNjQgYnl0ZeAgLSBbYGZyYW1lX3N1cHBvcnQ6OnN0b3JhZ2U6OlN0b3JhZ2VEb3VibGVNYXBgXTogOTYgYnl0ZQBIIEZvciBtb3JlIGluZm8gc2VlSQEgPGh0dHBzOi8vd3d3LnNoYXdudGFicml6aS5jb20vYmxvZy9zdWJzdHJhdGUvcXVlcnlpbmctc3Vic3RyYXRlLXN0b3JhZ2UtdmlhLXJwYy8+Aa0HYgAkWGNtUGFsbGV0ASRYY21QYWxsZXQ4MFF1ZXJ5Q291bnRlcgEAMCAAAAAAAAAAAASIIFRoZSBsYXRlc3QgYXZhaWxhYmxlIHF1ZXJ5IGluZGV4LhxRdWVyaWVzAAEEAjClDAQABFQgVGhlIG9uZ29pbmcgcXVlcmllcy4oQXNzZXRUcmFwcwEBBAY0EBAAAAAAEGggVGhlIGV4aXN0aW5nIGFzc2V0IHRyYXBzLgBhASBLZXkgaXMgdGhlIGJsYWtlMiAyNTYgaGFzaCBvZiAob3JpZ2luLCB2ZXJzaW9uZWQgYEFzc2V0c2ApIHBhaXIuIFZhbHVlIGlzIHRoZSBudW1iZXIgb2YdASB0aW1lcyB0aGlzIHBhaXIgaGFzIGJlZW4gdHJhcHBlZCAodXN1YWxseSBqdXN0IDEgaWYgaXQgZXhpc3RzIGF0IGFsbCkuOFNhZmVYY21WZXJzaW9uAAAQBAAIYQEgRGVmYXVsdCB2ZXJzaW9uIHRvIGVuY29kZSBYQ00gd2hlbiBsYXRlc3QgdmVyc2lvbiBvZiBkZXN0aW5hdGlvbiBpcyB1bmtub3duLiBJZiBgTm9uZWAsPQEgdGhlbiB0aGUgZGVzdGluYXRpb25zIHdob3NlIFhDTSB2ZXJzaW9uIGlzIHVua25vd24gYXJlIGNvbnNpZGVyZWQgdW5yZWFjaGFibGUuQFN1cHBvcnRlZFZlcnNpb24AAQgFArkMEAQABPAgVGhlIExhdGVzdCB2ZXJzaW9ucyB0aGF0IHdlIGtub3cgdmFyaW91cyBsb2NhdGlvbnMgc3VwcG9ydC5AVmVyc2lvbk5vdGlmaWVycwABCAUCuQwwBAAEBQEgQWxsIGxvY2F0aW9ucyB0aGF0IHdlIGhhdmUgcmVxdWVzdGVkIHZlcnNpb24gbm90aWZpY2F0aW9ucyBmcm9tLlBWZXJzaW9uTm90aWZ5VGFyZ2V0cwABCAUCuQy9DAQACHEBIFRoZSB0YXJnZXQgbG9jYXRpb25zIHRoYXQgYXJlIHN1YnNjcmliZWQgdG8gb3VyIHZlcnNpb24gY2hhbmdlcywgYXMgd2VsbCBhcyB0aGUgbW9zdCByZWNlbnSUIG9mIG91ciB2ZXJzaW9ucyB3ZSBpbmZvcm1lZCB0aGVtIG9mLlRWZXJzaW9uRGlzY292ZXJ5UXVldWUBAMEMBAAMZQEgRGVzdGluYXRpb25zIHdob3NlIGxhdGVzdCBYQ00gdmVyc2lvbiB3ZSB3b3VsZCBsaWtlIHRvIGtub3cuIER1cGxpY2F0ZXMgbm90IGFsbG93ZWQsIGFuZHEBIHRoZSBgdTMyYCBjb3VudGVyIGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhhdCBhIHNlbmQgdG8gdGhlIGRlc3RpbmF0aW9uIGhhcyBiZWVuIGF0dGVtcHRlZCyMIHdoaWNoIGlzIHVzZWQgYXMgYSBwcmlvcml0aXphdGlvbi5AQ3VycmVudE1pZ3JhdGlvbgAAzQwEAAScIFRoZSBjdXJyZW50IG1pZ3JhdGlvbidzIHN0YWdlLCBpZiBhbnkuVFJlbW90ZUxvY2tlZEZ1bmdpYmxlcwABDAUCAtUM2QwEAATwIEZ1bmdpYmxlIGFzc2V0cyB3aGljaCB3ZSBrbm93IGFyZSBsb2NrZWQgb24gYSByZW1vdGUgY2hhaW4uPExvY2tlZEZ1bmdpYmxlcwABBAIA6QwEAATgIEZ1bmdpYmxlIGFzc2V0cyB3aGljaCB3ZSBrbm93IGFyZSBsb2NrZWQgb24gdGhpcyBjaGFpbi5UWGNtRXhlY3V0aW9uU3VzcGVuZGVkAQAgBAAEtCBHbG9iYWwgc3VzcGVuc2lvbiBzdGF0ZSBvZiB0aGUgWENNIGV4ZWN1dG9yLjxTaG91bGRSZWNvcmRYY20BACAEABxZASBXaGV0aGVyIG9yIG5vdCBpbmNvbWluZyBYQ01zIChib3RoIGV4ZWN1dGVkIGxvY2FsbHkgYW5kIHJlY2VpdmVkKSBzaG91bGQgYmUgcmVjb3JkZWQuxCBPbmx5IG9uZSBYQ00gcHJvZ3JhbSB3aWxsIGJlIHJlY29yZGVkIGF0IGEgdGltZS4pASBUaGlzIGlzIG1lYW50IHRvIGJlIHVzZWQgaW4gcnVudGltZSBBUElzLCBhbmQgaXQncyBhZHZpc2VkIGl0IHN0YXlzIGZhbHNlDQEgZm9yIGFsbCBvdGhlciB1c2UgY2FzZXMsIHNvIGFzIHRvIG5vdCBkZWdyYWRlIHJlZ3VsYXIgcGVyZm9ybWFuY2UuAFkBIE9ubHkgcmVsZXZhbnQgaWYgdGhpcyBwYWxsZXQgaXMgYmVpbmcgdXNlZCBhcyB0aGUgW2B4Y21fZXhlY3V0b3I6OnRyYWl0czo6UmVjb3JkWGNtYF3IIGltcGxlbWVudGF0aW9uIGluIHRoZSBYQ00gZXhlY3V0b3IgY29uZmlndXJhdGlvbi4sUmVjb3JkZWRYY20AAEEGBAAYSQEgSWYgW2BTaG91bGRSZWNvcmRYY21gXSBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgbGFzdCBYQ00gcHJvZ3JhbSBleGVjdXRlZCBsb2NhbGx5VCB3aWxsIGJlIHN0b3JlZCBoZXJlLikBIFJ1bnRpbWUgQVBJcyBjYW4gZmV0Y2ggdGhlIFhDTSB0aGF0IHdhcyBleGVjdXRlZCBieSBhY2Nlc3NpbmcgdGhpcyB2YWx1ZS4AWQEgT25seSByZWxldmFudCBpZiB0aGlzIHBhbGxldCBpcyBiZWluZyB1c2VkIGFzIHRoZSBbYHhjbV9leGVjdXRvcjo6dHJhaXRzOjpSZWNvcmRYY21gXcggaW1wbGVtZW50YXRpb24gaW4gdGhlIFhDTSBleGVjdXRvciBjb25maWd1cmF0aW9uLgGFBQGxBwAB9QxjADBNZXNzYWdlUXVldWUBME1lc3NhZ2VRdWV1ZQwwQm9va1N0YXRlRm9yAQEEBcUG+Qx0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzCBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGFuZCBsYXN0IChub24tZW1wdHkpIHBhZ2VzLixTZXJ2aWNlSGVhZAAAxQYEAAS8IFRoZSBvcmlnaW4gYXQgd2hpY2ggd2Ugc2hvdWxkIGJlZ2luIHNlcnZpY2luZy4UUGFnZXMAAQgFBQUNCQ0EAASIIFRoZSBtYXAgb2YgcGFnZSBpbmRpY2VzIHRvIHBhZ2VzLgHBBgG5BxAgSGVhcFNpemUQEAAAAQAUPQEgVGhlIHNpemUgb2YgdGhlIHBhZ2U7IHRoaXMgaW1wbGllcyB0aGUgbWF4aW11bSBtZXNzYWdlIHNpemUgd2hpY2ggY2FuIGJlIHNlbnQuAFkBIEEgZ29vZCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBleHBlY3RlZCBtZXNzYWdlIHNpemVzLCB0aGVpciB3ZWlnaHRzLCB0aGUgd2VpZ2h0IHRoYXQgaXNdASBhdmFpbGFibGUgZm9yIHByb2Nlc3NpbmcgdGhlbSBhbmQgdGhlIG1heGltYWwgbmVlZGVkIG1lc3NhZ2Ugc2l6ZS4gVGhlIG1heGltYWwgbWVzc2FnZREBIHNpemUgaXMgc2xpZ2h0bHkgbG93ZXIgdGhhbiB0aGlzIGFzIGRlZmluZWQgYnkgW2BNYXhNZXNzYWdlTGVuT2ZgXS4gTWF4U3RhbGUQEAgAAAAMXQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0YWxlIHBhZ2VzIChpLmUuIG9mIG92ZXJ3ZWlnaHQgbWVzc2FnZXMpIGFsbG93ZWQgYmVmb3JlIGN1bGxpbmdRASBjYW4gaGFwcGVuLiBPbmNlIHRoZXJlIGFyZSBtb3JlIHN0YWxlIHBhZ2VzIHRoYW4gdGhpcywgdGhlbiBoaXN0b3JpY2FsIHBhZ2VzIG1heSBiZfwgZHJvcHBlZCwgZXZlbiBpZiB0aGV5IGNvbnRhaW4gdW5wcm9jZXNzZWQgb3ZlcndlaWdodCBtZXNzYWdlcy40U2VydmljZVdlaWdodBEHQAEHAKDbIV0TMzMzMzMzMzMYQQEgVGhlIGFtb3VudCBvZiB3ZWlnaHQgKGlmIGFueSkgd2hpY2ggc2hvdWxkIGJlIHByb3ZpZGVkIHRvIHRoZSBtZXNzYWdlIHF1ZXVlIGZvcqggc2VydmljaW5nIGVucXVldWVkIGl0ZW1zIGBvbl9pbml0aWFsaXplYC4A/CBUaGlzIG1heSBiZSBsZWdpdGltYXRlbHkgYE5vbmVgIGluIHRoZSBjYXNlIHRoYXQgeW91IHdpbGwgY2FsbF0BIGBTZXJ2aWNlUXVldWVzOjpzZXJ2aWNlX3F1ZXVlc2AgbWFudWFsbHkgb3Igc2V0IFtgU2VsZjo6SWRsZU1heFNlcnZpY2VXZWlnaHRgXSB0byBoYXZlVCBpdCBydW4gaW4gYG9uX2lkbGVgLlBJZGxlTWF4U2VydmljZVdlaWdodBEHQAEHAKDbIV0TMzMzMzMzMzMUXQEgVGhlIG1heGltdW0gYW1vdW50IG9mIHdlaWdodCAoaWYgYW55KSB0byBiZSB1c2VkIGZyb20gcmVtYWluaW5nIHdlaWdodCBgb25faWRsZWAgd2hpY2hBASBzaG91bGQgYmUgcHJvdmlkZWQgdG8gdGhlIG1lc3NhZ2UgcXVldWUgZm9yIHNlcnZpY2luZyBlbnF1ZXVlZCBpdGVtcyBgb25faWRsZWAuPQEgVXNlZnVsIGZvciBwYXJhY2hhaW5zIHRvIHByb2Nlc3MgbWVzc2FnZXMgYXQgdGhlIHNhbWUgYmxvY2sgdGhleSBhcmUgcmVjZWl2ZWQuACkBIElmIGBOb25lYCwgaXQgd2lsbCBub3QgY2FsbCBgU2VydmljZVF1ZXVlczo6c2VydmljZV9xdWV1ZXNgIGluIGBvbl9pZGxlYC4BEQ1kACRBc3NldFJhdGUBJEFzc2V0UmF0ZQRYQ29udmVyc2lvblJhdGVUb05hdGl2ZQABBALc0QYEAAwdASBNYXBzIGFuIGFzc2V0IHRvIGl0cyBmaXhlZCBwb2ludCByZXByZXNlbnRhdGlvbiBpbiB0aGUgbmF0aXZlIGJhbGFuY2UuAE0BIEUuZy4gYG5hdGl2ZV9hbW91bnQgPSBhc3NldF9hbW91bnQgKiBDb252ZXJzaW9uUmF0ZVRvTmF0aXZlOjo8VD46OmdldChhc3NldF9raW5kKWABzQYBwQcAARUNZQAUQmVlZnkBFEJlZWZ5FCxBdXRob3JpdGllcwEAGQ0EAARwIFRoZSBjdXJyZW50IGF1dGhvcml0aWVzIHNldDhWYWxpZGF0b3JTZXRJZAEAMCAAAAAAAAAAAAR0IFRoZSBjdXJyZW50IHZhbGlkYXRvciBzZXQgaWQ8TmV4dEF1dGhvcml0aWVzAQAZDQQABOwgQXV0aG9yaXRpZXMgc2V0IHNjaGVkdWxlZCB0byBiZSB1c2VkIHdpdGggdGhlIG5leHQgc2Vzc2lvbjBTZXRJZFNlc3Npb24AAQQFMBAEAChRASBBIG1hcHBpbmcgZnJvbSBCRUVGWSBzZXQgSUQgdG8gdGhlIGluZGV4IG9mIHRoZSAqbW9zdCByZWNlbnQqIHNlc3Npb24gZm9yIHdoaWNoIGl0c2ggbWVtYmVycyB3ZXJlIHJlc3BvbnNpYmxlLgBFASBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgdmFsaWRhdGluZyBlcXVpdm9jYXRpb24gcHJvb2ZzLiBBbiBlcXVpdm9jYXRpb24gcHJvb2YgbXVzdE0BIGNvbnRhaW5zIGEga2V5LW93bmVyc2hpcCBwcm9vZiBmb3IgYSBnaXZlbiBzZXNzaW9uLCB0aGVyZWZvcmUgd2UgbmVlZCBhIHdheSB0byB0aWU9ASB0b2dldGhlciBzZXNzaW9ucyBhbmQgQkVFRlkgc2V0IGlkcywgaS5lLiB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoYXQgYSB2YWxpZGF0b3JBASB3YXMgdGhlIG93bmVyIG9mIGEgZ2l2ZW4ga2V5IG9uIGEgZ2l2ZW4gc2Vzc2lvbiwgYW5kIHdoYXQgdGhlIGFjdGl2ZSBzZXQgSUQgd2FzVCBkdXJpbmcgdGhhdCBzZXNzaW9uLgDcIFRXT1gtTk9URTogYFZhbGlkYXRvclNldElkYCBpcyBub3QgdW5kZXIgdXNlciBjb250cm9sLjBHZW5lc2lzQmxvY2sBAGECBAAM3CBCbG9jayBudW1iZXIgd2hlcmUgQkVFRlkgY29uc2Vuc3VzIGlzIGVuYWJsZWQvc3RhcnRlZC5pASBCeSBjaGFuZ2luZyB0aGlzICh0aHJvdWdoIHByaXZpbGVnZWQgYHNldF9uZXdfZ2VuZXNpcygpYCksIEJFRUZZIGNvbnNlbnN1cyBpcyBlZmZlY3RpdmVseawgcmVzdGFydGVkIGZyb20gdGhlIG5ld2x5IHNldCBibG9jayBudW1iZXIuAdUGAAw4TWF4QXV0aG9yaXRpZXMQEKCGAQAE1CBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXV0aG9yaXRpZXMgdGhhdCBjYW4gYmUgYWRkZWQuNE1heE5vbWluYXRvcnMQEAACAAAE1CBUaGUgbWF4aW11bSBudW1iZXIgb2Ygbm9taW5hdG9ycyBmb3IgZWFjaCB2YWxpZGF0b3IuWE1heFNldElkU2Vzc2lvbkVudHJpZXMwIKgAAAAAAAAAGDkBIFRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIHRvIGtlZXAgaW4gdGhlIHNldCBpZCB0byBzZXNzaW9uIGluZGV4IG1hcHBpbmcuADEBIFNpbmNlIHRoZSBgU2V0SWRTZXNzaW9uYCBtYXAgaXMgb25seSB1c2VkIGZvciB2YWxpZGF0aW5nIGVxdWl2b2NhdGlvbnMgdGhpcykBIHZhbHVlIHNob3VsZCByZWxhdGUgdG8gdGhlIGJvbmRpbmcgZHVyYXRpb24gb2Ygd2hhdGV2ZXIgc3Rha2luZyBzeXN0ZW0gaXM1ASBiZWluZyB1c2VkIChpZiBhbnkpLiBJZiBlcXVpdm9jYXRpb24gaGFuZGxpbmcgaXMgbm90IGVuYWJsZWQgdGhlbiB0aGlzIHZhbHVlNCBjYW4gYmUgemVyby4BIQ3IAAxNbXIBDE1tcgwgUm9vdEhhc2gBADSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWCBMYXRlc3QgTU1SIFJvb3QgaGFzaC44TnVtYmVyT2ZMZWF2ZXMBADAgAAAAAAAAAAAEsCBDdXJyZW50IHNpemUgb2YgdGhlIE1NUiAobnVtYmVyIG9mIGxlYXZlcykuFE5vZGVzAAEEBjA0BAAQgCBIYXNoZXMgb2YgdGhlIG5vZGVzIGluIHRoZSBNTVIuAC0BIE5vdGUgdGhpcyBjb2xsZWN0aW9uIG9ubHkgY29udGFpbnMgTU1SIHBlYWtzLCB0aGUgaW5uZXIgbm9kZXMgKGFuZCBsZWF2ZXMpvCBhcmUgcHJ1bmVkIGFuZCBvbmx5IHN0b3JlZCBpbiB0aGUgT2ZmY2hhaW4gREIuAAAAAMkAMEJlZWZ5TW1yTGVhZgEwQmVlZnlNbXJMZWFmCEBCZWVmeUF1dGhvcml0aWVzAQAlDbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASgIERldGFpbHMgb2YgY3VycmVudCBCRUVGWSBhdXRob3JpdHkgc2V0LlBCZWVmeU5leHRBdXRob3JpdGllcwEAJQ2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMlCBEZXRhaWxzIG9mIG5leHQgQkVFRlkgYXV0aG9yaXR5IHNldC4AUQEgVGhpcyBzdG9yYWdlIGVudHJ5IGlzIHVzZWQgYXMgY2FjaGUgZm9yIGNhbGxzIHRvIGB1cGRhdGVfYmVlZnlfbmV4dF9hdXRob3JpdHlfc2V0YC4AAAAAygAExQF1AVUFKQ0oSENoZWNrTm9uWmVyb1NlbmRlci0NjEBDaGVja1NwZWNWZXJzaW9uMQ0QOENoZWNrVHhWZXJzaW9uNQ0QMENoZWNrR2VuZXNpczkNNDhDaGVja01vcnRhbGl0eT0NNChDaGVja05vbmNlRQ2MLENoZWNrV2VpZ2h0SQ2MYENoYXJnZVRyYW5zYWN0aW9uUGF5bWVudE0NjEhQcmV2YWxpZGF0ZUF0dGVzdHNRDYxEQ2hlY2tNZXRhZGF0YUhhc2hVDYRdDVwkSW5mbGF0aW9uBJhleHBlcmltZW50YWxfaW5mbGF0aW9uX3ByZWRpY3Rpb25faW5mbwBhDRDYIFJldHVybiB0aGUgY3VycmVudCBlc3RpbWF0ZXMgb2YgdGhlIGluZmxhdGlvbiBhbW91bnQuAFEBIFRoaXMgaXMgbWFya2VkIGFzIGV4cGVyaW1lbnRhbCBpbiBsaWdodCBvZiBSRkMjODkuIE5vbmV0aGVsZXNzLCBpdHMgdXNhZ2UgaXMgaGlnaGx5JQEgcmVjb21tZW5kZWQgb3ZlciB0cnlpbmcgdG8gcmVhZC1zdG9yYWdlLCBvciByZS1jcmVhdGUgdGhlIG9uY2hhaW4gbG9naWMuABBDb3JlDBx2ZXJzaW9uAPEHBJAgUmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGUgcnVudGltZS40ZXhlY3V0ZV9ibG9jawQUYmxvY2tpDYwEZCBFeGVjdXRlIHRoZSBnaXZlbiBibG9jay5AaW5pdGlhbGl6ZV9ibG9jawQYaGVhZGVyoQF1DQRBASBJbml0aWFsaXplIGEgYmxvY2sgd2l0aCB0aGUgZ2l2ZW4gaGVhZGVyIGFuZCByZXR1cm4gdGhlIHJ1bnRpbWUgZXhlY3V0aXZlIG1vZGUuBCEBIFRoZSBgQ29yZWAgcnVudGltZSBhcGkgdGhhdCBldmVyeSBTdWJzdHJhdGUgcnVudGltZSBuZWVkcyB0byBpbXBsZW1lbnQuIE1ldGFkYXRhDCBtZXRhZGF0YQB5DQSMIFJldHVybnMgdGhlIG1ldGFkYXRhIG9mIGEgcnVudGltZS5MbWV0YWRhdGFfYXRfdmVyc2lvbgQcdmVyc2lvbhB9DRCkIFJldHVybnMgdGhlIG1ldGFkYXRhIGF0IGEgZ2l2ZW4gdmVyc2lvbi4ABQEgSWYgdGhlIGdpdmVuIGB2ZXJzaW9uYCBpc24ndCBzdXBwb3J0ZWQsIHRoaXMgd2lsbCByZXR1cm4gYE5vbmVgLnUBIFVzZSBbYFNlbGY6Om1ldGFkYXRhX3ZlcnNpb25zYF0gdG8gZmluZCBvdXQgYWJvdXQgc3VwcG9ydGVkIG1ldGFkYXRhIHZlcnNpb24gb2YgdGhlIHJ1bnRpbWUuRG1ldGFkYXRhX3ZlcnNpb25zAOUBDKQgUmV0dXJucyB0aGUgc3VwcG9ydGVkIG1ldGFkYXRhIHZlcnNpb25zLgDAIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2FsbCBgbWV0YWRhdGFfYXRfdmVyc2lvbmAuBAEBIFRoZSBgTWV0YWRhdGFgIGFwaSB0cmFpdCB0aGF0IHJldHVybnMgbWV0YWRhdGEgZm9yIHRoZSBydW50aW1lLjBCbG9ja0J1aWxkZXIQPGFwcGx5X2V4dHJpbnNpYwQkZXh0cmluc2ljbQ2BDRBsIEFwcGx5IHRoZSBnaXZlbiBleHRyaW5zaWMuADkBIFJldHVybnMgYW4gaW5jbHVzaW9uIG91dGNvbWUgd2hpY2ggc3BlY2lmaWVzIGlmIHRoaXMgZXh0cmluc2ljIGlzIGluY2x1ZGVkIGluTCB0aGlzIGJsb2NrIG9yIG5vdC44ZmluYWxpemVfYmxvY2sAoQEEaCBGaW5pc2ggdGhlIGN1cnJlbnQgYmxvY2suTGluaGVyZW50X2V4dHJpbnNpY3MEIGluaGVyZW50kQ1xDQQ9ASBHZW5lcmF0ZSBpbmhlcmVudCBleHRyaW5zaWNzLiBUaGUgaW5oZXJlbnQgZGF0YSB3aWxsIHZhcnkgZnJvbSBjaGFpbiB0byBjaGFpbi48Y2hlY2tfaW5oZXJlbnRzCBRibG9ja2kNEGRhdGGRDaENBFUBIENoZWNrIHRoYXQgdGhlIGluaGVyZW50cyBhcmUgdmFsaWQuIFRoZSBpbmhlcmVudCBkYXRhIHdpbGwgdmFyeSBmcm9tIGNoYWluIHRvIGNoYWluLgRxASBUaGUgYEJsb2NrQnVpbGRlcmAgYXBpIHRyYWl0IHRoYXQgcHJvdmlkZXMgdGhlIHJlcXVpcmVkIGZ1bmN0aW9uYWxpdHkgZm9yIGJ1aWxkaW5nIGEgYmxvY2suSE5vbWluYXRpb25Qb29sc0FwaRw8cGVuZGluZ19yZXdhcmRzBAx3aG8AGAQ1ASBSZXR1cm5zIHRoZSBwZW5kaW5nIHJld2FyZHMgZm9yIHRoZSBtZW1iZXIgdGhhdCB0aGUgQWNjb3VudElkIHdhcyBnaXZlbiBmb3IuRHBvaW50c190b19iYWxhbmNlCBxwb29sX2lkEBhwb2ludHMYGAT0IFJldHVybnMgdGhlIGVxdWl2YWxlbnQgYmFsYW5jZSBvZiBgcG9pbnRzYCBmb3IgYSBnaXZlbiBwb29sLkRiYWxhbmNlX3RvX3BvaW50cwgccG9vbF9pZBAkbmV3X2Z1bmRzGBgE/CBSZXR1cm5zIHRoZSBlcXVpdmFsZW50IHBvaW50cyBvZiBgbmV3X2Z1bmRzYCBmb3IgYSBnaXZlbiBwb29sLkhwb29sX3BlbmRpbmdfc2xhc2gEHHBvb2xfaWQQGASwIFJldHVybnMgdGhlIHBlbmRpbmcgc2xhc2ggZm9yIGEgZ2l2ZW4gcG9vbC5QbWVtYmVyX3BlbmRpbmdfc2xhc2gEGG1lbWJlcgAYBMwgUmV0dXJucyB0aGUgcGVuZGluZyBzbGFzaCBmb3IgYSBnaXZlbiBwb29sIG1lbWJlci50cG9vbF9uZWVkc19kZWxlZ2F0ZV9taWdyYXRpb24EHHBvb2xfaWQQICDkIFJldHVybnMgdHJ1ZSBpZiB0aGUgcG9vbCB3aXRoIGBwb29sX2lkYCBuZWVkcyBtaWdyYXRpb24uAEkBIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHRoZSBgcGFsbGV0LW5vbWluYXRpb24tcG9vbHNgIGhhcyBzd2l0Y2hlZCB0byB1c2luZyBzdHJhdGVneUEBIFtgRGVsZWdhdGVTdGFrZWBdKHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzOjphZGFwdGVyOjpEZWxlZ2F0ZVN0YWtlKSBidXQgdGhlIHBvb2zoIHN0aWxsIGhhcyBmdW5kcyB0aGF0IHdlcmUgc3Rha2VkIHVzaW5nIHRoZSBvbGRlciBzdHJhdGVneRkBIFtUcmFuc2ZlclN0YWtlXShwYWxsZXRfbm9taW5hdGlvbl9wb29sczo6YWRhcHRlcjo6VHJhbnNmZXJTdGFrZSkuIFVzZYkBIFtgbWlncmF0ZV9wb29sX3RvX2RlbGVnYXRlX3N0YWtlYF0ocGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkNhbGw6Om1pZ3JhdGVfcG9vbF90b19kZWxlZ2F0ZV9zdGFrZSlUIHRvIG1pZ3JhdGUgdGhlIHBvb2wufG1lbWJlcl9uZWVkc19kZWxlZ2F0ZV9taWdyYXRpb24EGG1lbWJlcgAgHCkBIFJldHVybnMgdHJ1ZSBpZiB0aGUgZGVsZWdhdGVkIGZ1bmRzIG9mIHRoZSBwb29sIGBtZW1iZXJgIG5lZWRzIG1pZ3JhdGlvbi4A2CBPbmNlIGEgcG9vbCBoYXMgc3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkIHRvIHRoZSBzdHJhdGVneVUBIFtgRGVsZWdhdGVTdGFrZWBdKHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzOjphZGFwdGVyOjpEZWxlZ2F0ZVN0YWtlKSwgdGhlIGZ1bmRzIG9mIHRoZRkBIG1lbWJlciBjYW4gYmUgbWlncmF0ZWQgZnJvbSBwb29sIGFjY291bnQgdG8gdGhlIG1lbWJlcidzIGFjY291bnQuIFVzZSkBIFtgbWlncmF0ZV9kZWxlZ2F0aW9uYF0ocGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkNhbGw6Om1pZ3JhdGVfZGVsZWdhdGlvbimkIHRvIG1pZ3JhdGUgdGhlIGZ1bmRzIG9mIHRoZSBwb29sIG1lbWJlci4E+CBSdW50aW1lIGFwaSBmb3IgYWNjZXNzaW5nIGluZm9ybWF0aW9uIGFib3V0IG5vbWluYXRpb24gcG9vbHMuKFN0YWtpbmdBcGkMRG5vbWluYXRpb25zX3F1b3RhBBxiYWxhbmNlGBAEEQEgUmV0dXJucyB0aGUgbm9taW5hdGlvbnMgcXVvdGEgZm9yIGEgbm9taW5hdG9yIHdpdGggYSBnaXZlbiBiYWxhbmNlLlxlcmFzX3N0YWtlcnNfcGFnZV9jb3VudAgMZXJhEBxhY2NvdW50ABAEOQEgUmV0dXJucyB0aGUgcGFnZSBjb3VudCBvZiBleHBvc3VyZXMgZm9yIGEgdmFsaWRhdG9yIGBhY2NvdW50YCBpbiBhIGdpdmVuIGVyYS48cGVuZGluZ19yZXdhcmRzCAxlcmEQHGFjY291bnQAIAQ9ASBSZXR1cm5zIHRydWUgaWYgdmFsaWRhdG9yIGBhY2NvdW50YCBoYXMgcGFnZXMgdG8gYmUgY2xhaW1lZCBmb3IgdGhlIGdpdmVuIGVyYS4AWFRhZ2dlZFRyYW5zYWN0aW9uUXVldWUEUHZhbGlkYXRlX3RyYW5zYWN0aW9uDBhzb3VyY2WlDQh0eG0NKGJsb2NrX2hhc2g0qQ0kaCBWYWxpZGF0ZSB0aGUgdHJhbnNhY3Rpb24uAGUBIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgYnkgdGhlIHRyYW5zYWN0aW9uIHBvb2wgdG8gbGVhcm4gZGV0YWlscyBhYm91dCBnaXZlbiB0cmFuc2FjdGlvbi5FASBUaGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIG1ha2Ugc3VyZSB0byB2ZXJpZnkgdGhlIGNvcnJlY3RuZXNzIG9mIHRoZSB0cmFuc2FjdGlvbk0BIGFnYWluc3QgY3VycmVudCBzdGF0ZS4gVGhlIGdpdmVuIGBibG9ja19oYXNoYCBjb3JyZXNwb25kcyB0byB0aGUgaGFzaCBvZiB0aGUgYmxvY2t8IHRoYXQgaXMgdXNlZCBhcyBjdXJyZW50IHN0YXRlLgBFASBOb3RlIHRoYXQgdGhpcyBjYWxsIG1heSBiZSBwZXJmb3JtZWQgYnkgdGhlIHBvb2wgbXVsdGlwbGUgdGltZXMgYW5kIHRyYW5zYWN0aW9uc6QgbWlnaHQgYmUgdmVyaWZpZWQgaW4gYW55IHBvc3NpYmxlIG9yZGVyLgRNASBUaGUgYFRhZ2dlZFRyYW5zYWN0aW9uUXVldWVgIGFwaSB0cmFpdCBmb3IgaW50ZXJmZXJpbmcgd2l0aCB0aGUgdHJhbnNhY3Rpb24gcXVldWUuRE9mZmNoYWluV29ya2VyQXBpBDxvZmZjaGFpbl93b3JrZXIEGGhlYWRlcqEBjATIIFN0YXJ0cyB0aGUgb2ZmLWNoYWluIHRhc2sgZm9yIGdpdmVuIGJsb2NrIGhlYWRlci4EZCBUaGUgb2ZmY2hhaW4gd29ya2VyIGFwaS40UGFyYWNoYWluSG9zdHwodmFsaWRhdG9ycwAZCwRwIEdldCB0aGUgY3VycmVudCB2YWxpZGF0b3JzLkB2YWxpZGF0b3JfZ3JvdXBzALENDGUBIFJldHVybnMgdGhlIHZhbGlkYXRvciBncm91cHMgYW5kIHJvdGF0aW9uIGluZm8gbG9jYWxpemVkIGJhc2VkIG9uIHRoZSBoeXBvdGhldGljYWwgY2hpbGRhASAgb2YgYSBibG9jayB3aG9zZSBzdGF0ZSAgdGhpcyBpcyBpbnZva2VkIG9uLiBOb3RlIHRoYXQgYG5vd2AgaW4gdGhlIGBHcm91cFJvdGF0aW9uSW5mb2DQIHNob3VsZCBiZSB0aGUgc3VjY2Vzc29yIG9mIHRoZSBudW1iZXIgb2YgdGhlIGJsb2NrLkhhdmFpbGFiaWxpdHlfY29yZXMAuQ0INQEgWWllbGRzIGluZm9ybWF0aW9uIG9uIGFsbCBhdmFpbGFiaWxpdHkgY29yZXMgYXMgcmVsZXZhbnQgdG8gdGhlIGNoaWxkIGJsb2NrLj0BIENvcmVzIGFyZSBlaXRoZXIgZnJlZSBvciBvY2N1cGllZC4gRnJlZSBjb3JlcyBjYW4gaGF2ZSBwYXJhcyBhc3NpZ25lZCB0byB0aGVtLmRwZXJzaXN0ZWRfdmFsaWRhdGlvbl9kYXRhCBxwYXJhX2lkjQIoYXNzdW1wdGlvbtEN1Q0UaQEgWWllbGRzIHRoZSBwZXJzaXN0ZWQgdmFsaWRhdGlvbiBkYXRhIGZvciB0aGUgZ2l2ZW4gYFBhcmFJZGAgYWxvbmcgd2l0aCBhbiBhc3N1bXB0aW9uIHRoYXTYIHNob3VsZCBiZSB1c2VkIGlmIHRoZSBwYXJhIGN1cnJlbnRseSBvY2N1cGllcyBhIGNvcmUuAEUBIFJldHVybnMgYE5vbmVgIGlmIGVpdGhlciB0aGUgcGFyYSBpcyBub3QgcmVnaXN0ZXJlZCBvciB0aGUgYXNzdW1wdGlvbiBpcyBgRnJlZWRgmCBhbmQgdGhlIHBhcmEgYWxyZWFkeSBvY2N1cGllcyBhIGNvcmUuXGFzc3VtZWRfdmFsaWRhdGlvbl9kYXRhCBxwYXJhX2lkjQKcZXhwZWN0ZWRfcGVyc2lzdGVkX3ZhbGlkYXRpb25fZGF0YV9oYXNoNN0NDGkBIFJldHVybnMgdGhlIHBlcnNpc3RlZCB2YWxpZGF0aW9uIGRhdGEgZm9yIHRoZSBnaXZlbiBgUGFyYUlkYCBhbG9uZyB3aXRoIHRoZSBjb3JyZXNwb25kaW5ndQEgdmFsaWRhdGlvbiBjb2RlIGhhc2guIEluc3RlYWQgb2YgYWNjZXB0aW5nIGFzc3VtcHRpb24gYWJvdXQgdGhlIHBhcmEsIG1hdGNoZXMgdGhlIHZhbGlkYXRpb24pASBkYXRhIGhhc2ggYWdhaW5zdCBhbiBleHBlY3RlZCBvbmUgYW5kIHlpZWxkcyBgTm9uZWAgaWYgdGhleSdyZSBub3QgZXF1YWwuYGNoZWNrX3ZhbGlkYXRpb25fb3V0cHV0cwgccGFyYV9pZI0CHG91dHB1dHO9BCAEFQEgQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWxpZGF0aW9uIG91dHB1dHMgcGFzcyB0aGUgYWNjZXB0YW5jZSBjcml0ZXJpYS5cc2Vzc2lvbl9pbmRleF9mb3JfY2hpbGQAEAzwIFJldHVybnMgdGhlIHNlc3Npb24gaW5kZXggZXhwZWN0ZWQgYXQgYSBjaGlsZCBvZiB0aGUgYmxvY2suANAgVGhpcyBjYW4gYmUgdXNlZCB0byBpbnN0YW50aWF0ZSBhIGBTaWduaW5nQ29udGV4dGAuPHZhbGlkYXRpb25fY29kZQgccGFyYV9pZI0CKGFzc3VtcHRpb27RDdEEEFUBIEZldGNoIHRoZSB2YWxpZGF0aW9uIGNvZGUgdXNlZCBieSBhIHBhcmEsIG1ha2luZyB0aGUgZ2l2ZW4gYE9jY3VwaWVkQ29yZUFzc3VtcHRpb25gLgBFASBSZXR1cm5zIGBOb25lYCBpZiBlaXRoZXIgdGhlIHBhcmEgaXMgbm90IHJlZ2lzdGVyZWQgb3IgdGhlIGFzc3VtcHRpb24gaXMgYEZyZWVkYJggYW5kIHRoZSBwYXJhIGFscmVhZHkgb2NjdXBpZXMgYSBjb3JlLnhjYW5kaWRhdGVfcGVuZGluZ19hdmFpbGFiaWxpdHkEHHBhcmFfaWSNAuUNCF0BIEdldCB0aGUgcmVjZWlwdCBvZiBhIGNhbmRpZGF0ZSBwZW5kaW5nIGF2YWlsYWJpbGl0eS4gVGhpcyByZXR1cm5zIGBTb21lYCBmb3IgYW55IHBhcmFzJQEgYXNzaWduZWQgdG8gb2NjdXBpZWQgY29yZXMgaW4gYGF2YWlsYWJpbGl0eV9jb3Jlc2AgYW5kIGBOb25lYCBvdGhlcndpc2UuQGNhbmRpZGF0ZV9ldmVudHMA6Q0ELQEgR2V0IGEgdmVjdG9yIG9mIGV2ZW50cyBjb25jZXJuaW5nIGNhbmRpZGF0ZXMgdGhhdCBvY2N1cnJlZCB3aXRoaW4gYSBibG9jay4wZG1xX2NvbnRlbnRzBCRyZWNpcGllbnSNArkLBD0BIEdldCBhbGwgdGhlIHBlbmRpbmcgaW5ib3VuZCBtZXNzYWdlcyBpbiB0aGUgZG93bndhcmQgbWVzc2FnZSBxdWV1ZSBmb3IgYSBwYXJhLnhpbmJvdW5kX2hybXBfY2hhbm5lbHNfY29udGVudHMEJHJlY2lwaWVudI0C8Q0IZQEgR2V0IHRoZSBjb250ZW50cyBvZiBhbGwgY2hhbm5lbHMgYWRkcmVzc2VkIHRvIHRoZSBnaXZlbiByZWNpcGllbnQuIENoYW5uZWxzIHRoYXQgaGF2ZSBub5AgbWVzc2FnZXMgaW4gdGhlbSBhcmUgYWxzbyBpbmNsdWRlZC5cdmFsaWRhdGlvbl9jb2RlX2J5X2hhc2gEEGhhc2i5BNEEBJwgR2V0IHRoZSB2YWxpZGF0aW9uIGNvZGUgZnJvbSBpdHMgaGFzaC44b25fY2hhaW5fdm90ZXMA/Q0EMQEgU2NyYXBlIGRpc3B1dGUgcmVsZXZhbnQgZnJvbSBvbi1jaGFpbiwgYmFja2luZyB2b3RlcyBhbmQgcmVzb2x2ZWQgZGlzcHV0ZXMuMHNlc3Npb25faW5mbwQUaW5kZXgQAQ4M3CBHZXQgdGhlIHNlc3Npb24gaW5mbyBmb3IgdGhlIGdpdmVuIHNlc3Npb24sIGlmIHN0b3JlZC4AGQEgTk9URTogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBzaW5jZSBwYXJhY2hhaW4gaG9zdCB2ZXJzaW9uIDIuaHN1Ym1pdF9wdmZfY2hlY2tfc3RhdGVtZW50CBBzdG10DQUkc2lnbmF0dXJlnQSMDAEBIFN1Ym1pdHMgYSBQVkYgcHJlLWNoZWNraW5nIHN0YXRlbWVudCBpbnRvIHRoZSB0cmFuc2FjdGlvbiBwb29sLgAZASBOT1RFOiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHNpbmNlIHBhcmFjaGFpbiBob3N0IHZlcnNpb24gMi5UcHZmc19yZXF1aXJlX3ByZWNoZWNrAIELDF0BIFJldHVybnMgY29kZSBoYXNoZXMgb2YgUFZGcyB0aGF0IHJlcXVpcmUgcHJlLWNoZWNraW5nIGJ5IHZhbGlkYXRvcnMgaW4gdGhlIGFjdGl2ZSBzZXQuABkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiAyLlB2YWxpZGF0aW9uX2NvZGVfaGFzaAgccGFyYV9pZI0CKGFzc3VtcHRpb27RDQUODIUBIEZldGNoIHRoZSBoYXNoIG9mIHRoZSB2YWxpZGF0aW9uIGNvZGUgdXNlZCBieSBhIHBhcmEsIG1ha2luZyB0aGUgZ2l2ZW4gYE9jY3VwaWVkQ29yZUFzc3VtcHRpb25gLgAZASBOT1RFOiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHNpbmNlIHBhcmFjaGFpbiBob3N0IHZlcnNpb24gMi4gZGlzcHV0ZXMACQ4EeCBSZXR1cm5zIGFsbCBvbmNoYWluIGRpc3B1dGVzLlxzZXNzaW9uX2V4ZWN1dG9yX3BhcmFtcwQ0c2Vzc2lvbl9pbmRleBARDgS4IFJldHVybnMgZXhlY3V0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBzZXNzaW9uLkR1bmFwcGxpZWRfc2xhc2hlcwAVDghZASBSZXR1cm5zIGEgbGlzdCBvZiB2YWxpZGF0b3JzIHRoYXQgbG9zdCBhIHBhc3Qgc2Vzc2lvbiBkaXNwdXRlIGFuZCBuZWVkIHRvIGJlIHNsYXNoZWQuGQEgTk9URTogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBzaW5jZSBwYXJhY2hhaW4gaG9zdCB2ZXJzaW9uIDUuTGtleV9vd25lcnNoaXBfcHJvb2YEMHZhbGlkYXRvcl9pZB0CHQ4IzCBSZXR1cm5zIGEgbWVya2xlIHByb29mIG9mIGEgdmFsaWRhdG9yIHNlc3Npb24ga2V5LhkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiA1LmhzdWJtaXRfcmVwb3J0X2Rpc3B1dGVfbG9zdAg0ZGlzcHV0ZV9wcm9vZiUFTGtleV9vd25lcnNoaXBfcHJvb2YhDiUODCkBIFN1Ym1pdCBhbiB1bnNpZ25lZCBleHRyaW5zaWMgdG8gc2xhc2ggdmFsaWRhdG9ycyB3aG8gbG9zdCBhIGRpc3B1dGUgYWJvdXR8IGEgY2FuZGlkYXRlIG9mIGEgcGFzdCBzZXNzaW9uLhkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiA1LlRtaW5pbXVtX2JhY2tpbmdfdm90ZXMAEAgNASBHZXQgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGJhY2tpbmcgdm90ZXMgZm9yIGEgcGFyYWNoYWluIGNhbmRpZGF0ZS70IFRoaXMgaXMgYSBzdGFnaW5nIG1ldGhvZCEgRG8gbm90IHVzZSBvbiBwcm9kdWN0aW9uIHJ1bnRpbWVzIUhwYXJhX2JhY2tpbmdfc3RhdGUEBF+NAikOBOQgUmV0dXJucyB0aGUgc3RhdGUgb2YgcGFyYWNoYWluIGJhY2tpbmcgZm9yIGEgZ2l2ZW4gcGFyYS5QYXN5bmNfYmFja2luZ19wYXJhbXMAVQQEYQEgUmV0dXJucyBjYW5kaWRhdGUncyBhY2NlcHRhbmNlIGxpbWl0YXRpb25zIGZvciBhc3luY2hyb25vdXMgYmFja2luZyBmb3IgYSByZWxheSBwYXJlbnQuTGRpc2FibGVkX3ZhbGlkYXRvcnMAFQsE+CBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgZGlzYWJsZWQgdmFsaWRhdG9ycyBhdCB0aGUgZ2l2ZW4gYmxvY2suNG5vZGVfZmVhdHVyZXMAkQQITCBHZXQgbm9kZSBmZWF0dXJlcy70IFRoaXMgaXMgYSBzdGFnaW5nIG1ldGhvZCEgRG8gbm90IHVzZSBvbiBwcm9kdWN0aW9uIHJ1bnRpbWVzIVhhcHByb3ZhbF92b3RpbmdfcGFyYW1zAG0EBKQgQXBwcm92YWwgdm90aW5nIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyxjbGFpbV9xdWV1ZQBZDgQwIENsYWltIHF1ZXVlfGNhbmRpZGF0ZXNfcGVuZGluZ19hdmFpbGFiaWxpdHkEHHBhcmFfaWSNAmUOBGAgRWxhc3RpYyBzY2FsaW5nIHN1cHBvcnQE3CBUaGUgQVBJIGZvciBxdWVyeWluZyB0aGUgc3RhdGUgb2YgcGFyYWNoYWlucyBvbi1jaGFpbi4gQmVlZnlBcGkQNGJlZWZ5X2dlbmVzaXMAYQIEBQEgUmV0dXJuIHRoZSBibG9jayBudW1iZXIgd2hlcmUgQkVFRlkgY29uc2Vuc3VzIGlzIGVuYWJsZWQvc3RhcnRlZDR2YWxpZGF0b3Jfc2V0AGkOBLggUmV0dXJuIHRoZSBjdXJyZW50IGFjdGl2ZSBCRUVGWSB2YWxpZGF0b3Igc2V0tHN1Ym1pdF9yZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29m2QY8a2V5X293bmVyX3Byb29mcQ4lDiARASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYW4gZXF1aXZvY2F0aW9uLiBUaGUgY2FsbGVy+CBtdXN0IHByb3ZpZGUgdGhlIGVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgYSBrZXkgb3duZXJzaGlwIHByb29m/CAoc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nIGBnZW5lcmF0ZV9rZXlfb3duZXJzaGlwX3Byb29mYCkuIFRoZQUBIGV4dHJpbnNpYyB3aWxsIGJlIHVuc2lnbmVkIGFuZCBzaG91bGQgb25seSBiZSBhY2NlcHRlZCBmb3IgbG9jYWwVASBhdXRob3JzaGlwIChub3QgdG8gYmUgYnJvYWRjYXN0IHRvIHRoZSBuZXR3b3JrKS4gVGhpcyBtZXRob2QgcmV0dXJucwkBIGBOb25lYCB3aGVuIGNyZWF0aW9uIG9mIHRoZSBleHRyaW5zaWMgZmFpbHMsIGUuZy4gaWYgZXF1aXZvY2F0aW9uBQEgcmVwb3J0aW5nIGlzIGRpc2FibGVkIGZvciB0aGUgZ2l2ZW4gcnVudGltZSAoaS5lLiB0aGlzIG1ldGhvZCBpcwUBIGhhcmRjb2RlZCB0byByZXR1cm4gYE5vbmVgKS4gT25seSB1c2VmdWwgaW4gYW4gb2ZmY2hhaW4gY29udGV4dC5wZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZggYc2V0X2lkMDBhdXRob3JpdHlfaWQpAnUOLAkBIEdlbmVyYXRlcyBhIHByb29mIG9mIGtleSBvd25lcnNoaXAgZm9yIHRoZSBnaXZlbiBhdXRob3JpdHkgaW4gdGhl/CBnaXZlbiBzZXQuIEFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhpcyBtb2R1bGUgaXMgY291cGxlZCB3aXRoIHRoZQUBIHNlc3Npb24gaGlzdG9yaWNhbCBtb2R1bGUgdG8gcHJvdmUgdGhhdCBhIGdpdmVuIGF1dGhvcml0eSBrZXkgaXMNASB0aWVkIHRvIGEgZ2l2ZW4gc3Rha2luZyBpZGVudGl0eSBkdXJpbmcgYSBzcGVjaWZpYyBzZXNzaW9uLiBQcm9vZnMRASBvZiBrZXkgb3duZXJzaGlwIGFyZSBuZWNlc3NhcnkgZm9yIHN1Ym1pdHRpbmcgZXF1aXZvY2F0aW9uIHJlcG9ydHMuEQEgTk9URTogZXZlbiB0aG91Z2ggdGhlIEFQSSB0YWtlcyBhIGBzZXRfaWRgIGFzIHBhcmFtZXRlciB0aGUgY3VycmVudAkBIGltcGxlbWVudGF0aW9ucyBpZ25vcmVzIHRoaXMgcGFyYW1ldGVyIGFuZCBpbnN0ZWFkIHJlbGllcyBvbiB0aGlzDQEgbWV0aG9kIGJlaW5nIGNhbGxlZCBhdCB0aGUgY29ycmVjdCBibG9jayBoZWlnaHQsIGkuZS4gYW55IHBvaW50IGF0FQEgd2hpY2ggdGhlIGdpdmVuIHNldCBpZCBpcyBsaXZlIG9uLWNoYWluLiBGdXR1cmUgaW1wbGVtZW50YXRpb25zIHdpbGwNASBpbnN0ZWFkIHVzZSBpbmRleGVkIGRhdGEgdGhyb3VnaCBhbiBvZmZjaGFpbiB3b3JrZXIsIG5vdCByZXF1aXJpbmd4IG9sZGVyIHN0YXRlcyB0byBiZSBhdmFpbGFibGUuBIAgQVBJIG5lY2Vzc2FyeSBmb3IgQkVFRlkgdm90ZXJzLhhNbXJBcGkUIG1tcl9yb290AHkOBIwgUmV0dXJuIHRoZSBvbi1jaGFpbiBNTVIgcm9vdCBoYXNoLjhtbXJfbGVhZl9jb3VudACBDgS4IFJldHVybiB0aGUgbnVtYmVyIG9mIE1NUiBibG9ja3MgaW4gdGhlIGNoYWluLjhnZW5lcmF0ZV9wcm9vZgg0YmxvY2tfbnVtYmVyc+UBXGJlc3Rfa25vd25fYmxvY2tfbnVtYmVyYQKFDghpASBHZW5lcmF0ZSBNTVIgcHJvb2YgZm9yIGEgc2VyaWVzIG9mIGJsb2NrIG51bWJlcnMuIElmIGBiZXN0X2tub3duX2Jsb2NrX251bWJlciA9IFNvbWUobilgLEUBIHVzZSBoaXN0b3JpY2FsIE1NUiBzdGF0ZSBhdCBnaXZlbiBibG9jayBoZWlnaHQgYG5gLiBFbHNlLCB1c2UgY3VycmVudCBNTVIgc3RhdGUuMHZlcmlmeV9wcm9vZggYbGVhdmVzjQ4UcHJvb2aVDpkOFPQgVmVyaWZ5IE1NUiBwcm9vZiBhZ2FpbnN0IG9uLWNoYWluIE1NUiBmb3IgYSBiYXRjaCBvZiBsZWF2ZXMuAHEBIE5vdGUgdGhpcyBmdW5jdGlvbiB3aWxsIHVzZSBvbi1jaGFpbiBNTVIgcm9vdCBoYXNoIGFuZCBjaGVjayBpZiB0aGUgcHJvb2YgbWF0Y2hlcyB0aGUgaGFzaC5tASBOb3RlLCB0aGUgbGVhdmVzIHNob3VsZCBiZSBzb3J0ZWQgc3VjaCB0aGF0IGNvcnJlc3BvbmRpbmcgbGVhdmVzIGFuZCBsZWFmIGluZGljZXMgaGF2ZSB0aGWVASBzYW1lIHBvc2l0aW9uIGluIGJvdGggdGhlIGBsZWF2ZXNgIHZlY3RvciBhbmQgdGhlIGBsZWFmX2luZGljZXNgIHZlY3RvciBjb250YWluZWQgaW4gdGhlIFtMZWFmUHJvb2ZdWHZlcmlmeV9wcm9vZl9zdGF0ZWxlc3MMEHJvb3Q0GGxlYXZlc40OFHByb29mlQ6ZDhwBASBWZXJpZnkgTU1SIHByb29mIGFnYWluc3QgZ2l2ZW4gcm9vdCBoYXNoIGZvciBhIGJhdGNoIG9mIGxlYXZlcy4A/CBOb3RlIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgcmVxdWlyZSBhbnkgb24tY2hhaW4gc3RvcmFnZSAtIHRoZbwgcHJvb2YgaXMgdmVyaWZpZWQgYWdhaW5zdCBnaXZlbiBNTVIgcm9vdCBoYXNoLgBtASBOb3RlLCB0aGUgbGVhdmVzIHNob3VsZCBiZSBzb3J0ZWQgc3VjaCB0aGF0IGNvcnJlc3BvbmRpbmcgbGVhdmVzIGFuZCBsZWFmIGluZGljZXMgaGF2ZSB0aGWVASBzYW1lIHBvc2l0aW9uIGluIGJvdGggdGhlIGBsZWF2ZXNgIHZlY3RvciBhbmQgdGhlIGBsZWFmX2luZGljZXNgIHZlY3RvciBjb250YWluZWQgaW4gdGhlIFtMZWFmUHJvb2ZdBIQgQVBJIHRvIGludGVyYWN0IHdpdGggTU1SIHBhbGxldC4sQmVlZnlNbXJBcGkITGF1dGhvcml0eV9zZXRfcHJvb2YAJQ0E3CBSZXR1cm4gdGhlIGN1cnJlbnRseSBhY3RpdmUgQkVFRlkgYXV0aG9yaXR5IHNldCBwcm9vZi5gbmV4dF9hdXRob3JpdHlfc2V0X3Byb29mACUNBMggUmV0dXJuIHRoZSBuZXh0L3F1ZXVlZCBCRUVGWSBhdXRob3JpdHkgc2V0IHByb29mLgSQIEFQSSB1c2VmdWwgZm9yIEJFRUZZIGxpZ2h0IGNsaWVudHMuKEdyYW5kcGFBcGkQTGdyYW5kcGFfYXV0aG9yaXRpZXMAzBg9ASBHZXQgdGhlIGN1cnJlbnQgR1JBTkRQQSBhdXRob3JpdGllcyBhbmQgd2VpZ2h0cy4gVGhpcyBzaG91bGQgbm90IGNoYW5nZSBleGNlcHQdASBmb3Igd2hlbiBjaGFuZ2VzIGFyZSBzY2hlZHVsZWQgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGRlbGF5IGhhcyBwYXNzZWQuADUBIFdoZW4gY2FsbGVkIGF0IGJsb2NrIEIsIGl0IHdpbGwgcmV0dXJuIHRoZSBzZXQgb2YgYXV0aG9yaXRpZXMgdGhhdCBzaG91bGQgYmU9ASB1c2VkIHRvIGZpbmFsaXplIGRlc2NlbmRhbnRzIG9mIHRoaXMgYmxvY2sgKEIrMSwgQisyLCAuLi4pLiBUaGUgYmxvY2sgQiBpdHNlbGbAIGlzIGZpbmFsaXplZCBieSB0aGUgYXV0aG9yaXRpZXMgZnJvbSBibG9jayBCLTEutHN1Ym1pdF9yZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29mNQI8a2V5X293bmVyX3Byb29mcQ4lDiARASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYW4gZXF1aXZvY2F0aW9uLiBUaGUgY2FsbGVy+CBtdXN0IHByb3ZpZGUgdGhlIGVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgYSBrZXkgb3duZXJzaGlwIHByb29m/CAoc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nIGBnZW5lcmF0ZV9rZXlfb3duZXJzaGlwX3Byb29mYCkuIFRoZQUBIGV4dHJpbnNpYyB3aWxsIGJlIHVuc2lnbmVkIGFuZCBzaG91bGQgb25seSBiZSBhY2NlcHRlZCBmb3IgbG9jYWwVASBhdXRob3JzaGlwIChub3QgdG8gYmUgYnJvYWRjYXN0IHRvIHRoZSBuZXR3b3JrKS4gVGhpcyBtZXRob2QgcmV0dXJucwkBIGBOb25lYCB3aGVuIGNyZWF0aW9uIG9mIHRoZSBleHRyaW5zaWMgZmFpbHMsIGUuZy4gaWYgZXF1aXZvY2F0aW9uBQEgcmVwb3J0aW5nIGlzIGRpc2FibGVkIGZvciB0aGUgZ2l2ZW4gcnVudGltZSAoaS5lLiB0aGlzIG1ldGhvZCBpcwUBIGhhcmRjb2RlZCB0byByZXR1cm4gYE5vbmVgKS4gT25seSB1c2VmdWwgaW4gYW4gb2ZmY2hhaW4gY29udGV4dC5wZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZggYc2V0X2lkMDBhdXRob3JpdHlfaWTUdQ4sCQEgR2VuZXJhdGVzIGEgcHJvb2Ygb2Yga2V5IG93bmVyc2hpcCBmb3IgdGhlIGdpdmVuIGF1dGhvcml0eSBpbiB0aGX8IGdpdmVuIHNldC4gQW4gZXhhbXBsZSB1c2FnZSBvZiB0aGlzIG1vZHVsZSBpcyBjb3VwbGVkIHdpdGggdGhlBQEgc2Vzc2lvbiBoaXN0b3JpY2FsIG1vZHVsZSB0byBwcm92ZSB0aGF0IGEgZ2l2ZW4gYXV0aG9yaXR5IGtleSBpcw0BIHRpZWQgdG8gYSBnaXZlbiBzdGFraW5nIGlkZW50aXR5IGR1cmluZyBhIHNwZWNpZmljIHNlc3Npb24uIFByb29mcxEBIG9mIGtleSBvd25lcnNoaXAgYXJlIG5lY2Vzc2FyeSBmb3Igc3VibWl0dGluZyBlcXVpdm9jYXRpb24gcmVwb3J0cy4RASBOT1RFOiBldmVuIHRob3VnaCB0aGUgQVBJIHRha2VzIGEgYHNldF9pZGAgYXMgcGFyYW1ldGVyIHRoZSBjdXJyZW50/CBpbXBsZW1lbnRhdGlvbnMgaWdub3JlIHRoaXMgcGFyYW1ldGVyIGFuZCBpbnN0ZWFkIHJlbHkgb24gdGhpcw0BIG1ldGhvZCBiZWluZyBjYWxsZWQgYXQgdGhlIGNvcnJlY3QgYmxvY2sgaGVpZ2h0LCBpLmUuIGFueSBwb2ludCBhdBUBIHdoaWNoIHRoZSBnaXZlbiBzZXQgaWQgaXMgbGl2ZSBvbi1jaGFpbi4gRnV0dXJlIGltcGxlbWVudGF0aW9ucyB3aWxsDQEgaW5zdGVhZCB1c2UgaW5kZXhlZCBkYXRhIHRocm91Z2ggYW4gb2ZmY2hhaW4gd29ya2VyLCBub3QgcmVxdWlyaW5neCBvbGRlciBzdGF0ZXMgdG8gYmUgYXZhaWxhYmxlLjhjdXJyZW50X3NldF9pZAAwBJggR2V0IGN1cnJlbnQgR1JBTkRQQSBhdXRob3JpdHkgc2V0IGlkLiQBASBBUElzIGZvciBpbnRlZ3JhdGluZyB0aGUgR1JBTkRQQSBmaW5hbGl0eSBnYWRnZXQgaW50byBydW50aW1lcy7AIFRoaXMgc2hvdWxkIGJlIGltcGxlbWVudGVkIG9uIHRoZSBydW50aW1lIHNpZGUuABUBIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgZm9yIG5lZ290aWF0aW5nIGF1dGhvcml0eS1zZXQgY2hhbmdlcyBmb3IgdGhlDQEgZ2FkZ2V0LiBHUkFORFBBIHVzZXMgYSBzaWduYWxpbmcgbW9kZWwgb2YgY2hhbmdpbmcgYXV0aG9yaXR5IHNldHM6MQEgY2hhbmdlcyBzaG91bGQgYmUgc2lnbmFsZWQgd2l0aCBhIGRlbGF5IG9mIE4gYmxvY2tzLCBhbmQgdGhlbiBhdXRvbWF0aWNhbGx55CBhcHBsaWVkIGluIHRoZSBydW50aW1lIGFmdGVyIHRob3NlIE4gYmxvY2tzIGhhdmUgcGFzc2VkLgD8IFRoZSBjb25zZW5zdXMgcHJvdG9jb2wgd2lsbCBjb29yZGluYXRlIHRoZSBoYW5kb2ZmIGV4dGVybmFsbHkuHEJhYmVBcGkYNGNvbmZpZ3VyYXRpb24AnQ4EjCBSZXR1cm4gdGhlIGNvbmZpZ3VyYXRpb24gZm9yIEJBQkUuTGN1cnJlbnRfZXBvY2hfc3RhcnQAqQEExCBSZXR1cm5zIHRoZSBzbG90IHRoYXQgc3RhcnRlZCB0aGUgY3VycmVudCBlcG9jaC40Y3VycmVudF9lcG9jaAChDgTEIFJldHVybnMgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBjdXJyZW50IGVwb2NoLihuZXh0X2Vwb2NoAKEOCAEBIFJldHVybnMgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBuZXh0IGVwb2NoICh3aGljaCB3YXMgYWxyZWFkeVwgcHJldmlvdXNseSBhbm5vdW5jZWQpLnBnZW5lcmF0ZV9rZXlfb3duZXJzaGlwX3Byb29mCBBzbG90qQEwYXV0aG9yaXR5X2lkpQGlDiwJASBHZW5lcmF0ZXMgYSBwcm9vZiBvZiBrZXkgb3duZXJzaGlwIGZvciB0aGUgZ2l2ZW4gYXV0aG9yaXR5IGluIHRoZQ0BIGN1cnJlbnQgZXBvY2guIEFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhpcyBtb2R1bGUgaXMgY291cGxlZCB3aXRoIHRoZQUBIHNlc3Npb24gaGlzdG9yaWNhbCBtb2R1bGUgdG8gcHJvdmUgdGhhdCBhIGdpdmVuIGF1dGhvcml0eSBrZXkgaXMNASB0aWVkIHRvIGEgZ2l2ZW4gc3Rha2luZyBpZGVudGl0eSBkdXJpbmcgYSBzcGVjaWZpYyBzZXNzaW9uLiBQcm9vZnMRASBvZiBrZXkgb3duZXJzaGlwIGFyZSBuZWNlc3NhcnkgZm9yIHN1Ym1pdHRpbmcgZXF1aXZvY2F0aW9uIHJlcG9ydHMuCQEgTk9URTogZXZlbiB0aG91Z2ggdGhlIEFQSSB0YWtlcyBhIGBzbG90YCBhcyBwYXJhbWV0ZXIgdGhlIGN1cnJlbnQJASBpbXBsZW1lbnRhdGlvbnMgaWdub3JlcyB0aGlzIHBhcmFtZXRlciBhbmQgaW5zdGVhZCByZWxpZXMgb24gdGhpcw0BIG1ldGhvZCBiZWluZyBjYWxsZWQgYXQgdGhlIGNvcnJlY3QgYmxvY2sgaGVpZ2h0LCBpLmUuIGFueSBwb2ludCBhdPAgd2hpY2ggdGhlIGVwb2NoIGZvciB0aGUgZ2l2ZW4gc2xvdCBpcyBsaXZlIG9uLWNoYWluLiBGdXR1cmUJASBpbXBsZW1lbnRhdGlvbnMgd2lsbCBpbnN0ZWFkIHVzZSBpbmRleGVkIGRhdGEgdGhyb3VnaCBhbiBvZmZjaGFpbtAgd29ya2VyLCBub3QgcmVxdWlyaW5nIG9sZGVyIHN0YXRlcyB0byBiZSBhdmFpbGFibGUutHN1Ym1pdF9yZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29mnQE8a2V5X293bmVyX3Byb29mqQ4lDiARASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYW4gZXF1aXZvY2F0aW9uLiBUaGUgY2FsbGVy+CBtdXN0IHByb3ZpZGUgdGhlIGVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgYSBrZXkgb3duZXJzaGlwIHByb29m/CAoc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nIGBnZW5lcmF0ZV9rZXlfb3duZXJzaGlwX3Byb29mYCkuIFRoZQUBIGV4dHJpbnNpYyB3aWxsIGJlIHVuc2lnbmVkIGFuZCBzaG91bGQgb25seSBiZSBhY2NlcHRlZCBmb3IgbG9jYWwVASBhdXRob3JzaGlwIChub3QgdG8gYmUgYnJvYWRjYXN0IHRvIHRoZSBuZXR3b3JrKS4gVGhpcyBtZXRob2QgcmV0dXJucwkBIGBOb25lYCB3aGVuIGNyZWF0aW9uIG9mIHRoZSBleHRyaW5zaWMgZmFpbHMsIGUuZy4gaWYgZXF1aXZvY2F0aW9uBQEgcmVwb3J0aW5nIGlzIGRpc2FibGVkIGZvciB0aGUgZ2l2ZW4gcnVudGltZSAoaS5lLiB0aGlzIG1ldGhvZCBpcwUBIGhhcmRjb2RlZCB0byByZXR1cm4gYE5vbmVgKS4gT25seSB1c2VmdWwgaW4gYW4gb2ZmY2hhaW4gY29udGV4dC4EuCBBUEkgbmVjZXNzYXJ5IGZvciBibG9jayBhdXRob3JzaGlwIHdpdGggQkFCRS5UQXV0aG9yaXR5RGlzY292ZXJ5QXBpBCxhdXRob3JpdGllcwBpCQQZASBSZXRyaWV2ZSBhdXRob3JpdHkgaWRlbnRpZmllcnMgb2YgdGhlIGN1cnJlbnQgYW5kIG5leHQgYXV0aG9yaXR5IHNldC4QdCBUaGUgYXV0aG9yaXR5IGRpc2NvdmVyeSBhcGkuAFEBIFRoaXMgYXBpIGlzIHVzZWQgYnkgdGhlIGBjbGllbnQvYXV0aG9yaXR5LWRpc2NvdmVyeWAgbW9kdWxlIHRvIHJldHJpZXZlIGlkZW50aWZpZXJznCBvZiB0aGUgY3VycmVudCBhbmQgbmV4dCBhdXRob3JpdHkgc2V0LixTZXNzaW9uS2V5cwhUZ2VuZXJhdGVfc2Vzc2lvbl9rZXlzBBBzZWVk0Qw4HBUBIEdlbmVyYXRlIGEgc2V0IG9mIHNlc3Npb24ga2V5cyB3aXRoIG9wdGlvbmFsbHkgdXNpbmcgdGhlIGdpdmVuIHNlZWQuCQEgVGhlIGtleXMgc2hvdWxkIGJlIHN0b3JlZCB3aXRoaW4gdGhlIGtleXN0b3JlIGV4cG9zZWQgdmlhIHJ1bnRpbWU8IGV4dGVybmFsaXRpZXMuALAgVGhlIHNlZWQgbmVlZHMgdG8gYmUgYSB2YWxpZCBgdXRmOGAgc3RyaW5nLgDQIFJldHVybnMgdGhlIGNvbmNhdGVuYXRlZCBTQ0FMRSBlbmNvZGVkIHB1YmxpYyBrZXlzLkxkZWNvZGVfc2Vzc2lvbl9rZXlzBBxlbmNvZGVkOK0ODJggRGVjb2RlIHRoZSBnaXZlbiBwdWJsaWMgc2Vzc2lvbiBrZXlzLgDcIFJldHVybnMgdGhlIGxpc3Qgb2YgcHVibGljIHJhdyBwdWJsaWMga2V5cyArIGtleSB0eXBlLgRoIFNlc3Npb24ga2V5cyBydW50aW1lIGFwaS48QWNjb3VudE5vbmNlQXBpBDRhY2NvdW50X25vbmNlBBxhY2NvdW50ABAEwCBHZXQgY3VycmVudCBhY2NvdW50IG5vbmNlIG9mIGdpdmVuIGBBY2NvdW50SWRgLgSAIFRoZSBBUEkgdG8gcXVlcnkgYWNjb3VudCBub25jZS5UVHJhbnNhY3Rpb25QYXltZW50QXBpEChxdWVyeV9pbmZvCAx1eHRtDQxsZW4QuQ4ARHF1ZXJ5X2ZlZV9kZXRhaWxzCAx1eHRtDQxsZW4QvQ4ATHF1ZXJ5X3dlaWdodF90b19mZWUEGHdlaWdodCgYAExxdWVyeV9sZW5ndGhfdG9fZmVlBBhsZW5ndGgQGAAAZFRyYW5zYWN0aW9uUGF5bWVudENhbGxBcGkQPHF1ZXJ5X2NhbGxfaW5mbwgQY2FsbHUBDGxlbhC5DgRJASBRdWVyeSBpbmZvcm1hdGlvbiBvZiBhIGRpc3BhdGNoIGNsYXNzLCB3ZWlnaHQsIGFuZCBmZWUgb2YgYSBnaXZlbiBlbmNvZGVkIGBDYWxsYC5YcXVlcnlfY2FsbF9mZWVfZGV0YWlscwgQY2FsbHUBDGxlbhC9DgS0IFF1ZXJ5IGZlZSBkZXRhaWxzIG9mIGEgZ2l2ZW4gZW5jb2RlZCBgQ2FsbGAuTHF1ZXJ5X3dlaWdodF90b19mZWUEGHdlaWdodCgYBAEBIFF1ZXJ5IHRoZSBvdXRwdXQgb2YgdGhlIGN1cnJlbnQgYFdlaWdodFRvRmVlYCBnaXZlbiBzb21lIGlucHV0LkxxdWVyeV9sZW5ndGhfdG9fZmVlBBhsZW5ndGgQGAQBASBRdWVyeSB0aGUgb3V0cHV0IG9mIHRoZSBjdXJyZW50IGBMZW5ndGhUb0ZlZWAgZ2l2ZW4gc29tZSBpbnB1dC4ANFhjbVBheW1lbnRBcGkQfHF1ZXJ5X2FjY2VwdGFibGVfcGF5bWVudF9hc3NldHMELHhjbV92ZXJzaW9uEMkOFLQgUmV0dXJucyBhIGxpc3Qgb2YgYWNjZXB0YWJsZSBwYXltZW50IGFzc2V0cy4AMCAjIEFyZ3VtZW50cwBoICogYHhjbV92ZXJzaW9uYDogVmVyc2lvbi5AcXVlcnlfeGNtX3dlaWdodAQcbWVzc2FnZYkF1Q4UqCBSZXR1cm5zIGEgd2VpZ2h0IG5lZWRlZCB0byBleGVjdXRlIGEgWENNLgAwICMgQXJndW1lbnRzAHQgKiBgbWVzc2FnZWA6IGBWZXJzaW9uZWRYY21gLmRxdWVyeV93ZWlnaHRfdG9fYXNzZXRfZmVlCBh3ZWlnaHQoFGFzc2V0vQbZDhjoIENvbnZlcnRzIGEgd2VpZ2h0IGludG8gYSBmZWUgZm9yIHRoZSBzcGVjaWZpZWQgYEFzc2V0SWRgLgAwICMgQXJndW1lbnRzAIggKiBgd2VpZ2h0YDogY29udmVydGlibGUgYFdlaWdodGAufCAqIGBhc3NldGA6IGBWZXJzaW9uZWRBc3NldElkYC5McXVlcnlfZGVsaXZlcnlfZmVlcwgsZGVzdGluYXRpb25FARxtZXNzYWdliQXdDiAdASBHZXQgZGVsaXZlcnkgZmVlcyBmb3Igc2VuZGluZyBhIHNwZWNpZmljIGBtZXNzYWdlYCB0byBhIGBkZXN0aW5hdGlvbmAu9CBUaGVzZSBhbHdheXMgY29tZSBpbiBhIHNwZWNpZmljIGFzc2V0LCBkZWZpbmVkIGJ5IHRoZSBjaGFpbi4AMCAjIEFyZ3VtZW50c4EBICogYG1lc3NhZ2VgOiBUaGUgbWVzc2FnZSB0aGF0J2xsIGJlIHNlbnQsIG5lY2Vzc2FyeSBiZWNhdXNlIG1vc3QgZGVsaXZlcnkgZmVlcyBhcmUgYmFzZWQgb24gdGhlXCAgIHNpemUgb2YgdGhlIG1lc3NhZ2UuYQEgKiBgZGVzdGluYXRpb25gOiBUaGUgZGVzdGluYXRpb24gdG8gc2VuZCB0aGUgbWVzc2FnZSB0by4gRGlmZmVyZW50IGRlc3RpbmF0aW9ucyBtYXkgdXNlwCAgIGRpZmZlcmVudCBzZW5kZXJzIHRoYXQgY2hhcmdlIGRpZmZlcmVudCBmZWVzLixwIEEgdHJhaXQgb2YgWENNIHBheW1lbnQgQVBJLgCoIEFQSSBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciBvYnRhaW5pbmc6AMQgKiB0aGUgd2VpZ2h0IHJlcXVpcmVkIHRvIGV4ZWN1dGUgYW4gWENNIG1lc3NhZ2UsBQEgKiBhIGxpc3Qgb2YgYWNjZXB0YWJsZSBgQXNzZXRJZGBzIGZvciBtZXNzYWdlIGV4ZWN1dGlvbiBwYXltZW50LAEBICogdGhlIGNvc3Qgb2YgdGhlIHdlaWdodCBpbiB0aGUgc3BlY2lmaWVkIGFjY2VwdGFibGUgYEFzc2V0SWRgLqAgKiB0aGUgZmVlcyBmb3IgYW4gWENNIG1lc3NhZ2UgZGVsaXZlcnkuAPAgVG8gZGV0ZXJtaW5lIHRoZSBleGVjdXRpb24gd2VpZ2h0IG9mIHRoZSBjYWxscyByZXF1aXJlZCBmb3J1ASBbYHhjbTo6bGF0ZXN0OjpJbnN0cnVjdGlvbjo6VHJhbnNhY3RgXSBpbnN0cnVjdGlvbiwgYFRyYW5zYWN0aW9uUGF5bWVudENhbGxBcGlgIGNhbiBiZSB1c2VkLiREcnlSdW5BcGkIMGRyeV9ydW5fY2FsbAgYb3JpZ2lufQIQY2FsbHUB4Q4EOCBEcnkgcnVuIGNhbGwuLGRyeV9ydW5feGNtCDxvcmlnaW5fbG9jYXRpb25FAQx4Y22NBgEPBFAgRHJ5IHJ1biBYQ00gcHJvZ3JhbSSxASBBUEkgZm9yIGRyeS1ydW5uaW5nIGV4dHJpbnNpY3MgYW5kIFhDTSBwcm9ncmFtcyB0byBnZXQgdGhlIHByb2dyYW1zIHRoYXQgbmVlZCB0byBiZSBwYXNzZWQgdG8gdGhlIGZlZXMgQVBJLgCBASBBbGwgY2FsbHMgcmV0dXJuIGEgdmVjdG9yIG9mIHR1cGxlcyAobG9jYXRpb24sIHhjbSkgd2hlcmUgZWFjaCAieGNtIiBpcyBleGVjdXRlZCBpbiAibG9jYXRpb24iLuQgSWYgdGhlcmUncyBsb2NhbCBleGVjdXRpb24sIHRoZSBsb2NhdGlvbiB3aWxsIGJlICJIZXJlIi4dASBUaGlzIHZlY3RvciBjYW4gYmUgdXNlZCB0byBjYWxjdWxhdGUgYm90aCBleGVjdXRpb24gYW5kIGRlbGl2ZXJ5IGZlZXMuAJkBIENhbGxzIG9yIFhDTXMgbWlnaHQgZmFpbCB3aGVuIGV4ZWN1dGVkLCB0aGlzIGRvZXNuJ3QgbWVhbiB0aGUgcmVzdWx0IG9mIHRoZXNlIGNhbGxzIHdpbGwgYmUgYW4gYEVycmAuZQEgSW4gdGhvc2UgY2FzZXMsIHRoZXJlIG1pZ2h0IHN0aWxsIGJlIGEgdmFsaWQgcmVzdWx0LCB3aXRoIHRoZSBleGVjdXRpb24gZXJyb3IgaW5zaWRlIGl0LmUBIFRoZSBvbmx5IHJlYXNvbnMgd2h5IHRoZXNlIGNhbGxzIG1pZ2h0IHJldHVybiBhbiBlcnJvciBhcmUgbGlzdGVkIGluIHRoZSBbYEVycm9yYF0gZW51bS5QTG9jYXRpb25Ub0FjY291bnRBcGkEQGNvbnZlcnRfbG9jYXRpb24EIGxvY2F0aW9uRQEJDwSQIENvbnZlcnRzIGBMb2NhdGlvbmAgdG8gYEFjY291bnRJZGAuBA0BIEFQSSBmb3IgdXNlZnVsIGNvbnZlcnNpb25zIGJldHdlZW4gWENNIGBMb2NhdGlvbmAgYW5kIGBBY2NvdW50SWRgLjhHZW5lc2lzQnVpbGRlcgwsYnVpbGRfc3RhdGUEEGpzb244EQ8kZQEgQnVpbGQgYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBmcm9tIGEgSlNPTiBibG9iIG5vdCB1c2luZyBhbnkgZGVmYXVsdHMgYW5kIHN0b3JlIGl0IGluIHRoZSQgc3RvcmFnZS4A+QEgSW4gdGhlIGNhc2Ugb2YgYSBGUkFNRS1iYXNlZCBydW50aW1lLCB0aGlzIGZ1bmN0aW9uIGRlc2VyaWFsaXplcyB0aGUgZnVsbCBgUnVudGltZUdlbmVzaXNDb25maWdgIGZyb20gdGhlIGdpdmVuIEpTT04gYmxvYiBhbmRZASBwdXRzIGl0IGludG8gdGhlIHN0b3JhZ2UuIElmIHRoZSBwcm92aWRlZCBKU09OIGJsb2IgaXMgaW5jb3JyZWN0IG9yIGluY29tcGxldGUgb3IgdGhltCBkZXNlcmlhbGl6YXRpb24gZmFpbHMsIGFuIGVycm9yIGlzIHJldHVybmVkLgBdASBQbGVhc2Ugbm90ZSB0aGF0IHByb3ZpZGVkIEpTT04gYmxvYiBtdXN0IGNvbnRhaW4gYWxsIGBSdW50aW1lR2VuZXNpc0NvbmZpZ2AgZmllbGRzLCBub1wgZGVmYXVsdHMgd2lsbCBiZSB1c2VkLihnZXRfcHJlc2V0BAhpZBUP0Qw4YQEgUmV0dXJucyBhIEpTT04gYmxvYiByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnVpbHQtaW4gYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBpZGVudGlmaWVkIGJ5GCBgaWRgLgA9ASBJZiBgaWRgIGlzIGBOb25lYCB0aGUgZnVuY3Rpb24gcmV0dXJucyBKU09OIGJsb2IgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRlZmF1bHRJASBgUnVudGltZUdlbmVzaXNDb25maWdgIHN0cnVjdCBvZiB0aGUgcnVudGltZS4gSW1wbGVtZW50YXRpb24gbXVzdCBwcm92aWRlIGRlZmF1bHRgIGBSdW50aW1lR2VuZXNpc0NvbmZpZ2AuACEBIE90aGVyd2lzZSBmdW5jdGlvbiByZXR1cm5zIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnVpbHQtaW4sIG5hbWVkUQEgYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBwcmVzZXQgaWRlbnRpZmllZCBieSBgaWRgLCBvciBgTm9uZWAgaWYgc3VjaCBwcmVzZXQgZG9lcyBub3RlASBleGlzdHMuIFJldHVybmVkIGBWZWM8dTg+YCBjb250YWlucyBieXRlcyBvZiBKU09OIGJsb2IgKHBhdGNoKSB3aGljaCBjb21wcmlzZXMgYSBsaXN0IG9mTQEgKHBvdGVudGlhbGx5IG5lc3RlZCkga2V5LXZhbHVlIHBhaXJzIHRoYXQgYXJlIGludGVuZGVkIGZvciBjdXN0b21pemluZyB0aGUgZGVmYXVsdGUBIHJ1bnRpbWUgZ2VuZXNpcyBjb25maWcuIFRoZSBwYXRjaCBzaGFsbCBiZSBtZXJnZWQgKHJmYzczODYpIHdpdGggdGhlIEpTT04gcmVwcmVzZW50YXRpb25hASBvZiB0aGUgZGVmYXVsdCBgUnVudGltZUdlbmVzaXNDb25maWdgIHRvIGNyZWF0ZSBhIGNvbXByZWhlbnNpdmUgZ2VuZXNpcyBjb25maWcgdGhhdCBjYW6EIGJlIHVzZWQgaW4gYGJ1aWxkX3N0YXRlYCBtZXRob2QuMHByZXNldF9uYW1lcwAZDxBRASBSZXR1cm5zIGEgbGlzdCBvZiBpZGVudGlmaWVycyBmb3IgYXZhaWxhYmxlIGJ1aWx0aW4gYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBwcmVzZXRzLgBhASBUaGUgcHJlc2V0cyBmcm9tIHRoZSBsaXN0IGNhbiBiZSBxdWVyaWVkIHdpdGggW2BHZW5lc2lzQnVpbGRlcjo6Z2V0X3ByZXNldGBdIG1ldGhvZC4gSWYBASBubyBuYW1lZCBwcmVzZXRzIGFyZSBwcm92aWRlZCBieSB0aGUgcnVudGltZSB0aGUgbGlzdCBpcyBlbXB0eS4E6CBBUEkgdG8gaW50ZXJhY3Qgd2l0aCBSdW50aW1lR2VuZXNpc0NvbmZpZyBmb3IgdGhlIHJ1bnRpbWV1AVQdDwA=";
    dot_metadata_default = binMeta;
  }
});

// .papi/descriptors/src/ksm_metadata.ts
var ksm_metadata_exports = {};
__export(ksm_metadata_exports, {
  default: () => ksm_metadata_default
});
var binMeta2, ksm_metadata_default;
var init_ksm_metadata = __esm({
  ".papi/descriptors/src/ksm_metadata.ts"() {
    binMeta2 = "";
    ksm_metadata_default = binMeta2;
  }
});

// .papi/descriptors/src/paseo_metadata.ts
var paseo_metadata_exports = {};
__export(paseo_metadata_exports, {
  default: () => paseo_metadata_default
});
var binMeta3, paseo_metadata_default;
var init_paseo_metadata = __esm({
  ".papi/descriptors/src/paseo_metadata.ts"() {
    binMeta3 = "";
    paseo_metadata_default = binMeta3;
  }
});

// .papi/descriptors/src/wnd_metadata.ts
var wnd_metadata_exports = {};
__export(wnd_metadata_exports, {
  default: () => wnd_metadata_default
});
var binMeta4, wnd_metadata_default;
var init_wnd_metadata = __esm({
  ".papi/descriptors/src/wnd_metadata.ts"() {
    binMeta4 = "";
    wnd_metadata_default = binMeta4;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  AssetRateEvent: () => AssetRateEvent,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesBountyStatus: () => BountiesBountyStatus,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  CandidateEvent: () => CandidateEvent,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingEvent: () => ConvictionVotingEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  CoreState: () => CoreState,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  DotXcmVersionedAssetId: () => DotXcmVersionedAssetId,
  DotXcmVersionedAssets: () => DotXcmVersionedAssets,
  DotXcmVersionedLocation: () => DotXcmVersionedLocation,
  DotXcmVersionedXcm: () => DotXcmVersionedXcm,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  ExtensionsCheckMortality: () => ExtensionsCheckMortality,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IdentityData: () => IdentityData,
  IdentityJudgement: () => IdentityJudgement,
  IndicesEvent: () => IndicesEvent,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsEvent: () => NominationPoolsEvent,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionEvent: () => ParachainsInclusionEvent,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeCommonAssignedSlotsEvent: () => PolkadotRuntimeCommonAssignedSlotsEvent,
  PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart: () => PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart,
  PolkadotRuntimeCommonIdentityMigratorEvent: () => PolkadotRuntimeCommonIdentityMigratorEvent,
  PolkadotRuntimeOriginCaller: () => PolkadotRuntimeOriginCaller,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: () => PolkadotRuntimeParachainsSchedulerPalletCoreOccupied,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  RecoveryEvent: () => RecoveryEvent,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  RootTestingEvent: () => RootTestingEvent,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingEvent: () => StakingEvent,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityError: () => TransactionValidityError,
  TransactionValidityInvalidTransaction: () => TransactionValidityInvalidTransaction,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VersionedLocatableAsset: () => VersionedLocatableAsset,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin: () => WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  XcmPalletOrigin: () => XcmPalletOrigin,
  XcmPalletQueryStatus: () => XcmPalletQueryStatus,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2BodyId: () => XcmV2BodyId,
  XcmV2Instruction: () => XcmV2Instruction,
  XcmV2Junction: () => XcmV2Junction,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiAssetFilter: () => XcmV2MultiAssetFilter,
  XcmV2MultiassetAssetId: () => XcmV2MultiassetAssetId,
  XcmV2MultiassetAssetInstance: () => XcmV2MultiassetAssetInstance,
  XcmV2MultiassetFungibility: () => XcmV2MultiassetFungibility,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2MultiassetWildMultiAsset: () => XcmV2MultiassetWildMultiAsset,
  XcmV2MultilocationJunctions: () => XcmV2MultilocationJunctions,
  XcmV2NetworkId: () => XcmV2NetworkId,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV2Response: () => XcmV2Response,
  XcmV2TraitsError: () => XcmV2TraitsError,
  XcmV2WeightLimit: () => XcmV2WeightLimit,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV4TraitsOutcome: () => XcmV4TraitsOutcome,
  XcmV5AssetFilter: () => XcmV5AssetFilter,
  XcmV5Instruction: () => XcmV5Instruction,
  XcmV5Junction: () => XcmV5Junction,
  XcmV5Junctions: () => XcmV5Junctions,
  XcmV5NetworkId: () => XcmV5NetworkId,
  XcmV5WildAsset: () => XcmV5WildAsset,
  XcmVersionedAsset: () => XcmVersionedAsset,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedResponse: () => XcmVersionedResponse,
  XcmVersionedXcm: () => XcmVersionedXcm,
  dot: () => dot_default,
  ksm: () => ksm_default,
  paseo: () => paseo_default,
  wnd: () => wnd_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/dot.ts
var toBinary = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Dot"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var getMetadata = () => Promise.resolve().then(() => (init_dot_metadata(), dot_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis = "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3";
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis };
var dot_default = _allDescriptors;

// .papi/descriptors/src/ksm.ts
var toBinary2 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Ksm"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var getMetadata2 = () => Promise.resolve().then(() => (init_ksm_metadata(), ksm_metadata_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var genesis2 = "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe";
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2, getMetadata: getMetadata2, genesis: genesis2 };
var ksm_default = _allDescriptors2;

// .papi/descriptors/src/paseo.ts
var toBinary3 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues3 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Paseo"]);
var metadataTypes3 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary3("default" in module2 ? module2.default : module2)
);
var asset3 = {};
var getMetadata3 = () => Promise.resolve().then(() => (init_paseo_metadata(), paseo_metadata_exports)).then(
  (module2) => toBinary3("default" in module2 ? module2.default : module2)
);
var genesis3 = "0x77afd6190f1554ad45fd0d31aee62aacc33c6db0ea801129acb813f913e0764f";
var _allDescriptors3 = { descriptors: descriptorValues3, metadataTypes: metadataTypes3, asset: asset3, getMetadata: getMetadata3, genesis: genesis3 };
var paseo_default = _allDescriptors3;

// .papi/descriptors/src/wnd.ts
var toBinary4 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues4 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Wnd"]);
var metadataTypes4 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary4("default" in module2 ? module2.default : module2)
);
var asset4 = {};
var getMetadata4 = () => Promise.resolve().then(() => (init_wnd_metadata(), wnd_metadata_exports)).then(
  (module2) => toBinary4("default" in module2 ? module2.default : module2)
);
var genesis4 = "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e";
var _allDescriptors4 = { descriptors: descriptorValues4, metadataTypes: metadataTypes4, asset: asset4, getMetadata: getMetadata4, genesis: genesis4 };
var wnd_default = _allDescriptors4;

// .papi/descriptors/src/common-types.ts
var import_polkadot_api = require("polkadot-api");
var DigestItem = import_polkadot_api._Enum;
var Phase = import_polkadot_api._Enum;
var DispatchClass = import_polkadot_api._Enum;
var BagsListListListError = import_polkadot_api._Enum;
var TokenError = import_polkadot_api._Enum;
var ArithmeticError = import_polkadot_api._Enum;
var TransactionalError = import_polkadot_api._Enum;
var PreimageEvent = import_polkadot_api._Enum;
var IndicesEvent = import_polkadot_api._Enum;
var BalanceStatus = import_polkadot_api._Enum;
var TransactionPaymentEvent = import_polkadot_api._Enum;
var StakingEvent = import_polkadot_api._Enum;
var StakingRewardDestination = import_polkadot_api._Enum;
var StakingForcing = import_polkadot_api._Enum;
var OffencesEvent = import_polkadot_api._Enum;
var SessionEvent = import_polkadot_api._Enum;
var GrandpaEvent = import_polkadot_api._Enum;
var VersionedLocatableAsset = import_polkadot_api._Enum;
var XcmV3Junctions = import_polkadot_api._Enum;
var XcmV3Junction = import_polkadot_api._Enum;
var XcmV3JunctionNetworkId = import_polkadot_api._Enum;
var XcmV3JunctionBodyId = import_polkadot_api._Enum;
var XcmV2JunctionBodyPart = import_polkadot_api._Enum;
var XcmV3MultiassetAssetId = import_polkadot_api._Enum;
var DotXcmVersionedLocation = import_polkadot_api._Enum;
var XcmV2MultilocationJunctions = import_polkadot_api._Enum;
var XcmV2Junction = import_polkadot_api._Enum;
var XcmV2NetworkId = import_polkadot_api._Enum;
var XcmV2BodyId = import_polkadot_api._Enum;
var ConvictionVotingEvent = import_polkadot_api._Enum;
var PreimagesBounded = import_polkadot_api._Enum;
var CommonClaimsEvent = import_polkadot_api._Enum;
var VestingEvent = import_polkadot_api._Enum;
var BountiesEvent = import_polkadot_api._Enum;
var ChildBountiesEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseElectionCompute = import_polkadot_api._Enum;
var ElectionProviderMultiPhasePhase = import_polkadot_api._Enum;
var BagsListEvent = import_polkadot_api._Enum;
var NominationPoolsEvent = import_polkadot_api._Enum;
var NominationPoolsPoolState = import_polkadot_api._Enum;
var NominationPoolsCommissionClaimPermission = import_polkadot_api._Enum;
var ParachainsInclusionEvent = import_polkadot_api._Enum;
var ParachainsParasEvent = import_polkadot_api._Enum;
var ParachainsHrmpEvent = import_polkadot_api._Enum;
var ParachainsDisputesEvent = import_polkadot_api._Enum;
var ParachainsDisputeLocation = import_polkadot_api._Enum;
var ParachainsDisputeResult = import_polkadot_api._Enum;
var CommonParasRegistrarEvent = import_polkadot_api._Enum;
var CommonSlotsEvent = import_polkadot_api._Enum;
var CommonAuctionsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsCoretimeEvent = import_polkadot_api._Enum;
var XcmV4TraitsOutcome = import_polkadot_api._Enum;
var XcmV3TraitsError = import_polkadot_api._Enum;
var XcmV4Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetFungibility = import_polkadot_api._Enum;
var XcmV3MultiassetAssetInstance = import_polkadot_api._Enum;
var XcmV4Response = import_polkadot_api._Enum;
var XcmV3MaybeErrorCode = import_polkadot_api._Enum;
var XcmV2OriginKind = import_polkadot_api._Enum;
var XcmV4AssetAssetFilter = import_polkadot_api._Enum;
var XcmV4AssetWildAsset = import_polkadot_api._Enum;
var XcmV2MultiassetWildFungibility = import_polkadot_api._Enum;
var XcmV3WeightLimit = import_polkadot_api._Enum;
var DotXcmVersionedAssets = import_polkadot_api._Enum;
var XcmV2MultiassetAssetId = import_polkadot_api._Enum;
var XcmV2MultiassetFungibility = import_polkadot_api._Enum;
var XcmV2MultiassetAssetInstance = import_polkadot_api._Enum;
var ParachainsInclusionAggregateMessageOrigin = import_polkadot_api._Enum;
var ParachainsInclusionUmpQueueId = import_polkadot_api._Enum;
var AssetRateEvent = import_polkadot_api._Enum;
var PolkadotRuntimeOriginCaller = import_polkadot_api._Enum;
var DispatchRawOrigin = import_polkadot_api._Enum;
var GovernanceOrigin = import_polkadot_api._Enum;
var ParachainsOrigin = import_polkadot_api._Enum;
var XcmPalletOrigin = import_polkadot_api._Enum;
var PreimageOldRequestStatus = import_polkadot_api._Enum;
var PreimageRequestStatus = import_polkadot_api._Enum;
var BabeDigestsNextConfigDescriptor = import_polkadot_api._Enum;
var BabeAllowedSlots = import_polkadot_api._Enum;
var BabeDigestsPreDigest = import_polkadot_api._Enum;
var BalancesTypesReasons = import_polkadot_api._Enum;
var PreimagePalletHoldReason = import_polkadot_api._Enum;
var WestendRuntimeRuntimeFreezeReason = import_polkadot_api._Enum;
var NominationPoolsPalletFreezeReason = import_polkadot_api._Enum;
var TransactionPaymentReleases = import_polkadot_api._Enum;
var GrandpaStoredState = import_polkadot_api._Enum;
var TreasuryPaymentState = import_polkadot_api._Enum;
var ConvictionVotingVoteVoting = import_polkadot_api._Enum;
var ConvictionVotingVoteAccountVote = import_polkadot_api._Enum;
var VotingConviction = import_polkadot_api._Enum;
var TraitsScheduleDispatchTime = import_polkadot_api._Enum;
var ClaimsStatementKind = import_polkadot_api._Enum;
var Version = import_polkadot_api._Enum;
var BountiesBountyStatus = import_polkadot_api._Enum;
var ChildBountyStatus = import_polkadot_api._Enum;
var NominationPoolsClaimPermission = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = import_polkadot_api._Enum;
var PolkadotPrimitivesV6PvfPrepKind = import_polkadot_api._Enum;
var PvfExecKind = import_polkadot_api._Enum;
var ValidityAttestation = import_polkadot_api._Enum;
var PolkadotPrimitivesV6DisputeStatement = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = import_polkadot_api._Enum;
var InvalidDisputeStatementKind = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = import_polkadot_api._Enum;
var ParachainsParasParaLifecycle = import_polkadot_api._Enum;
var UpgradeGoAhead = import_polkadot_api._Enum;
var UpgradeRestriction = import_polkadot_api._Enum;
var SlashingOffenceKind = import_polkadot_api._Enum;
var BrokerCoretimeInterfaceCoreAssignment = import_polkadot_api._Enum;
var MultiSigner = import_polkadot_api._Enum;
var CommonCrowdloanLastContribution = import_polkadot_api._Enum;
var XcmPalletQueryStatus = import_polkadot_api._Enum;
var XcmVersionedResponse = import_polkadot_api._Enum;
var XcmV2Response = import_polkadot_api._Enum;
var XcmV2TraitsError = import_polkadot_api._Enum;
var XcmV3Response = import_polkadot_api._Enum;
var XcmPalletVersionMigrationStage = import_polkadot_api._Enum;
var DotXcmVersionedAssetId = import_polkadot_api._Enum;
var ReferendaTypesCurve = import_polkadot_api._Enum;
var MultiAddress = import_polkadot_api._Enum;
var BalancesAdjustmentDirection = import_polkadot_api._Enum;
var StakingPalletConfigOpBig = import_polkadot_api._Enum;
var StakingPalletConfigOp = import_polkadot_api._Enum;
var GrandpaEquivocation = import_polkadot_api._Enum;
var NominationPoolsBondExtra = import_polkadot_api._Enum;
var NominationPoolsConfigOp = import_polkadot_api._Enum;
var MultiSignature = import_polkadot_api._Enum;
var DotXcmVersionedXcm = import_polkadot_api._Enum;
var XcmV2Instruction = import_polkadot_api._Enum;
var XcmV2MultiAssetFilter = import_polkadot_api._Enum;
var XcmV2MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV2WeightLimit = import_polkadot_api._Enum;
var XcmV3Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetMultiAssetFilter = import_polkadot_api._Enum;
var XcmV3MultiassetWildMultiAsset = import_polkadot_api._Enum;
var TransactionValidityError = import_polkadot_api._Enum;
var TransactionValidityInvalidTransaction = import_polkadot_api._Enum;
var TransactionValidityUnknownTransaction = import_polkadot_api._Enum;
var TransactionValidityTransactionSource = import_polkadot_api._Enum;
var CoreState = import_polkadot_api._Enum;
var OccupiedCoreAssumption = import_polkadot_api._Enum;
var CandidateEvent = import_polkadot_api._Enum;
var MmrPrimitivesError = import_polkadot_api._Enum;
var RecoveryEvent = import_polkadot_api._Enum;
var XcmV5Junctions = import_polkadot_api._Enum;
var XcmV5Junction = import_polkadot_api._Enum;
var XcmV5NetworkId = import_polkadot_api._Enum;
var XcmVersionedLocation = import_polkadot_api._Enum;
var PolkadotRuntimeCommonAssignedSlotsEvent = import_polkadot_api._Enum;
var XcmV5Instruction = import_polkadot_api._Enum;
var XcmV5AssetFilter = import_polkadot_api._Enum;
var XcmV5WildAsset = import_polkadot_api._Enum;
var XcmVersionedAssets = import_polkadot_api._Enum;
var RootTestingEvent = import_polkadot_api._Enum;
var PolkadotRuntimeCommonIdentityMigratorEvent = import_polkadot_api._Enum;
var IdentityJudgement = import_polkadot_api._Enum;
var IdentityData = import_polkadot_api._Enum;
var WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin = import_polkadot_api._Enum;
var XcmVersionedAssetId = import_polkadot_api._Enum;
var XcmVersionedXcm = import_polkadot_api._Enum;
var PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart = import_polkadot_api._Enum;
var ExtensionsCheckMortality = import_polkadot_api._Enum;
var XcmVersionedAsset = import_polkadot_api._Enum;
