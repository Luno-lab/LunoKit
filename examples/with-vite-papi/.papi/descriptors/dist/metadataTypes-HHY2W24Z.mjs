// .papi/descriptors/src/metadataTypes.ts
var content = "";
var metadataTypes_default = content;
export {
  metadataTypes_default as default
};
